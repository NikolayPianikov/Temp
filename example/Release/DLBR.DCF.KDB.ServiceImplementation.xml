<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>DLBR.DCF.KDB.ServiceImplementation</name>
  </assembly>
  <members>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.AnimalEventLogActivityService">
      <summary>
        <h1>General</h1>
        <p>
            The following URIs specifies the location of the service in the production- and production test environment. 
            By default services in both the production and the production test environment uses the production data stores. The alternative URIs, which uses the test data stores (Medio), may be used for testing purposes.
            Please note that service versions might differ between the production- and production test environments. Before you begin using the service, please consult the person responsible as described in section 3.7 – Responsibility assignment.
            </p>
        <p>
          <b>Production URL:</b>
          <a href="http://prod.dcf.ws.dlbr.dk/DCFServices/ActivityServices/AnimalEventLogActivityService.svc">http://prod.dcf.ws.dlbr.dk/DCFServices/ActivityServices/AnimalEventLogActivityService.svc</a>
        </p>
        <p>
          <b>Accept test URL:</b>
          <a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/ActivityServices/AnimalEventLogActivityService.svc">http://accepttest.dcf.ws.dlbr.dk/DCFServices/ActivityServices/AnimalEventLogActivityService.svc</a>
        </p>
        <h1>Web Service Description</h1>
            The machine-readable description in the form of a WSDL document can be obtained by querying the following URI’s.
            <p><b>Production WSDL:</b><a href="http://prod.dcf.ws.dlbr.dk/DCFServices/ActivityServices/AnimalEventLogActivityService.svc?wsdl">http://prod.dcf.ws.dlbr.dk/DCFServices/ActivityServices/AnimalEventLogActivityService.svc?wsdl</a></p><p><b>Accept test WSDL:</b><a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/ActivityServices/AnimalEventLogActivityService.svc?wsdl">http://accepttest.dcf.ws.dlbr.dk/DCFServices/ActivityServices/AnimalEventLogActivityService.svc?wsdl</a></p><h1>Endpoints</h1>
            For information regarding endpoints, see topic 'Endpoints available in DCF Services'
            </summary>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.AnimalEventLogActivityServiceBase">
      <summary>
            Service Class - AnimalEventLogActivityService
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.AnimalEventLogActivityService.FindAnimalEventLogItemsByAnimalNumber(DLBR.DCF.KDB.MessageContracts.FindAnimalEventLogItemsByAnimalNumberRequest)">
      <summary>
        <h1>Functional Description</h1>
            Returns a list of events for a specific animal.
            <h1>Nested Input parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>AnimalNumber</td><td>yes</td><td>&gt;0</td><td>The animal number of the animal to get events for.</td></tr><tr><td>DateFrom</td><td></td><td></td><td>Specifies a lower date bound for the query</td></tr><tr><td>DateTo</td><td></td><td></td><td>Specifies a upper date bound for the query </td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>AnimalEventLogItemCollection</td><td>A collection of EventLogItems.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindAnimalEventLogItemsByAnimalNumberRequest" /></param>
      <returns>No description See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindAnimalEventLogItemsByAnimalNumberResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example:
            <code>            var proxy = new AnimalEventLogActivityServiceContractClient( "AnimalEventLogActivityService" );
            try
            {
                long animalNumber = 3288701295;
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                AnimalEventLogItemCollection result = proxy.FindAnimalEventLogItemsByAnimalNumber( animalNumber, null, null );

                Assert.IsNotNull( result );
                foreach( var eventLogItem in result )
                {
                    Assert.AreEqual( animalNumber, eventLogItem.AnimalNumber );
                }
            }
            catch( Exception ex )
            {
                Debug.WriteLine( ex.Message );
                throw;
            }
            finally
            {
                if( proxy.State != CommunicationState.Faulted )
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.AnimalEventLogActivityService.GetAnimalEventLogDetail(DLBR.DCF.KDB.MessageContracts.GetAnimalEventLogDetailRequest)">
      <summary>
        <h1>Functional Description</h1>
            Returns the details for a specific animal event log item.
            <h1>Nested Input parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>AnimalEventLogItem</td><td>yes</td><td>not null</td><td>The animal event log item to get details for</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>AnimalEventLogDetailsItem</td><td>Contains detailed information about a specific event.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetAnimalEventLogDetailRequest" /></param>
      <returns>No description See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetAnimalEventLogDetailResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example:
            <code>            var proxy = new AnimalEventLogActivityServiceContractClient( "AnimalEventLogActivityService" );
            try
            {
                long animalNumber = 3288701295;
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                AnimalEventLogItemCollection findResult = proxy.FindAnimalEventLogItemsByAnimalNumber( animalNumber, null, null );
                Assert.IsNotNull( findResult );

                foreach( var logEventItem in findResult )
                {
                    //only get details if we have a valid AnimalEventLogType and DetailId
                    if( logEventItem.AnimalEventLogType == null &amp;&amp; logEventItem.DetailsId.HasValue )
                        continue;

                    AnimalEventLogDetailItem detailsResult = proxy.GetAnimalEventLogDetail( logEventItem );

                    switch( logEventItem.AnimalEventLogType.Code )
                    {
                        //NoDetailsAvailable = -1 
                        //Unknown = 0,
                        default:
                            Assert.IsNull( detailsResult, "detailsResult" );
                            break;
                        //AnimalHealth = 1,
                        case 1:
                            Assert.IsNotNull( detailsResult.AnimalHealth, "AnimalHealth" );
                            break;
                        //AnimalTransfer = 2,
                        case 2:
                            Assert.IsNotNull( detailsResult.AnimalTransfer, "AnimalTransfer" );
                            break;
                        //DryPeriod = 3,
                        case 3:
                            Assert.IsNull( detailsResult.DryPeriod, "DryPeriod" );
                            break;
                        //Insemination = 4,
                        case 4:
                            Assert.IsNotNull( detailsResult.Insemination, "Insemination" );
                            break;
                        //PregnancyCheck = 5,
                        case 5:
                            Assert.IsNotNull( detailsResult.PregnancyCheck, "PregnancyCheck" );
                            break;
                        //Culling = 6,
                        case 6:
                            Assert.IsNotNull( detailsResult.Culling, "Culling" );
                            break;
                        //NaturalService = 7,
                        case 7:
                            Assert.IsNotNull( detailsResult.NaturalService, "NaturalService" );
                            break;
                        //Calving = 8,
                        case 8:
                            Assert.IsNotNull( detailsResult.Calving, "Calving" );
                            break;
                    }
                }
            }
            catch( Exception ex )
            {
                Debug.WriteLine( ex.Message );
                throw ex;
            }
            finally
            {
                if( proxy.State != CommunicationState.Faulted )
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.DMSFeedingDaysActivityService">
      <summary>
        <h1>General</h1>
        <p>
            The following URIs specifies the location of the service in the production- and production test environment. 
            By default services in both the production and the production test environment uses the production data stores. The alternative URIs, which uses the test data stores (Medio), may be used for testing purposes.
            Please note that service versions might differ between the production- and production test environments. Before you begin using the service, please consult the person responsible as described in section 3.7 – Responsibility assignment.
            </p>
        <p>
          <b>Production URL:</b>
          <a href="http://prod.dcf.ws.dlbr.dk/DCFServices/ActivityServices/DMSFeedingDaysActivityService.svc">http://prod.dcf.ws.dlbr.dk/DCFServices/ActivityServices/DMSFeedingDaysActivityService.svc</a>
        </p>
        <p>
          <b>Accept test URL:</b>
          <a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/ActivityServices/DMSFeedingDaysActivityService.svc">http://accepttest.dcf.ws.dlbr.dk/DCFServices/ActivityServices/DMSFeedingDaysActivityService.svc</a>
        </p>
        <h1>Web Service Description</h1>
            The machine-readable description in the form of a WSDL document can be obtained by querying the following URI’s.
            <p><b>Production WSDL:</b><a href="http://prod.dcf.ws.dlbr.dk/DCFServices/ActivityServices/DMSFeedingDaysActivityService.svc?wsdl">http://prod.dcf.ws.dlbr.dk/DCFServices/ActivityServices/DMSFeedingDaysActivityService.svc?wsdl</a></p><p><b>Accept test WSDL:</b><a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/ActivityServices/DMSFeedingDaysActivityService.svc?wsdl">http://accepttest.dcf.ws.dlbr.dk/DCFServices/ActivityServices/DMSFeedingDaysActivityService.svc?wsdl</a></p><h1>Endpoints</h1>
            For information regarding endpoints, see topic 'Endpoints available in DCF Services'
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.DMSFeedingDaysActivityService.GetFeedingDaysByManagementUnitId(DLBR.DCF.KDB.MessageContracts.GetFeedingDaysByManagementUnitIdRequest)">
      <summary>
        <h1>Functional Description</h1>
            Gets the feeding days data by a collection of management units.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>ManagementUnitIds</td><td>yes</td><td>&gt;0</td><td>The management unit ids the feeding days data belongs.</td></tr><tr><td>FromDate</td><td>yes</td><td>FromDate &lt;= ToDate</td><td>The start date of the period to get feeding days data for.</td></tr><tr><td>ToDate</td><td>yes</td><td>FromDate &lt;= ToDate</td><td>The end date of the period to get feeding days data for.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>DMSFeedingDays</td><td>The feeding days entity.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetFeedingDaysByManagementUnitIdRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetFeedingDaysByManagementUnitIdResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            var proxy = new DMSFeedingDaysActivityServiceContractClient("DMSFeedingDaysActivityService");
            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                var fromDate = new DateTime(2009, 12, 03);
                var toDate = new DateTime(2010, 01, 03);
                var managementUnitIds = new Collection&lt;long&gt; { 42173, 42171, 42172 };

                DMSFeedingDays result = proxy.GetFeedingDaysByManagementUnitId(fromDate, managementUnitIds, toDate);

                var groupedResult = result.MUFeedingDaysByDMSGroup.GroupBy(fd =&gt; fd.DMSGroup);
                foreach (var fdGroup in groupedResult)
                {
                    Console.WriteLine(fdGroup.Key);
                }

                Assert.IsNotNull(result);
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.DMSFeedingDaysActivityService.FindKPOFeedingDaysByManagementUnitId(DLBR.DCF.KDB.MessageContracts.FindKPOFeedingDaysByManagementUnitIdRequest)">
      <summary>
        <h1>Functional Description</h1>
            Gets the feeding days data by a collection of management units
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>ManagementUnitIds</td><td>yes</td><td>&gt;0</td><td>The management unit ids the feeding days data belongs.</td></tr><tr><td>FromDate</td><td>yes</td><td>FromDate &lt;= ToDate</td><td>The start date of the period to get feeding days data for.</td></tr><tr><td>ToDate</td><td>yes</td><td>FromDate &lt;= ToDate</td><td>The end date of the period to get feeding days data for.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>DMSFeedingDays</td><td>The feeding days entity.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindKPOFeedingDaysByManagementUnitIdRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindKPOFeedingDaysByManagementUnitIdResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            using (var service = new WcfServiceWrapper&lt;DMSFeedingDaysActivityServiceContract&gt;(Settings.Default.ADFS_IdpEndpoint,
                       Settings.Default.ADFS_Realm, 
                       TestUtil.USER_ID, TestUtil.PASSWORD,
                       String.Format("https://{0}/DCFServices/ActivityServices/DMSFeedingDaysActivityService.svc/adfs", Settings.Default.DCF_Hostname),
                       false))
            {
                service.ConfigureChannel += factory =&gt;
                {
                    service.Binding.MaxReceivedMessageSize = 200000000;
                };

                FindKPOFeedingDaysByManagementUnitIdRequest request = new FindKPOFeedingDaysByManagementUnitIdRequest();
                request.FromDate = new DateTime(2011, 12, 01);
                request.ToDate = new DateTime(2011, 12, 01);
                request.ManagementUnitIds = new Collection&lt;long&gt;() { 32238 };

                FindKPOFeedingDaysByManagementUnitIdResponse result = service.Channel.FindKPOFeedingDaysByManagementUnitId(request);

                Assert.IsNotNull(result);
                Assert.IsNotNull(result.KPOFeedingDays);
                Assert.IsTrue(result.KPOFeedingDays.KPOFeedingDaysAgeRange.Count() &gt; 0);
                result.KPOFeedingDays.KPOFeedingDaysAgeRange.ToList().ForEach(
                    k =&gt; Assert.IsTrue(k.DMSGroup != DMSGroupEnum.SMALL_CALF));
                result.KPOFeedingDays.KPOFeedingDaysAgeRange.
                    Where(k =&gt; k.DMSGroup != DMSGroupEnum.HEIFER &amp;&amp; k.DMSGroup != DMSGroupEnum.BULL).ToList().
                    ForEach(
                        k1 =&gt;
                        k1.FeedingDaysExcludeAllHeifersInPension.ToList().ForEach(
                            k2 =&gt; Assert.IsTrue(k2.AgeRange != AgeRangeEnum.SMALL_CALF_0_END, k2.Caption)));
                result.KPOFeedingDays.KPOFeedingDaysAgeRange.
                    Where(k =&gt; k.DMSGroup == DMSGroupEnum.HEIFER || k.DMSGroup == DMSGroupEnum.BULL).ToList().
                    ForEach(
                        k1 =&gt; Assert.IsTrue(k1.FeedingDaysExcludeAllHeifersInPension.Where(k2 =&gt; k2.AgeRange == AgeRangeEnum.SMALL_CALF_0_END).Count() == 1, k1.DMSCaption));
            }
</code></example>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.FoodTagActivityService">
      <summary>
        <h1>General</h1>
        <p>
            The following URIs specifies the location of the service in the production- and production test environment. 
            By default services in both the production and the production test environment uses the production data stores. The alternative URIs, which uses the test data stores (Medio), may be used for testing purposes.
            Please note that service versions might differ between the production- and production test environments. Before you begin using the service, please consult the person responsible as described in section 3.7 – Responsibility assignment.
            </p>
        <p>
          <b>Production URL:</b>
          <a href="http://prod.dcf.ws.dlbr.dk/DCFServices/ActivityServices/FoodTagActivityService.svc">http://prod.dcf.ws.dlbr.dk/DCFServices/ActivityServices/FoodTagActivityService.svc</a>
        </p>
        <p>
          <b>Accept test URL:</b>
          <a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/ActivityServices/FoodTagActivityService.svc">http://accepttest.dcf.ws.dlbr.dk/DCFServices/ActivityServices/FoodTagActivityService.svc</a>
        </p>
        <h1>Web Service Description</h1>
            The machine-readable description in the form of a WSDL document can be obtained by querying the following URI’s.
            <p><b>Production WSDL:</b><a href="http://prod.dcf.ws.dlbr.dk/DCFServices/ActivityServices/FoodTagActivityService.svc?wsdl">http://prod.dcf.ws.dlbr.dk/DCFServices/ActivityServices/FoodTagActivityService.svc?wsdl</a></p><p><b>Accept test WSDL:</b><a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/ActivityServices/FoodTagActivityService.svc?wsdl">http://accepttest.dcf.ws.dlbr.dk/DCFServices/ActivityServices/FoodTagActivityService.svc?wsdl</a></p><h1>Endpoints</h1>
            For information regarding endpoints, see topic 'Endpoints available in DCF Services'
            </summary>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.FoodTagActivityServiceBase">
      <summary>
            Service Class - FoodTagActivityService
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.FoodTagActivityService.GetFoodTagByAnimalNumber(DLBR.DCF.KDB.MessageContracts.GetFoodTagByAnimalNumberRequest)">
      <summary>
        <h1>Functional Description</h1>
            Get FoodTag By AnimalNumber
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>AnimalNumber</td><td>yes</td><td>&gt; 0</td><td>The animal number of the FoodTag</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>FoodTag</td><td>The <see cref="T:DLBR.DCF.KDB.DataContracts.FoodTagInformation" /> information for the requested animal</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetFoodTagByAnimalNumberRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetFoodTagByAnimalNumberResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            FoodTagActivityServiceContractClient proxy = new FoodTagActivityServiceContractClient("FoodTagActivityService");
            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.DCFFoodTagService_Name;
                proxy.ClientCredentials.UserName.Password = TestUtil.DCFFoodTagService_Password;

                const long animalNumber = 020800428290;
                FoodTagInformation result = proxy.GetFoodTagByAnimalNumber(animalNumber);

                Assert.IsNull(result);
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.DMSActivityService">
      <summary>
        <h1>General</h1>
        <p>
            The following URIs specifies the location of the service in the production- and production test environment. 
            By default services in both the production and the production test environment uses the production data stores. The alternative URIs, which uses the test data stores (Medio), may be used for testing purposes.
            Please note that service versions might differ between the production- and production test environments. Before you begin using the service, please consult the person responsible as described in section 3.7 – Responsibility assignment.
            </p>
        <p>
          <b>Production URL:</b>
          <a href="http://prod.dcf.ws.dlbr.dk/DCFServices/ActivityServices/DMSActivityService.svc">http://prod.dcf.ws.dlbr.dk/DCFServices/ActivityServices/DMSActivityService.svc</a>
        </p>
        <p>
          <b>Accept test URL:</b>
          <a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/ActivityServices/DMSActivityService.svc">http://accepttest.dcf.ws.dlbr.dk/DCFServices/ActivityServices/DMSActivityService.svc</a>
        </p>
        <h1>Web Service Description</h1>
            The machine-readable description in the form of a WSDL document can be obtained by querying the following URI’s.
            <p><b>Production WSDL:</b><a href="http://prod.dcf.ws.dlbr.dk/DCFServices/ActivityServices/DMSActivityService.svc?wsdl">http://prod.dcf.ws.dlbr.dk/DCFServices/ActivityServices/DMSActivityService.svc?wsdl</a></p><p><b>Accept test WSDL:</b><a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/ActivityServices/DMSActivityService.svc?wsdl">http://accepttest.dcf.ws.dlbr.dk/DCFServices/ActivityServices/DMSActivityService.svc?wsdl</a></p><h1>Endpoints</h1>
            For information regarding endpoints, see topic 'Endpoints available in DCF Services'
            </summary>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.AdvisorEntityService">
      <summary>
        <h1>General</h1>
        <p>
            The following URIs specifies the location of the service in the production- and production test environment. 
            By default services in both the production and the production test environment uses the production data stores. The alternative URIs, which uses the test data stores (Medio), may be used for testing purposes.
            Please note that service versions might differ between the production- and production test environments. Before you begin using the service, please consult the person responsible as described in section 3.7 – Responsibility assignment.
            </p>
        <p>
          <b>Production URL:</b>
          <a href="http://prod.dcf.ws.dlbr.dk/DCFServices/AdvisorEntityService.svc">http://prod.dcf.ws.dlbr.dk/DCFServices/AdvisorEntityService.svc</a>
        </p>
        <p>
          <b>Accept test URL:</b>
          <a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/AdvisorEntityService.svc">http://accepttest.dcf.ws.dlbr.dk/DCFServices/AdvisorEntityService.svc</a>
        </p>
        <h1>Web Service Description</h1>
            The machine-readable description in the form of a WSDL document can be obtained by querying the following URI’s.
            <p><b>Production WSDL:</b><a href="http://prod.dcf.ws.dlbr.dk/DCFServices/AdvisorEntityService.svc?wsdl">http://prod.dcf.ws.dlbr.dk/DCFServices/AdvisorEntityService.svc?wsdl</a></p><p><b>Accept test WSDL:</b><a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/AdvisorEntityService.svc?wsdl">http://accepttest.dcf.ws.dlbr.dk/DCFServices/AdvisorEntityService.svc?wsdl</a></p><h1>Endpoints</h1>
            For information regarding endpoints, see topic 'Endpoints available in DCF Services'
            </summary>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.AdvisorEntityServiceBase">
      <summary>
            Service Class - AdvisorEntityService
            </summary>
      <tocexclude />
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.AdvisorEntityService.GetAdvisorByAdvisorNumber(DLBR.DCF.KDB.MessageContracts.GetAdvisorByAdvisorNumberRequest)">
      <summary>
        <h1>Functional Description</h1>
            Gets a single advisor by its advisornumber
            <h1>Nested Input parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>AdvisorNumber</td><td>yes</td><td>&gt;0</td><td>The advisornumber of the advisor to read.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>Advisor</td><td>The advisorentity read. This value is null if the advisor could not be found, or if the user is not authorized to read the data.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetAdvisorByAdvisorNumberRequest" /></param>
      <returns>No description See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetAdvisorByAdvisorNumberResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example:
            <code>            const int advisorNumber = TestUtil.ADVISORNUMBER;

            AdvisorEntityServiceContractClient client = new AdvisorEntityServiceContractClient("AdvisorEntityService");
            try
            {
                client.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                client.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                Advisor result = client.GetAdvisorByAdvisorNumber(advisorNumber);
                Assert.IsNotNull(result);
                Assert.AreEqual(result.AdvisorNumber, advisorNumber);
            }
            catch( Exception ex )
            {
                Debug.WriteLine( ex.Message, "Exception" );
                throw;
            }
            finally
            {
                if( client.State != CommunicationState.Faulted )
                {
                    client.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.AdvisorEntityService.FindAdvisors(DLBR.DCF.KDB.MessageContracts.FindAdvisorsRequest)">
      <summary>
        <h1>Functional Description</h1>
            Finds a collection of advisors from a set of searchcriterias.
            <h1>Nested Input parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>HerdNumber</td><td></td><td>&gt;0</td><td>If a herdnumber is specified only advisors assigned to that herd is returned.</td></tr><tr><td>AnimalType</td><td>(yes)</td><td></td><td>If a herdnumber is specified AnimalType is required.</td></tr><tr><td>AdvisorTypes</td><td></td><td></td><td>If specified only advisors of the specified types is returned.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>AdvisorCollection</td><td>A collection of advisors matching the specified searchcriterias.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindAdvisorsRequest" /></param>
      <returns>No description See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindAdvisorsResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example:
            <code>            AdvisorEntityServiceContractClient client = new AdvisorEntityServiceContractClient("AdvisorEntityService");
            try
            {
                long herdNumber = TestUtil.HERD_NUMBER;

                client.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                client.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                AdvisorType advisorType = new AdvisorType();
                advisorType.Code = 1; //Vejleder

                AnimalType animalType = new AnimalType() {Code = 12};

                AdvisorTypeCollection advisorTypeCollection = new AdvisorTypeCollection();
                advisorTypeCollection.Add( advisorType );

                //Get all advisors
                AdvisorCollection result = client.FindAdvisors( advisorTypeCollection, null, null );

                Assert.IsNotNull( result );
                Assert.AreNotEqual( result.Count, 0 );

                Debug.WriteLine( "Total Number of returned advisors: " + result.Count.ToString(), "Result" );

                //Get advisors in specific herd
                result = client.FindAdvisors( advisorTypeCollection, animalType, herdNumber );

                Assert.IsNotNull( result );
                Assert.AreNotEqual( result.Count, 0 );

                Debug.WriteLine( "Total Number of returned advisors in specific herd: " + result.Count.ToString(), "Result" );

            }
            catch( Exception ex )
            {
                Debug.WriteLine( ex.Message, "Exception" );
                throw;

            }
            finally
            {
                if( client.State != CommunicationState.Faulted )
                {
                    client.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.AdvisorEntityService.FindUserSpecificAdvisors(DLBR.DCF.KDB.MessageContracts.FindUserSpecificAdvisorsRequest)">
      <summary>
        <h1>Functional Description</h1>
            Returns a collection of the advisor that the current user is authorized to use.
            <h1>Nested Input parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>AdvisorTypes</td><td></td><td></td><td>If specified only advisors of the specified types is returned.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>AdvisorCollection</td><td>A collection of advisors matching the specified searchcriterias.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindAdvisorsRequest" /></param>
      <returns>No description See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindAdvisorsResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example:
            <code>
            AdvisorEntityServiceContractClient client = new AdvisorEntityServiceContractClient("AdvisorEntityService");
            try
            {
                client.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                client.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                AdvisorCollection result = client.FindUserSpecificAdvisors( null );

                Assert.IsNotNull( result );
                Assert.AreEqual( result.Count, 0 );

                Debug.WriteLine( "Number of returned advisors: " + result.Count.ToString(), "Result" );
            }

            catch( Exception ex )
            {
                Debug.WriteLine( ex.Message, "Exception" );
                throw;

            }
            finally
            {
                if( client.State != CommunicationState.Faulted )
                {
                    client.Close();
                }
            }

</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.AdvisorEntityService.GetHerdPractice(DLBR.DCF.KDB.MessageContracts.GetHerdPracticeRequest)">
      <summary>
        <h1>Functional Description</h1>
            Gets the veterinarian practice assigned to the specified herd. This is either a practice chosen explicit by the herdowner, if found, otherwise it is the 
            official practice assigned by the CHR.
            <h1>Nested Input parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>HerdNumber</td><td>yes</td><td>&gt;0</td><td>Herdnumber of the herd of which to get the veterinarian practice.</td></tr><tr><td>AnimalType</td><td>yes</td><td></td><td>The animaltype of the herd.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>Practice</td><td>The veterinarian practice assigned to the herd.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindAdvisorsRequest" /></param>
      <returns>No description See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindAdvisorsResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example:
            <code>            AdvisorEntityServiceContractClient client = new AdvisorEntityServiceContractClient("AdvisorEntityService");

            try
            {
                long herdNumber = 32887;
                AnimalType animalType = new AnimalType() { Code = 12 };

                client.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                client.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                Practice practice = client.GetHerdPractice( animalType, herdNumber );

                Assert.IsNotNull( practice );
                Assert.AreEqual( 2654, practice.PracticeNumber );
            }
            catch( Exception ex )
            {
                Debug.WriteLine( ex.Message, "Exception" );
                throw;

            }
            finally
            {
                if( client.State != CommunicationState.Faulted )
                {
                    client.Close();
                }
            }
</code></example>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.AgriBusinessEntityService">
      <summary>
        <h1>General</h1>
        <p>
            The following URIs specifies the location of the service in the production- and production test environment. 
            By default services in both the production and the production test environment uses the production data stores. The alternative URIs, which uses the test data stores (Medio), may be used for testing purposes.
            Please note that service versions might differ between the production- and production test environments. Before you begin using the service, please consult the person responsible as described in section 3.7 – Responsibility assignment.
            </p>
        <p>
          <b>Production URL:</b>
          <a href="http://prod.dcf.ws.dlbr.dk/DCFServices/AgriBusinessEntityService.svc">http://prod.dcf.ws.dlbr.dk/DCFServices/AgriBusinessEntityService.svc</a>
        </p>
        <p>
          <b>Accept test URL:</b>
          <a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/AgriBusinessEntityService.svc">http://accepttest.dcf.ws.dlbr.dk/DCFServices/AgriBusinessEntityService.svc</a>
        </p>
        <h1>Web Service Description</h1>
            The machine-readable description in the form of a WSDL document can be obtained by querying the following URI’s.
            <p><b>Production WSDL:</b><a href="http://prod.dcf.ws.dlbr.dk/DCFServices/AgriBusinessEntityService.svc?wsdl">http://prod.dcf.ws.dlbr.dk/DCFServices/AgriBusinessEntityService.svc?wsdl</a></p><p><b>Accept test WSDL:</b><a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/AgriBusinessEntityService.svc?wsdl">http://accepttest.dcf.ws.dlbr.dk/DCFServices/AgriBusinessEntityService.svc?wsdl</a></p><h1>Endpoints</h1>
            For information regarding endpoints, see topic 'Endpoints available in DCF Services'
            </summary>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.AnimalGroupTransferEntityService">
      <summary>
        <h1>General</h1>
        <p>
            The following URIs specifies the location of the service in the production- and production test environment. 
            By default services in both the production and the production test environment uses the production data stores. The alternative URIs, which uses the test data stores (Medio), may be used for testing purposes.
            Please note that service versions might differ between the production- and production test environments. Before you begin using the service, please consult the person responsible as described in section 3.7 – Responsibility assignment.
            </p>
        <p>
          <b>Production URL:</b>
          <a href="http://prod.dcf.ws.dlbr.dk/DCFServices/AnimalGroupTransferEntityService.svc">http://prod.dcf.ws.dlbr.dk/DCFServices/AnimalGroupTransferEntityService.svc</a>
        </p>
        <p>
          <b>Accept test URL:</b>
          <a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/AnimalGroupTransferEntityService.svc">http://accepttest.dcf.ws.dlbr.dk/DCFServices/AnimalGroupTransferEntityService.svc</a>
        </p>
        <h1>Web Service Description</h1>
            The machine-readable description in the form of a WSDL document can be obtained by querying the following URI’s.
            <p><b>Production WSDL:</b><a href="http://prod.dcf.ws.dlbr.dk/DCFServices/AnimalGroupTransferEntityService.svc?wsdl">http://prod.dcf.ws.dlbr.dk/DCFServices/AnimalGroupTransferEntityService.svc?wsdl</a></p><p><b>Accept test WSDL:</b><a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/AnimalGroupTransferEntityService.svc?wsdl">http://accepttest.dcf.ws.dlbr.dk/DCFServices/AnimalGroupTransferEntityService.svc?wsdl</a></p><h1>Endpoints</h1>
            For information regarding endpoints, see topic 'Endpoints available in DCF Services'
            </summary>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.AnimalGroupTransferEntityServiceBase">
      <summary>
            Service Class - AnimalGroupTransferEntityService
            </summary>
      <tocexclude />
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.AnimalGroupTransferEntityService.FindAnimalGroupTransfersByHerdNumber(DLBR.DCF.KDB.MessageContracts.FindAnimalGroupTransfersByHerdNumberRequest)">
      <summary>
        <h1>Functional Description</h1>
            Finds existing animal group transfers based on the input parameters provided.
            <h1>Nested Input parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>HerdNumber</td><td>yes</td><td>&gt;0</td><td>The number of the herd this registration concerns</td></tr><tr><td>AnimalType</td><td>yes</td><td>Code&gt;0</td><td>The type of animal e.g. sheep.</td></tr><tr><td>Direction</td><td></td><td></td><td>Entering, Exiting, Unknown</td></tr><tr><td>DateFrom</td><td></td><td></td><td>If specified only identifiers valid after the specified date is returned. 
            If not specified all identifiers matching the other criteria’s is returned. If this parameter is set also the “DateTo” must be set.
            </td></tr><tr><td>DateTo</td><td>(X)</td><td></td><td>If specified only identifiers valid after the specified date is returned. 
            If not specified all identifiers matching the other criteria’s is returned. If this parameter is set also the “DateFrom” must be set.
            </td></tr><tr><td>RequestedCount</td><td></td><td></td><td>Max number of returned animal group transfers</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>AnimalGroupTransferCollection</td><td>Collection of AnimalGroupTransfers matching the input parameters</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindAnimalGroupTransfersByHerdNumberRequest" /></param>
      <returns>No description See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindAnimalGroupTransfersByHerdNumberResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example:
            <code>            var proxy = new AnimalGroupTransferEntityServiceContractClient( "AnimalGroupTransferEntityService" );
            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD;
                AnimalType animalType = new AnimalType() { Code = 13 };

                var result = proxy.FindAnimalGroupTransfersByHerdNumber( animalType, null, null, Direction.Unknown, TestUtil.HERD_NUMBER_SHEEP_BREED2, 10 );

                Assert.AreEqual( result.Count, 10 );
            }
            catch( Exception ex )
            {
                Debug.WriteLine( ex.Message );
                throw;
            }
            finally
            {
                if( proxy.State != CommunicationState.Faulted )
                {
                    proxy.Close();
                }
            }

</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.AnimalGroupTransferEntityService.RegisterAnimalGroupTransfer(DLBR.DCF.KDB.MessageContracts.RegisterAnimalGroupTransferRequest)">
      <summary>
        <h1>Functional Description</h1>
            Registers an animal group transfer in the database.
            <h1>Nested Input parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>HerdNumber</td><td>yes</td><td>&gt;0</td><td>The number of the herd this registration concerns</td></tr><tr><td>AnimalType</td><td>yes</td><td>Code&gt;0</td><td>The type of animal e.g. sheep.</td></tr><tr><td>Date</td><td>yes</td><td></td><td>Date the transfer took place</td></tr><tr><td>Direction</td><td>yes</td><td>!Unknown</td><td>Entering, Exiting</td></tr><tr><td>NumberOfAnimals</td><td>yes</td><td>&gt;0</td><td>Number of animals transferred.</td></tr><tr><td>HerdNumberToFrom</td><td></td><td>&gt;0</td><td>The herd this transfer is transferring to or from depending on direction.</td></tr><tr><td>Nationality</td><td>yes</td><td>Code&gt;0</td><td>The country the animals are moved to or from depending on direction</td></tr><tr><td>VehicleRegistrationNumber</td><td></td><td></td><td>License plate of the vehicle</td></tr><tr><td>VehicleNationality</td><td></td><td></td><td>Country where the vehicle is registered.</td></tr><tr><td>CarrierLicenseNumber</td><td></td><td></td><td>The license number of the carrier.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>AnimalGroupTransfer</td><td>The newly registered animal transfer.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.RegisterAnimalGroupTransferRequest" /></param>
      <returns>No description See <see cref="T:DLBR.DCF.KDB.MessageContracts.RegisterAnimalGroupTransferResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example:
            <code>            AnimalType animalType = new AnimalType() { Code = 13 };
            Nationality nationality = null;
            int carrierLicenseNumber = 12345;
            long herdNumber = TestUtil.HERD_NUMBER_SHEEP_BREED2;
            long herdNumberToFrom = TestUtil.HERD_NUMBER_SHEEP_BREED1;
            int numberOfAnimals = 12;
            string vehicleRegistrationNumber = "GA97924";
            DateTime date = DateTime.Now.AddDays( -2 );
            Direction direction = Direction.Entering;
            long id = 0;


            var proxy = new AnimalGroupTransferEntityServiceContractClient( "AnimalGroupTransferEntityService" );
            try
            {
                //Set credentials
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                #region Register
                //Register a new entity in the database
                var result = proxy.RegisterAnimalGroupTransfer( animalType, carrierLicenseNumber, date,
                                                               direction, herdNumber, herdNumberToFrom, nationality, numberOfAnimals,
                                                               nationality, vehicleRegistrationNumber );

                //Validate the entity
                Assert.IsTrue( result.Id &gt; id );
                Assert.AreEqual( result.AnimalType.Code, animalType.Code );
                Assert.AreEqual( result.CarrierLicenceNumber, carrierLicenseNumber );
                Assert.AreEqual( result.Date.ToString(), date.ToString() );
                Assert.AreEqual( result.Direction, direction );
                Assert.AreEqual( result.HerdNumber, herdNumber );
                Assert.AreEqual( result.HerdNumberToFrom, herdNumberToFrom );
                Assert.IsNull( result.Nationality );
                Assert.AreEqual( result.NumberOfAnimals, numberOfAnimals );
                Assert.IsNull( result.VehicleNationality );
                Assert.AreEqual( result.VehicleRegistrationNumber, vehicleRegistrationNumber );
                #endregion

                #region Update

                //Prepare update test by assigning new values to test variables
                carrierLicenseNumber = 111111;
                vehicleRegistrationNumber = "AB99999";
                numberOfAnimals = 1000;
                date = DateTime.Now.AddDays( -4 );
                herdNumber = TestUtil.HERD_NUMBER_SHEEP_BREED1;
                herdNumberToFrom = TestUtil.HERD_NUMBER_SHEEP_BREED2;
                direction = Direction.Exiting;

                //Assign test values to the entity to be updated
                result.CarrierLicenceNumber = carrierLicenseNumber;
                result.VehicleRegistrationNumber = vehicleRegistrationNumber;
                result.NumberOfAnimals = numberOfAnimals;
                result.Date = date;
                result.HerdNumber = herdNumber;
                result.HerdNumberToFrom = herdNumberToFrom;
                result.Direction = direction;
                result.Nationality = nationality;

                //Do the update
                proxy.UpdateAnimalGroupTransfer( ref result );

                //Check the returned result
                Assert.AreEqual( result.AnimalType.Code, animalType.Code );
                Assert.AreEqual( result.CarrierLicenceNumber, carrierLicenseNumber );
                Assert.AreEqual( result.Date.ToString(), date.ToString() );
                Assert.AreEqual( result.Direction, direction );
                Assert.AreEqual( result.HerdNumber, herdNumber );
                Assert.AreEqual( result.HerdNumberToFrom, herdNumberToFrom );
                Assert.IsNull( result.Nationality );
                Assert.AreEqual( result.NumberOfAnimals, numberOfAnimals );
                Assert.IsNull( result.VehicleNationality );
                Assert.AreEqual( result.VehicleRegistrationNumber, vehicleRegistrationNumber );

                #endregion

                #region Delete

                id = result.Id;

                //Check if we have an entity to delete
                int countBeforeDelete = proxy.FindAnimalGroupTransfersByHerdNumber( animalType, null, null, Direction.Unknown, herdNumber, null ).Count(
                    n =&gt; n.Id.Equals( id ) );
                Assert.IsTrue( countBeforeDelete == 1, "No object to delete" );

                //Do delete
                proxy.DeleteAnimalGroupTransfer( result );

                //Check if entity has been deleted
                int countAfterDelete = proxy.FindAnimalGroupTransfersByHerdNumber( animalType, null, null, Direction.Unknown, herdNumber, null ).Count(
                    n =&gt; n.Id.Equals( id ) );
                Assert.IsTrue( countAfterDelete == 0, "Object not deleted" );

                #endregion

            }
            catch( Exception ex )
            {
                System.Diagnostics.Debug.WriteLine( ex.Message );
                throw;
            }
            finally
            {
                if( proxy.State != CommunicationState.Faulted )
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.AnimalGroupTransferEntityService.UpdateAnimalGroupTransfer(DLBR.DCF.KDB.MessageContracts.UpdateAnimalGroupTransferRequest)">
      <summary>
        <h1>Functional Description</h1>
            Updates a specific instance of an AnimalGroupTransfer.
            <h1>Nested Input parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>AnimalGroupTransfer</td><td>yes</td><td>!=null, Id&gt;0</td><td>AnimalGroupTransfer to update</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>AnimalGroupTransfer</td><td>Updated AnimalGroupTransfer</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.UpdateAnimalGroupTransferRequest" /></param>
      <returns>No description See <see cref="T:DLBR.DCF.KDB.MessageContracts.UpdateAnimalGroupTransferResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example:
            <code>            AnimalType animalType = new AnimalType() { Code = 13 };
            Nationality nationality = null;
            int carrierLicenseNumber = 12345;
            long herdNumber = TestUtil.HERD_NUMBER_SHEEP_BREED2;
            long herdNumberToFrom = TestUtil.HERD_NUMBER_SHEEP_BREED1;
            int numberOfAnimals = 12;
            string vehicleRegistrationNumber = "GA97924";
            DateTime date = DateTime.Now.AddDays( -2 );
            Direction direction = Direction.Entering;
            long id = 0;


            var proxy = new AnimalGroupTransferEntityServiceContractClient( "AnimalGroupTransferEntityService" );
            try
            {
                //Set credentials
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                #region Register
                //Register a new entity in the database
                var result = proxy.RegisterAnimalGroupTransfer( animalType, carrierLicenseNumber, date,
                                                               direction, herdNumber, herdNumberToFrom, nationality, numberOfAnimals,
                                                               nationality, vehicleRegistrationNumber );

                //Validate the entity
                Assert.IsTrue( result.Id &gt; id );
                Assert.AreEqual( result.AnimalType.Code, animalType.Code );
                Assert.AreEqual( result.CarrierLicenceNumber, carrierLicenseNumber );
                Assert.AreEqual( result.Date.ToString(), date.ToString() );
                Assert.AreEqual( result.Direction, direction );
                Assert.AreEqual( result.HerdNumber, herdNumber );
                Assert.AreEqual( result.HerdNumberToFrom, herdNumberToFrom );
                Assert.IsNull( result.Nationality );
                Assert.AreEqual( result.NumberOfAnimals, numberOfAnimals );
                Assert.IsNull( result.VehicleNationality );
                Assert.AreEqual( result.VehicleRegistrationNumber, vehicleRegistrationNumber );
                #endregion

                #region Update

                //Prepare update test by assigning new values to test variables
                carrierLicenseNumber = 111111;
                vehicleRegistrationNumber = "AB99999";
                numberOfAnimals = 1000;
                date = DateTime.Now.AddDays( -4 );
                herdNumber = TestUtil.HERD_NUMBER_SHEEP_BREED1;
                herdNumberToFrom = TestUtil.HERD_NUMBER_SHEEP_BREED2;
                direction = Direction.Exiting;

                //Assign test values to the entity to be updated
                result.CarrierLicenceNumber = carrierLicenseNumber;
                result.VehicleRegistrationNumber = vehicleRegistrationNumber;
                result.NumberOfAnimals = numberOfAnimals;
                result.Date = date;
                result.HerdNumber = herdNumber;
                result.HerdNumberToFrom = herdNumberToFrom;
                result.Direction = direction;
                result.Nationality = nationality;

                //Do the update
                proxy.UpdateAnimalGroupTransfer( ref result );

                //Check the returned result
                Assert.AreEqual( result.AnimalType.Code, animalType.Code );
                Assert.AreEqual( result.CarrierLicenceNumber, carrierLicenseNumber );
                Assert.AreEqual( result.Date.ToString(), date.ToString() );
                Assert.AreEqual( result.Direction, direction );
                Assert.AreEqual( result.HerdNumber, herdNumber );
                Assert.AreEqual( result.HerdNumberToFrom, herdNumberToFrom );
                Assert.IsNull( result.Nationality );
                Assert.AreEqual( result.NumberOfAnimals, numberOfAnimals );
                Assert.IsNull( result.VehicleNationality );
                Assert.AreEqual( result.VehicleRegistrationNumber, vehicleRegistrationNumber );

                #endregion

                #region Delete

                id = result.Id;

                //Check if we have an entity to delete
                int countBeforeDelete = proxy.FindAnimalGroupTransfersByHerdNumber( animalType, null, null, Direction.Unknown, herdNumber, null ).Count(
                    n =&gt; n.Id.Equals( id ) );
                Assert.IsTrue( countBeforeDelete == 1, "No object to delete" );

                //Do delete
                proxy.DeleteAnimalGroupTransfer( result );

                //Check if entity has been deleted
                int countAfterDelete = proxy.FindAnimalGroupTransfersByHerdNumber( animalType, null, null, Direction.Unknown, herdNumber, null ).Count(
                    n =&gt; n.Id.Equals( id ) );
                Assert.IsTrue( countAfterDelete == 0, "Object not deleted" );

                #endregion

            }
            catch( Exception ex )
            {
                System.Diagnostics.Debug.WriteLine( ex.Message );
                throw;
            }
            finally
            {
                if( proxy.State != CommunicationState.Faulted )
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.AnimalGroupTransferEntityService.DeleteAnimalGroupTransfer(DLBR.DCF.KDB.MessageContracts.DeleteAnimalGroupTransferRequest)">
      <summary>
        <h1>Functional Description</h1>
            Deletes a specific instance of an AnimalGroupTransfer.
            <h1>Nested Input parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>AnimalGroupTransfer</td><td>yes</td><td>!=null, Id&gt;0</td><td>AnimalGroupTransfer to update</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.DeleteAnimalGroupTransferRequest" /></param>
      <returns>No description See <see cref="T:DLBR.DCF.KDB.MessageContracts.DeleteAnimalGroupTransferResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example:
            <code>            AnimalType animalType = new AnimalType() { Code = 13 };
            Nationality nationality = null;
            int carrierLicenseNumber = 12345;
            long herdNumber = TestUtil.HERD_NUMBER_SHEEP_BREED2;
            long herdNumberToFrom = TestUtil.HERD_NUMBER_SHEEP_BREED1;
            int numberOfAnimals = 12;
            string vehicleRegistrationNumber = "GA97924";
            DateTime date = DateTime.Now.AddDays( -2 );
            Direction direction = Direction.Entering;
            long id = 0;


            var proxy = new AnimalGroupTransferEntityServiceContractClient( "AnimalGroupTransferEntityService" );
            try
            {
                //Set credentials
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                #region Register
                //Register a new entity in the database
                var result = proxy.RegisterAnimalGroupTransfer( animalType, carrierLicenseNumber, date,
                                                               direction, herdNumber, herdNumberToFrom, nationality, numberOfAnimals,
                                                               nationality, vehicleRegistrationNumber );

                //Validate the entity
                Assert.IsTrue( result.Id &gt; id );
                Assert.AreEqual( result.AnimalType.Code, animalType.Code );
                Assert.AreEqual( result.CarrierLicenceNumber, carrierLicenseNumber );
                Assert.AreEqual( result.Date.ToString(), date.ToString() );
                Assert.AreEqual( result.Direction, direction );
                Assert.AreEqual( result.HerdNumber, herdNumber );
                Assert.AreEqual( result.HerdNumberToFrom, herdNumberToFrom );
                Assert.IsNull( result.Nationality );
                Assert.AreEqual( result.NumberOfAnimals, numberOfAnimals );
                Assert.IsNull( result.VehicleNationality );
                Assert.AreEqual( result.VehicleRegistrationNumber, vehicleRegistrationNumber );
                #endregion

                #region Update

                //Prepare update test by assigning new values to test variables
                carrierLicenseNumber = 111111;
                vehicleRegistrationNumber = "AB99999";
                numberOfAnimals = 1000;
                date = DateTime.Now.AddDays( -4 );
                herdNumber = TestUtil.HERD_NUMBER_SHEEP_BREED1;
                herdNumberToFrom = TestUtil.HERD_NUMBER_SHEEP_BREED2;
                direction = Direction.Exiting;

                //Assign test values to the entity to be updated
                result.CarrierLicenceNumber = carrierLicenseNumber;
                result.VehicleRegistrationNumber = vehicleRegistrationNumber;
                result.NumberOfAnimals = numberOfAnimals;
                result.Date = date;
                result.HerdNumber = herdNumber;
                result.HerdNumberToFrom = herdNumberToFrom;
                result.Direction = direction;
                result.Nationality = nationality;

                //Do the update
                proxy.UpdateAnimalGroupTransfer( ref result );

                //Check the returned result
                Assert.AreEqual( result.AnimalType.Code, animalType.Code );
                Assert.AreEqual( result.CarrierLicenceNumber, carrierLicenseNumber );
                Assert.AreEqual( result.Date.ToString(), date.ToString() );
                Assert.AreEqual( result.Direction, direction );
                Assert.AreEqual( result.HerdNumber, herdNumber );
                Assert.AreEqual( result.HerdNumberToFrom, herdNumberToFrom );
                Assert.IsNull( result.Nationality );
                Assert.AreEqual( result.NumberOfAnimals, numberOfAnimals );
                Assert.IsNull( result.VehicleNationality );
                Assert.AreEqual( result.VehicleRegistrationNumber, vehicleRegistrationNumber );

                #endregion

                #region Delete

                id = result.Id;

                //Check if we have an entity to delete
                int countBeforeDelete = proxy.FindAnimalGroupTransfersByHerdNumber( animalType, null, null, Direction.Unknown, herdNumber, null ).Count(
                    n =&gt; n.Id.Equals( id ) );
                Assert.IsTrue( countBeforeDelete == 1, "No object to delete" );

                //Do delete
                proxy.DeleteAnimalGroupTransfer( result );

                //Check if entity has been deleted
                int countAfterDelete = proxy.FindAnimalGroupTransfersByHerdNumber( animalType, null, null, Direction.Unknown, herdNumber, null ).Count(
                    n =&gt; n.Id.Equals( id ) );
                Assert.IsTrue( countAfterDelete == 0, "Object not deleted" );

                #endregion

            }
            catch( Exception ex )
            {
                System.Diagnostics.Debug.WriteLine( ex.Message );
                throw;
            }
            finally
            {
                if( proxy.State != CommunicationState.Faulted )
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.AnimalEntityService">
      <summary>
        <h1>General</h1>
        <p>
            The following URIs specifies the location of the service in the production- and production test environment. 
            By default services in both the production and the production test environment uses the production data stores. The alternative URIs, which uses the test data stores (Medio), may be used for testing purposes.
            Please note that service versions might differ between the production- and production test environments. Before you begin using the service, please consult the person responsible as described in section 3.7 – Responsibility assignment.
            </p>
        <p>
          <b>Production URL:</b>
          <a href="http://prod.dcf.ws.dlbr.dk/DCFServices/AnimalEntityService.svc">http://prod.dcf.ws.dlbr.dk/DCFServices/AnimalEntityService.svc</a>
        </p>
        <p>
          <b>Accept test URL:</b>
          <a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/AnimalEntityService.svc">http://accepttest.dcf.ws.dlbr.dk/DCFServices/AnimalEntityService.svc</a>
        </p>
        <h1>Web Service Description</h1>
            The machine-readable description in the form of a WSDL document can be obtained by querying the following URI’s.
            <p><b>Production WSDL:</b><a href="http://prod.dcf.ws.dlbr.dk/DCFServices/AnimalEntityService.svc?wsdl">http://prod.dcf.ws.dlbr.dk/DCFServices/AnimalEntityService.svc?wsdl</a></p><p><b>Accept test WSDL:</b><a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/AnimalEntityService.svc?wsdl">http://accepttest.dcf.ws.dlbr.dk/DCFServices/AnimalEntityService.svc?wsdl</a></p><h1>Endpoints</h1>
            For information regarding endpoints, see topic 'Endpoints available in DCF Services'
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.AnimalEntityService.FindAnimalsByHerdNumber(DLBR.DCF.KDB.MessageContracts.FindAnimalsByHerdNumberRequest)">
      <summary>
        <h1>Functional Description</h1>
            Finds animals in a given herd.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>HerdNumber</td><td>yes</td><td>&gt;0</td><td>The number of the herd you wish to find animals for.</td></tr><tr><td>AnimalType</td><td>yes</td><td>&gt;0</td><td>The type of animals in the herd.</td></tr><tr><td>FromDate</td><td>(yes)</td><td>FromDate &lt;= ToDate</td><td>If not specified all active animals in the herd is returned. If “FromDate” is set, then “ToDate” must also be 
            set, and vice versa. If specified all active animals at the specified period in the specified herd is returned.</td></tr><tr><td>ToDate</td><td>(yes)</td><td>FromDate &lt;= ToDate</td><td>See above.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>AnimalCollection</td><td>A collection of the <see cref="T:DLBR.DCF.KDB.DataContracts.Animal" /> objects found.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindAnimalsByHerdNumberRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindAnimalsByHerdNumberResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            const long herdNumber = TestUtil.HERD_NUMBER;

            AnimalEntityServiceContractClient client = new AnimalEntityServiceContractClient( "AnimalEntityService_Federation" );
            try
            {
                client.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                client.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                AnimalType animalType = new AnimalType { Code = 12 };

                AnimalCollection result = client.FindAnimalsByHerdNumber( animalType, null, herdNumber, null );

                result.Should().NotBeNull().And.NotBeEmpty();
                result.Should().OnlyContain(a =&gt; a.HerdNumber == herdNumber &amp;&amp; a.AnimalId &gt; 0 );

                result.Should().Contain(a =&gt; a.TwinCode != null);

                Debug.WriteLine( "Number of returned animals: " + result.Count, "Result" );
            }
            catch( Exception ex )
            {
                Debug.WriteLine( ex.Message, "Exception" );
                throw;
            }
            finally
            {
                if( client.State != CommunicationState.Faulted )
                {
                    client.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.AnimalEntityService.GetAnimalByNumber(DLBR.DCF.KDB.MessageContracts.GetAnimalByNumberRequest)">
      <summary>
        <h1>Functional Description</h1>
            Finds an animal by a given number.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>AnimalNumber</td><td>yes</td><td>&gt;0</td><td>The number of the aniaml you wish to find.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>Animal</td><td>The <see cref="T:DLBR.DCF.KDB.DataContracts.Animal" /> object that was found.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetAnimalByNumberRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetAnimalByNumberResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            //Animal number of a cow transferred to herd 30000.
            const long animalnumber = 5599501459;
            const long actualHerdNumber = 30000;

            AnimalEntityServiceContractClient client = new AnimalEntityServiceContractClient( "AnimalEntityService_Federation" );
            try
            {
                client.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                client.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                Animal result = client.GetAnimalByNumber( animalnumber );
                Assert.IsNotNull( result );
                Assert.AreEqual( result.AnimalNumber, animalnumber );
                Assert.AreEqual( actualHerdNumber, result.HerdNumber );
            }
            catch( Exception ex )
            {
                Debug.WriteLine( ex.Message, "Exception" );
                throw;
            }
            finally
            {
                if( client.State != CommunicationState.Faulted )
                {
                    client.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.AnimalEntityService.FindAnimalNumbers(DLBR.DCF.KDB.MessageContracts.FindAnimalNumbersRequest)">
      <summary>
        <h1>Functional Description</h1>
            Given an individual number, the method finds all animal numbers within a herd matching that individual number.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>HerdNumber</td><td>yes</td><td>&gt;0</td><td>The herd number to get animals by.</td></tr><tr><td>AnimalType</td><td>yes</td><td></td><td>The type of animal in the herd, e.g. cattle.</td></tr><tr><td>IndividualNumber</td><td>yes</td><td>&gt;0</td><td>The individual number, i.e. the last 5 digits of the animal number, to find alternatives for.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>AnimalNumbers</td><td>A collection of animals matching the criteria.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindAnimalNumbersRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindAnimalNumbersResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            AnimalEntityServiceContractClient client = new AnimalEntityServiceContractClient( "AnimalEntityService_Federation" );
            try
            {
                client.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                client.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                const long herdNumber = TestUtil.HERD_NUMBER; // 27612
                const int individualNumber = 1914;
                AnimalType animalType = new AnimalType { Code = 12 };

                Collection&lt;long&gt; animalNumbers = client.FindAnimalNumbers( animalType, herdNumber, individualNumber );

                Assert.IsNotNull( animalNumbers );
                Assert.IsTrue( animalNumbers.Count == 1 );
                Assert.AreEqual( 2761201914, animalNumbers[ 0 ] );
            }
            catch( Exception ex )
            {
                Debug.WriteLine( ex.Message, "Exception" );
                throw;
            }
            finally
            {
                if( client.State != CommunicationState.Faulted )
                {
                    client.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.AnimalEntityService.FindAnimalNumbersByOwner(DLBR.DCF.KDB.MessageContracts.FindAnimalNumbersByOwnerRequest)">
      <summary>
        <h1>Functional Description</h1>
            This operation finds all animal numbers on a given property, for a given animal type and a specified owner.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>CHRNumber</td><td>yes</td><td>&gt;0</td><td>The CHR number to get animals by.</td></tr><tr><td>CVRNumber</td><td>no</td><td>&gt;0</td><td>CVR number of the owner</td></tr><tr><td>CPRNumber</td><td>no</td><td>&gt;0</td><td>CPR number of the owner </td></tr><tr><td>AnimalType</td><td>yes</td><td></td><td>The animal type.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>AnimalNumberInfo</td><td>A collection of animal numbers.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindAnimalNumbersByOwnerRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindAnimalNumbersByOwnerResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            AnimalEntityServiceContractClient client = new AnimalEntityServiceContractClient("AnimalEntityService_Federation");
            try
            {
                Assert.IsNotNull(client.ClientCredentials);
                client.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                client.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                AnimalType animalType = new AnimalType { Code = 12 };

                AnimalNumberInfoCollection animalNumberInfoCollection = client.FindAnimalNumbersByOwner(animalType, 61107, 112510753, null);

                animalNumberInfoCollection.Should().NotBeNull().And.HaveCount(c =&gt; c &gt; 0);
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message, "Exception");
                throw;
            }
            finally
            {
                if (client.State != CommunicationState.Faulted)
                {
                    client.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.AnimalEntityService.FindInternalAnimalIdentifiersByAnimalNumber(DLBR.DCF.KDB.MessageContracts.FindInternalAnimalIdentifiersByAnimalNumberRequest)">
      <summary>
        <h1>Functional Description</h1>
            Given an animalnumber, the method finds all InternalAnimalIdentifers, e.g. transponder number, assigned to that animal.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>AnimalNumber</td><td>yes</td><td>&gt;0</td><td>The number of the animal in question.</td></tr><tr><td>HerdNumber</td><td>yes</td><td>&gt;0</td><td>The number of the herd in which the animal is located.</td></tr><tr><td>AnimalType</td><td>yes</td><td></td><td>The type of the animal.</td></tr><tr><td>IdentifierType</td><td>no</td><td></td><td>If specified only identifies of that type will be returned.</td></tr><tr><td>ValidFrom</td><td>no</td><td></td><td>If specified only identifiers valid after the specified date is returned. If not specified all identifiers 
            matching the other criteria’s is returned. If this parameter is set also the “ValidTo” must be set.</td></tr><tr><td>ValidTo</td><td>(yes)</td><td></td><td>If specified only identifiers valid before the specified date is returned.
            If not specified all identifiers matching the other criteria’s is returned for each animal. This parameter is required if “ValidFrom” is specified.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>InternalAnimalIdentifierCollection</td><td>A collection of <see cref="T:DLBR.DCF.KDB.DataContracts.InternalAnimalIdentifier" /> entities.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindInternalAnimalIdentifiersByAnimalNumberRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindInternalAnimalIdentifiersByAnimalNumberResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            AnimalEntityServiceContractClient client = new AnimalEntityServiceContractClient( "AnimalEntityService_Federation" );
            try
            {
                client.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                client.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                const long animalNumber = 5527801989;
                const long herdNumber = 55278;
                AnimalType animalType = new AnimalType { Code = 12 };

                InternalAnimalIdentifierCollection identifierCollecion = client.FindInternalAnimalIdentifiersByAnimalNumber(
                    animalNumber, animalType, herdNumber, null, null, null );

                Assert.IsNotNull( identifierCollecion );
                Assert.IsTrue( identifierCollecion.Count &gt; 0 );
            }
            catch( Exception ex )
            {
                Debug.WriteLine( ex.Message, "Exception" );
                throw;
            }
            finally
            {
                if( client.State != CommunicationState.Faulted )
                {
                    client.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.AnimalEntityService.FindInternalAnimalIdentifiersByHerdNumber(DLBR.DCF.KDB.MessageContracts.FindInternalAnimalIdentifiersByHerdNumberRequest)">
      <summary>
        <h1>Functional Description</h1>
            This method finds all InternalAnimalIdentifers, e.g. transponder number, assigned to animals in the specified herd.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>HerdNumber</td><td>yes</td><td>&gt;0</td><td>The herd number of the animal.</td></tr><tr><td>AnimalType</td><td>yes</td><td></td><td>The type of the animal.</td></tr><tr><td>IdentifierType</td><td>no</td><td></td><td>If specified only identifies of that type will be returned.</td></tr><tr><td>ValidFrom</td><td>no</td><td></td><td>If specified only identifiers valid after the specified date is returned. If not specified all identifiers 
            matching the other criteria’s is returned. If this parameter is set also the “ValidTo” must be set.</td></tr><tr><td>ValidTo</td><td>(yes)</td><td></td><td>If specified only identifiers valid before the specified date is returned.
            If not specified all identifiers matching the other criteria’s is returned for each animal. This parameter is required if “ValidFrom” is specified.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>InternalAnimalIdentifierCollection</td><td>A collection of <see cref="T:DLBR.DCF.KDB.DataContracts.InternalAnimalIdentifier" /> entities.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindInternalAnimalIdentifiersByHerdNumberRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindInternalAnimalIdentifiersByHerdNumberResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            AnimalEntityServiceContractClient client = new AnimalEntityServiceContractClient( "AnimalEntityService_Federation" );
            try
            {
                client.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                client.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                const long herdNumber = 55278;
                AnimalType animalType = new AnimalType { Code = 12 };
                DateTime validFrom = new DateTime( 2008, 3, 1 );
                DateTime validTo = DateTime.Today;

                InternalAnimalIdentifierCollection identifierCollecion = client.FindInternalAnimalIdentifiersByHerdNumber(
                    animalType, herdNumber, null, validFrom, validTo );

                Assert.IsNotNull( identifierCollecion );
                Assert.IsTrue( identifierCollecion.Count &gt; 0 );
            }
            catch( Exception ex )
            {
                Debug.WriteLine( ex.Message, "Exception" );
                throw;
            }
            finally
            {
                if( client.State != CommunicationState.Faulted )
                {
                    client.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.AnimalEntityService.RegisterInternalAnimalIdentifier(DLBR.DCF.KDB.MessageContracts.RegisterInternalAnimalIdentifierRequest)">
      <summary>
        <h1>Functional Description</h1>
            Registers a new identifier on the specified animal.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>AnimalNumber</td><td>yes</td><td>&gt;0</td><td>The animal number.</td></tr><tr><td>HerdNumber</td><td>yes</td><td>&gt;0</td><td>The herd number of the animal.</td></tr><tr><td>AnimalType</td><td>yes</td><td></td><td>The type of the animal.</td></tr><tr><td>IdentifierType</td><td>yes</td><td></td><td>The type of identifier to register.</td></tr><tr><td>Identifier</td><td>yes</td><td>&gt;0</td><td>The value to use as identifier.</td></tr><tr><td>ValidFrom</td><td>no</td><td></td><td>The start date for validity of the identifier.</td></tr><tr><td>ValidTo</td><td>(yes)</td><td></td><td>The end date for validity of the identifier.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>InternalAnimalIdentifierCollection</td><td>A collection of the <see cref="T:DLBR.DCF.KDB.DataContracts.InternalAnimalIdentifier" /> entities, that was registered.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.RegisterInternalAnimalIdentifierRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.RegisterInternalAnimalIdentifierResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            AnimalEntityServiceContractClient client = new AnimalEntityServiceContractClient( "AnimalEntityService_Federation" );
            try
            {
                client.ClientCredentials.UserName.UserName = TestUtil.USER_ID_FARMER;
                client.ClientCredentials.UserName.Password = TestUtil.PASSWORD_FARMER;

                const long animalNumber = TestUtil.ANIMAL_NUMBER_FOR_TESTHERD;
                const long herdNumber = TestUtil.HERD_NUMBER;
                AnimalType animalType = new AnimalType { Code = 12 };
                InternalAnimalIdentifierType identifierType = new InternalAnimalIdentifierType { Code = 1 }; //Brugsnr.
                const long identifier = 123;
                DateTime validFrom = DateTime.Today;
                DateTime? validTo = null;

                // Register
                InternalAnimalIdentifier animalIdentifier = client.RegisterInternalAnimalIdentifier(
                    animalNumber, animalType, herdNumber, identifier, identifierType, validFrom, validTo );

                Assert.IsNotNull( animalIdentifier );
                Assert.IsTrue( animalIdentifier.Id &gt; 0 );

                animalIdentifier.Identifier = 456;

                // Update
                client.UpdateInternalAnimalIdentifier( ref animalIdentifier );

                Assert.IsNotNull( animalIdentifier );
                Assert.AreEqual( 456, animalIdentifier.Identifier );

                // Delete
                client.DeleteInternalAnimalIdentifier( animalIdentifier );
            }
            catch( Exception ex )
            {
                Debug.WriteLine( ex.Message, "Exception" );
                throw;
            }
            finally
            {
                if( client.State != CommunicationState.Faulted )
                {
                    client.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.AnimalEntityService.UpdateInternalAnimalIdentifier(DLBR.DCF.KDB.MessageContracts.UpdateInternalAnimalIdentifierRequest)">
      <summary>
        <h1>Functional Description</h1>
            Updates an existing InternalAnimalIdentifier entity.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>InternalAnimalIdentifier</td><td>yes</td><td></td><td>The InternalAnimalIdentifier to update.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>InternalAnimalIdentifier</td><td>The newly updated <see cref="T:DLBR.DCF.KDB.DataContracts.InternalAnimalIdentifier" /> entity.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.UpdateInternalAnimalIdentifierRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.UpdateInternalAnimalIdentifierResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            AnimalEntityServiceContractClient client = new AnimalEntityServiceContractClient( "AnimalEntityService_Federation" );
            try
            {
                client.ClientCredentials.UserName.UserName = TestUtil.USER_ID_FARMER;
                client.ClientCredentials.UserName.Password = TestUtil.PASSWORD_FARMER;

                const long animalNumber = TestUtil.ANIMAL_NUMBER_FOR_TESTHERD;
                const long herdNumber = TestUtil.HERD_NUMBER;
                AnimalType animalType = new AnimalType { Code = 12 };
                InternalAnimalIdentifierType identifierType = new InternalAnimalIdentifierType { Code = 1 }; //Brugsnr.
                const long identifier = 123;
                DateTime validFrom = DateTime.Today;
                DateTime? validTo = null;

                // Register
                InternalAnimalIdentifier animalIdentifier = client.RegisterInternalAnimalIdentifier(
                    animalNumber, animalType, herdNumber, identifier, identifierType, validFrom, validTo );

                Assert.IsNotNull( animalIdentifier );
                Assert.IsTrue( animalIdentifier.Id &gt; 0 );

                animalIdentifier.Identifier = 456;

                // Update
                client.UpdateInternalAnimalIdentifier( ref animalIdentifier );

                Assert.IsNotNull( animalIdentifier );
                Assert.AreEqual( 456, animalIdentifier.Identifier );

                // Delete
                client.DeleteInternalAnimalIdentifier( animalIdentifier );
            }
            catch( Exception ex )
            {
                Debug.WriteLine( ex.Message, "Exception" );
                throw;
            }
            finally
            {
                if( client.State != CommunicationState.Faulted )
                {
                    client.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.AnimalEntityService.DeleteInternalAnimalIdentifier(DLBR.DCF.KDB.MessageContracts.DeleteInternalAnimalIdentifierRequest)">
      <summary>
        <h1>Functional Description</h1>
            Deletes an existing InternalAnimalIdentifier entity.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>InternalAnimalIdentifier</td><td>yes</td><td></td><td>The InternalAnimalIdentifier to delete.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.DeleteInternalAnimalIdentifierRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.DeleteInternalAnimalIdentifierResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            AnimalEntityServiceContractClient client = new AnimalEntityServiceContractClient( "AnimalEntityService_Federation" );
            try
            {
                client.ClientCredentials.UserName.UserName = TestUtil.USER_ID_FARMER;
                client.ClientCredentials.UserName.Password = TestUtil.PASSWORD_FARMER;

                const long animalNumber = TestUtil.ANIMAL_NUMBER_FOR_TESTHERD;
                const long herdNumber = TestUtil.HERD_NUMBER;
                AnimalType animalType = new AnimalType { Code = 12 };
                InternalAnimalIdentifierType identifierType = new InternalAnimalIdentifierType { Code = 1 }; //Brugsnr.
                const long identifier = 123;
                DateTime validFrom = DateTime.Today;
                DateTime? validTo = null;

                // Register
                InternalAnimalIdentifier animalIdentifier = client.RegisterInternalAnimalIdentifier(
                    animalNumber, animalType, herdNumber, identifier, identifierType, validFrom, validTo );

                Assert.IsNotNull( animalIdentifier );
                Assert.IsTrue( animalIdentifier.Id &gt; 0 );

                animalIdentifier.Identifier = 456;

                // Update
                client.UpdateInternalAnimalIdentifier( ref animalIdentifier );

                Assert.IsNotNull( animalIdentifier );
                Assert.AreEqual( 456, animalIdentifier.Identifier );

                // Delete
                client.DeleteInternalAnimalIdentifier( animalIdentifier );
            }
            catch( Exception ex )
            {
                Debug.WriteLine( ex.Message, "Exception" );
                throw;
            }
            finally
            {
                if( client.State != CommunicationState.Faulted )
                {
                    client.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.AnimalEntityService.FindAnimalsByIndividualNumber(DLBR.DCF.KDB.MessageContracts.FindAnimalsByIndividualNumberRequest)">
      <summary>
        <h1>Functional Description</h1>
            Given an individual number, the method finds all animals within a herd matching that individual number.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>HerdNumber</td><td>yes</td><td>&gt;0</td><td>The herd number to get animals by.</td></tr><tr><td>AnimalType</td><td>yes</td><td></td><td>The type of animal in the herd, e.g. cattle.</td></tr><tr><td>IndividualNumber</td><td>yes</td><td>&gt;0</td><td>The individual number, i.e. the last 5 digits of the animal number, to find alternatives for.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>AnimalCollection</td><td>A collection of animal entities matching the specified criteria.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindAnimalsByIndividualNumberRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindAnimalsByIndividualNumberResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            AnimalEntityServiceContractClient client = new AnimalEntityServiceContractClient( "AnimalEntityService_Federation" );
            try
            {
                client.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                client.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                const long herdNumber = TestUtil.HERD_NUMBER; // 27612
                AnimalType animalType = new AnimalType { Code = 12 };
                const int individualNumber = 1914;

                Collection&lt;Animal&gt; animalCollection = client.FindAnimalsByIndividualNumber( animalType, herdNumber, individualNumber );

                animalCollection.Should().NotBeNull().And.HaveCount(1);
                animalCollection.First().AnimalNumber.Should().Be(2761201914);

                var list = from animal in animalCollection
                           where animal.AnimalNumber.ToString().EndsWith(individualNumber.ToString(), StringComparison.OrdinalIgnoreCase) == false
                           select animal;

                list.Should().HaveCount(0);
            }
            catch( Exception ex )
            {
                Debug.WriteLine( ex.Message, "Exception" );
                throw;
            }
            finally
            {
                if( client.State != CommunicationState.Faulted )
                {
                    client.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.AnimalEntityService.FindAnimalActivitiesByHerdNumbers(DLBR.DCF.KDB.MessageContracts.FindAnimalActivitiesByHerdNumbersRequest)">
      <summary>
        <h1>Functional Description</h1>
            For a number of herds this method will find all (or a given number of) animal activities in reverse chronological order. You may limit the search
            to a given period of time. The activity types returned are:<br></br><br></br><ul><li><see cref="T:DLBR.DCF.KDB.DataContracts.Calving" /></li><li><see cref="T:DLBR.DCF.KDB.DataContracts.AnimalTransfer" /></li><li><see cref="T:DLBR.DCF.KDB.DataContracts.AnimalGroupTransfer" /></li><li><see cref="T:DLBR.DCF.KDB.DataContracts.AnimalHealth" /></li><li><see cref="T:DLBR.DCF.KDB.DataContracts.Posting" /></li><li><see cref="T:DLBR.DCF.KDB.DataContracts.AnimalWeight" /></li><li><see cref="T:DLBR.DCF.KDB.DataContracts.NaturalMatingService.NaturalService" /></li></ul><h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>HerdIds</td><td>yes</td><td></td><td>A collection of HerdId objects specifying which herds you want activities for.</td></tr><tr><td>FromDate</td><td>no</td><td>FromDate &lt;= ToDate</td><td>An optional start date for the search.</td></tr><tr><td>ToDate</td><td>no</td><td>FromDate &lt;= ToDate</td><td>An optional end date for the search.</td></tr><tr><td>RequestedCount</td><td>no</td><td></td><td>You may specify a maximum number of activities to return from the method.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>AnimalActivityCollection</td><td>A collection of <see cref="T:DLBR.DCF.KDB.DataContracts.AnimalActivity" /> object referecing the individual activities. Only one activity will be set on each object.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindAnimalActivitiesByHerdNumbersRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindAnimalActivitiesByHerdNumbersResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            AnimalEntityServiceContractClient client = new AnimalEntityServiceContractClient("AnimalEntityService_Federation");
            try
            {
                client.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                client.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                AnimalType animalType = new AnimalType { Code = 12 };

                HerdIdCollection idColl = new HerdIdCollection { new HerdId { AnimalType = animalType, HerdNumber = TestUtil.HERD_NUMBER } };

                AnimalActivityCollection activityCollection = client.FindAnimalActivitiesByHerdNumbers(null, idColl, 10, null);

                activityCollection.Should().NotBeNull();
                activityCollection.Should().HaveCount(10);
                activityCollection.Count(a =&gt; a.Calving != null).Should().BeGreaterOrEqualTo(0);
                activityCollection.Count(a =&gt; a.AnimalTransfer != null).Should().BeGreaterOrEqualTo(0);
                activityCollection.Count(a =&gt; a.AnimalHealth != null).Should().BeGreaterOrEqualTo(0);
                activityCollection.Should().OnlyContain(a =&gt; a.AnimalWeight == null);
                activityCollection.Should().OnlyContain(a =&gt; a.NaturalMating == null);

                activityCollection = client.FindAnimalActivitiesByHerdNumbers(null, idColl, null, null);

                activityCollection.Should().NotBeNull();
                activityCollection.Should().HaveCount(c =&gt; c &gt; 10);
                activityCollection.Count(a =&gt; a.Calving != null).Should().BeGreaterOrEqualTo(0);
                activityCollection.Count(a =&gt; a.AnimalTransfer != null).Should().BeGreaterOrEqualTo(0);
                activityCollection.Count(a =&gt; a.AnimalHealth != null).Should().BeGreaterOrEqualTo(0);
                activityCollection.Should().OnlyContain(a =&gt; a.AnimalWeight == null);
                activityCollection.Should().OnlyContain(a =&gt; a.NaturalMating == null);
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message, "Exception");
                throw;
            }
            finally
            {
                if (client.State != CommunicationState.Faulted)
                {
                    client.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.AnimalEntityService.FindAnimalsByCHRNumber(DLBR.DCF.KDB.MessageContracts.FindAnimalsByCHRNumberRequest)">
      <summary>
        <h1>Functional Description</h1>
            Finds animals from all herds from a given CHR number.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>CHRNumber</td><td>yes</td><td>&gt;0</td><td>CHR number of the herds you wish to find animals for.</td></tr><tr><td>AnimalType</td><td>yes</td><td>&gt;0</td><td>The type of animals in the herd.</td></tr><tr><td>GenderList</td><td>yes</td><td></td><td>Genderlist to filter on. Empty list returns all animals</td></tr><tr><td>FromDate</td><td>(yes)</td><td>FromDate &lt;= ToDate</td><td>If not specified all active animals in the herd is returned. If “FromDate” is set, then “ToDate” must also be 
            set, and vice versa. If specified all active animals at the specified period in the specified herd is returned.</td></tr><tr><td>ToDate</td><td>(yes)</td><td>FromDate &lt;= ToDate</td><td>See above.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>AnimalCollection</td><td>A collection of the <see cref="T:DLBR.DCF.KDB.DataContracts.Animal" /> objects found.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindAnimalsByCHRNumberRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindAnimalsByCHRNumberResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>Method FindAnimalsByCHRNumber not found in class ..\tests\DLBR.DCF.KDB.IntegrationTests\AnimalEntityServiceIntegrationTest.cs</code></example>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.AnimalHealthEntityService">
      <summary>
        <h1>General</h1>
        <p>
            The following URIs specifies the location of the service in the production- and production test environment. 
            By default services in both the production and the production test environment uses the production data stores. The alternative URIs, which uses the test data stores (Medio), may be used for testing purposes.
            Please note that service versions might differ between the production- and production test environments. Before you begin using the service, please consult the person responsible as described in section 3.7 – Responsibility assignment.
            </p>
        <p>
          <b>Production URL:</b>
          <a href="http://prod.dcf.ws.dlbr.dk/DCFServices/AnimalHealthEntityService.svc">http://prod.dcf.ws.dlbr.dk/DCFServices/AnimalHealthEntityService.svc</a>
        </p>
        <p>
          <b>Accept test URL:</b>
          <a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/AnimalHealthEntityService.svc">http://accepttest.dcf.ws.dlbr.dk/DCFServices/AnimalHealthEntityService.svc</a>
        </p>
        <h1>Web Service Description</h1>
            The machine-readable description in the form of a WSDL document can be obtained by querying the following URI’s.
            <p><b>Production WSDL:</b><a href="http://prod.dcf.ws.dlbr.dk/DCFServices/AnimalHealthEntityService.svc?wsdl">http://prod.dcf.ws.dlbr.dk/DCFServices/AnimalHealthEntityService.svc?wsdl</a></p><p><b>Accept test WSDL:</b><a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/AnimalHealthEntityService.svc?wsdl">http://accepttest.dcf.ws.dlbr.dk/DCFServices/AnimalHealthEntityService.svc?wsdl</a></p><h1>Endpoints</h1>
            For information regarding endpoints, see topic 'Endpoints available in DCF Services'
            </summary>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.AnimalHealthEntityServiceBase">
      <summary>
            Service Class - AnimalHealthEntityService
            </summary>
      <tocexclude />
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.AnimalHealthEntityService.GetAnimalHealthById(DLBR.DCF.KDB.MessageContracts.GetAnimalHealthByIdRequest)">
      <summary>
        <h1>Functional Description</h1>
            Gets a single AnimalHealth by the technical AnimalHealthId.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>AnimalHealthId</td><td>yes</td><td>&gt; 0</td><td>The id of the AnimalHealth to read.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>AnimalHealth</td><td>The <see cref="T:DLBR.DCF.KDB.DataContracts.AnimalHealth" /> entity. If the entity is not found, this value is null.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetAnimalHealthByIdRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetAnimalHealthByIdResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            const int animalHealthId = 29318356;

            AnimalHealthEntityServiceContractClient proxy = new AnimalHealthEntityServiceContractClient("AnimalHealthEntityService");
            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID_FARMER;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD_FARMER;

                AnimalHealth result = proxy.GetAnimalHealthById(animalHealthId);

                Assert.IsNotNull(result);
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.AnimalHealthEntityService.FindAnimalHealthsByAnimalNumber(DLBR.DCF.KDB.MessageContracts.FindAnimalHealthsByAnimalNumberRequest)">
      <summary>
        <h1>Functional Description</h1>
            Finds a number of AnimalHealths by animal number.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>AnimalNumber</td><td>yes</td><td>&gt; 0</td><td>The animal number from which to find AnimalHealths.</td></tr><tr><td>DiseaseType</td><td></td><td></td><td>If specified the operation only returns AnimalHealths with the DiseaseType specified. If not specified all AnimalHealths on the specified animal is returned.</td></tr><tr><td>FromDate</td><td>(yes)</td><td></td><td>If specified only AnimalHealths performed after the specified date is returned. If not specified all AnimalHealths matching the other criteria’s is returned. If this parameter is set also the “ToDate” must be set.</td></tr><tr><td>ToDate</td><td>(yes)</td><td></td><td>If specified only AnimalHealths performed before the specified date is returned. This parameter is required if “FromDate” is specified. If not specified all AnimalHealths matching the other criteria’s is returned for each animal.</td></tr><tr><td>RequestedCount</td><td></td><td></td><td>If specified the operation only returns the specified number of AnimalHealths, sorted by date. If not specified all AnimalHealths matching the other criteria’s is returned for each animal.</td></tr><tr><td>AdditionalDiseaseTypes</td><td></td><td></td><td>If specified the operation only returns AnimalHealths with the DiseaseType specified. Use this parameter if additional DiseaseType filtering is needed.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>AnimalHealthCollection</td><td>A collection of <see cref="T:DLBR.DCF.KDB.DataContracts.AnimalHealth" /></td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindAnimalHealthsByAnimalNumberRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindAnimalHealthsByAnimalNumberResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            AnimalHealthEntityServiceContractClient proxy = new AnimalHealthEntityServiceContractClient("AnimalHealthEntityService");

            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID_FARMER;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD_FARMER;

                AnimalType animalType = new AnimalType { Code = 12 };
                DiseaseType diseaseType = new DiseaseType { AnimalType = animalType, Code = 11 };

                DateTime fromDate = new DateTime(2006, 1, 1);
                DateTime toDate = new DateTime(2008, 11, 30);

                AnimalHealthCollection result = proxy.FindAnimalHealthsByAnimalNumber(null, m_CowAnimalNumberWithAnimalHealth, diseaseType, fromDate, null, toDate);

                Assert.IsNotNull(result);

                //Check to see that there are no AnimalHealths with a different diseasetype than requested.
                var queryDiseaseType =
                    from animalHealth in result
                    where
                        animalHealth.DiseaseType.AnimalType.Code != animalType.Code &amp;&amp;
                        animalHealth.DiseaseType.Code != diseaseType.Code
                    select animalHealth;

                Assert.AreEqual(queryDiseaseType.Count(), 0);

                //Check to see that there are no AnimalHealths with a date outside the periode specified.
                var queryPeriod =
                    from animalHealth in result
                    where animalHealth.Date &gt;= toDate &amp;&amp; animalHealth.Date &lt;= fromDate
                    select animalHealth;

                Assert.AreEqual(queryPeriod.Count(), 0);
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.AnimalHealthEntityService.FindAnimalHealthsByHerdNumber(DLBR.DCF.KDB.MessageContracts.FindAnimalHealthsByHerdNumberRequest)">
      <summary>
        <h1>Functional Description</h1>
            Finds a number of AnimalHealths by herd number. 
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>HerdNumber</td><td>yes</td><td>&gt; 0</td><td>The herd number from which to find AnimalHealths.</td></tr><tr><td>AnimalType</td><td>yes</td><td></td><td>The type of animal, e.g. Cattle.</td></tr><tr><td>DiseaseType</td><td></td><td></td><td>If specified the operation only returns AnimalHealths with the DiseaseType specified for each animal in the herd. If not specified all AnimalHealths matching the other criteria’s is returned for each animal in the herd specified.</td></tr><tr><td>FromDate</td><td>(yes)</td><td></td><td>If specified only AnimalHealths performed after the specified date is returned. If not specified all AnimalHealths matching the other criteria’s is returned for each animal in the herd specified. If this parameter is set also the “ToDate” must be set.</td></tr><tr><td>ToDate</td><td>(yes)</td><td></td><td>If specified only AnimalHealths performed before the specified date is returned. This parameter is required if “FromDate” is specified.</td></tr><tr><td>Advisor</td><td></td><td></td><td>If specified the operation only returns AnimalHealths with the Advisor specified for each animal in the herd. If not specified all AnimalHealths matching the other criteria’s is returned for each animal in the herd specified.</td></tr><tr><td>RequestedCount</td><td></td><td></td><td>If specified the operation only returns the specified number of AnimalHealths, sorted by date. If not specified all AnimalHealths matching the other criteria’s is returned for each animal in the herd specified.</td></tr><tr><td>AdditionalDiseaseTypes</td><td></td><td></td><td>If specified the operation only returns AnimalHealths with the DiseaseType specified. Use this parameter if additional DiseaseType filtering is needed.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>AnimalHealthCollection</td><td>A collection of <see cref="T:DLBR.DCF.KDB.DataContracts.AnimalHealth" /></td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindAnimalHealthsByHerdNumberRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindAnimalHealthsByHerdNumberResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            AnimalHealthEntityServiceContractClient proxy = new AnimalHealthEntityServiceContractClient("AnimalHealthEntityService");
            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID_FARMER;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD_FARMER;

                AnimalType animalType = new AnimalType { Code = 12 };

                AnimalHealthCollection result = proxy.FindAnimalHealthsByHerdNumber(null, null, animalType, null, null, TestUtil.HERD_NUMBER, null, null);

                Assert.IsNotNull(result);
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.AnimalHealthEntityService.RegisterAnimalHealth(DLBR.DCF.KDB.MessageContracts.RegisterAnimalHealthRequest)">
      <summary>
        <h1>Functional Description</h1>
            Registers a new AnimalHealth, e.g. diseasetype 11 "mastitis".
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>AnimalNumber</td><td>yes</td><td>&gt; 0</td><td>The number of the animal the health observation is related to.</td></tr><tr><td>AnimalType</td><td>yes</td><td></td><td>The type of animal, e.g. Cattle.</td></tr><tr><td>HerdNumber</td><td>yes</td><td>&gt; 0</td><td>The herd number to which the animal belongs.</td></tr><tr><td>Date</td><td>yes</td><td></td><td>The date of the animal health observation.</td></tr><tr><td>VetDiseaseCode</td><td></td><td></td><td>Disease code used in veterinary administrative systems.</td></tr><tr><td>IsRetreatment</td><td></td><td></td><td>Whether the animal health observation is considered as a retreatment of the animal.</td></tr><tr><td>Advisor</td><td>yes</td><td></td><td>The advisor responsible for the animal health observation.</td></tr><tr><td>DiseaseType</td><td>yes</td><td></td><td>The type of disease e.g. code 11 for "mastitis".</td></tr><tr><td>DiseaseSite</td><td></td><td></td><td>The site/location of the disease type e.g. mastitis in the front right mammary gland.</td></tr><tr><td>DiseaseCharacteristic</td><td></td><td></td><td>The characteristic of the disease type.</td></tr><tr><td>DiseaseTreatmentMethod</td><td></td><td></td><td>The treatment method used, which relates to the disease type.</td></tr><tr><td>DiseaseSeverity</td><td></td><td></td><td>The severity code that relates to the disease type.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>AnimalHealth</td><td>The newly registered <see cref="T:DLBR.DCF.KDB.DataContracts.AnimalHealth" /> entity.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.RegisterAnimalHealthRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.RegisterAnimalHealthResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>Method  TestAnimalHealthCRUD_Single not found in class ..\tests\DLBR.DCF.KDB.IntegrationTests\AnimalHealthEntityServiceTest.cs</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.AnimalHealthEntityService.RegisterAnimalHealths(DLBR.DCF.KDB.MessageContracts.RegisterAnimalHealthsRequest)">
      <summary>
        <h1>Functional Description</h1>
            Registers a number of new AnimalHealths.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>AnimalHealthRegistration-Collection</td><td>yes</td><td></td><td>A collections of AnimalHealthRegistration entities corresponding to the AnimalHealth to register.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>AnimalHealthCollection</td><td>A collection of newly registered AnimalHealth entities.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.RegisterAnimalHealthsRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.RegisterAnimalHealthsResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            AnimalHealthEntityServiceContractClient proxy = new AnimalHealthEntityServiceContractClient("AnimalHealthEntityService");
            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID_FARMER;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD_FARMER;

                const long herdNumber = TestUtil.HERD_NUMBER;
                const long animalNumber = m_CowAnimalNumberWithAnimalHealth;

                AnimalType animalType = new AnimalType { Code = 12 };
                DiseaseType diseaseType = new DiseaseType { Code = 11, AnimalType = animalType };
                DiseaseSite diseaseSite = new DiseaseSite { Code = 1, DiseaseType = diseaseType };
                DiseaseCharacteristic diseaseCharacteristic = new DiseaseCharacteristic { Code = 1, DiseaseType = diseaseType };
                DiseaseTreatmentMethod diseaseTreatmentMethod = new DiseaseTreatmentMethod { Code = 13, DiseaseType = diseaseType };
                DiseaseSeverity diseaseSeverity = new DiseaseSeverity { Code = 1, DiseaseType = diseaseType };
                Advisor advisor = new Advisor { AdvisorNumber = 1, AdvisorType = new AdvisorType { Code = 5 } };

                DateTime animalHealthDate1 = DateTime.Now.AddDays(-2);
                DateTime animalHealthDate2 = DateTime.Now.AddDays(-1);

                AnimalHealthRegistration animalHealthRegistration1 = new AnimalHealthRegistration
                {
                    Advisor = advisor,
                    AnimalNumber = animalNumber,
                    AnimalType = animalType,
                    Date = animalHealthDate1,
                    DiseaseCharacteristic = diseaseCharacteristic,
                    DiseaseSeverity = diseaseSeverity,
                    DiseaseSite = diseaseSite,
                    DiseaseTreatmentMethod = diseaseTreatmentMethod,
                    DiseaseType = diseaseType,
                    HerdNumber = herdNumber,
                    IsRetreatment = false,
                    VetDiseaseType = null
                };

                AnimalHealthRegistration animalHealthRegistration2 = new AnimalHealthRegistration
                {
                    Advisor = advisor,
                    AnimalNumber = animalNumber,
                    AnimalType = animalType,
                    Date = animalHealthDate2,
                    DiseaseCharacteristic = diseaseCharacteristic,
                    DiseaseSeverity = diseaseSeverity,
                    DiseaseSite = diseaseSite,
                    DiseaseTreatmentMethod = diseaseTreatmentMethod,
                    DiseaseType = diseaseType,
                    HerdNumber = herdNumber,
                    IsRetreatment = false,
                    VetDiseaseType = null
                };

                AnimalHealthRegistrationCollection animalHealthRegistrations = new AnimalHealthRegistrationCollection();
                animalHealthRegistrations.Add(animalHealthRegistration1);
                animalHealthRegistrations.Add(animalHealthRegistration2);

                //Register
                AnimalHealthCollection animalHealthCollection = proxy.RegisterAnimalHealths(animalHealthRegistrations);

                Assert.IsNotNull(animalHealthCollection);
                Assert.IsTrue(animalHealthCollection.Count == 2);

                //Delete
                foreach (AnimalHealth animalHealth in animalHealthCollection)
                    proxy.DeleteAnimalHealth(animalHealth);
            }
            catch (FaultException&lt;InvalidArgument&gt; ex)
            {
                Debug.WriteLine(ex.Message, "AnimalHealthEntityServiceTest.TestAnimalHealthCRUD_Multiple");
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.AnimalHealthEntityService.UpdateAnimalHealth(DLBR.DCF.KDB.MessageContracts.UpdateAnimalHealthRequest)">
      <summary>
        <h1>Functional Description</h1>
            Updates an existing AnimalHealth.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>AnimalHealth</td><td>yes</td><td></td><td>The AnimalHealth entity to update.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>AnimalHealth</td><td>The newly updated <see cref="T:DLBR.DCF.KDB.DataContracts.AnimalHealth" /> entity.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.UpdateAnimalHealthRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.UpdateAnimalHealthResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            AnimalHealthEntityServiceContractClient proxy = new AnimalHealthEntityServiceContractClient("AnimalHealthEntityService");
            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID_FARMER;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD_FARMER;

                const long herdNumber = TestUtil.HERD_NUMBER;
                const long animalNumber = m_CowAnimalNumberWithAnimalHealth;
                AnimalType animalType = new AnimalType { Code = 12 };
                DiseaseType diseaseType = new DiseaseType { Code = 11, AnimalType = animalType };
                DiseaseSite diseaseSite = new DiseaseSite { Code = 1, DiseaseType = diseaseType };
                DiseaseCharacteristic diseaseCharacteristic = new DiseaseCharacteristic { Code = 1, DiseaseType = diseaseType };
                DiseaseTreatmentMethod diseaseTreatmentMethod = new DiseaseTreatmentMethod { Code = 13, DiseaseType = diseaseType };
                DiseaseSeverity diseaseSeverity = new DiseaseSeverity { Code = 1, DiseaseType = diseaseType };

                Advisor advisor = new Advisor { AdvisorNumber = 1, AdvisorType = new AdvisorType { Code = 5 } };

                DateTime animalHealthDate = DateTime.Now.AddDays(-1);

                //Register
                AnimalHealth animalHealth = proxy.RegisterAnimalHealth(
                    advisor,
                    animalNumber,
                    animalType,
                    animalHealthDate,
                    diseaseCharacteristic,
                    diseaseSeverity,
                    diseaseSite,
                    diseaseTreatmentMethod,
                    diseaseType,
                    herdNumber,
                    false,
                    null);

                Assert.IsNotNull(animalHealth);

                //Update
                DateTime date = DateTime.Now.AddDays(-2);
                animalHealth.Date = date;

                proxy.UpdateAnimalHealth(ref animalHealth);

                Assert.IsNotNull(animalHealth);
                Assert.AreEqual(date.Date, animalHealth.Date.Date);

                //Delete
                proxy.DeleteAnimalHealth(animalHealth);

            }
            catch (FaultException&lt;InvalidArgument&gt; ex)
            {
                Debug.WriteLine(ex.Message, "AnimalHealthEntityServiceTest.TestAnimalHealthCRUD_Single");
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.AnimalHealthEntityService.DeleteAnimalHealth(DLBR.DCF.KDB.MessageContracts.DeleteAnimalHealthRequest)">
      <summary>
        <h1>Functional Description</h1>
            Deletes an existing animal health observation.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>AnimalHealth</td><td>yes</td><td></td><td>The <see cref="T:DLBR.DCF.KDB.DataContracts.AnimalHealth" /> entity to delete.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.DeleteAnimalHealthRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.DeleteAnimalHealthResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            AnimalHealthEntityServiceContractClient proxy = new AnimalHealthEntityServiceContractClient("AnimalHealthEntityService");
            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID_FARMER;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD_FARMER;

                const long herdNumber = TestUtil.HERD_NUMBER;
                const long animalNumber = m_CowAnimalNumberWithAnimalHealth;

                AnimalType animalType = new AnimalType { Code = 12 };
                DiseaseType diseaseType = new DiseaseType { Code = 11, AnimalType = animalType };
                DiseaseSite diseaseSite = new DiseaseSite { Code = 1, DiseaseType = diseaseType };
                DiseaseCharacteristic diseaseCharacteristic = new DiseaseCharacteristic { Code = 1, DiseaseType = diseaseType };
                DiseaseTreatmentMethod diseaseTreatmentMethod = new DiseaseTreatmentMethod { Code = 13, DiseaseType = diseaseType };
                DiseaseSeverity diseaseSeverity = new DiseaseSeverity { Code = 1, DiseaseType = diseaseType };
                Advisor advisor = new Advisor { AdvisorNumber = 1, AdvisorType = new AdvisorType { Code = 5 } };

                DateTime animalHealthDate1 = DateTime.Now.AddDays(-2);
                DateTime animalHealthDate2 = DateTime.Now.AddDays(-1);

                AnimalHealthRegistration animalHealthRegistration1 = new AnimalHealthRegistration
                {
                    Advisor = advisor,
                    AnimalNumber = animalNumber,
                    AnimalType = animalType,
                    Date = animalHealthDate1,
                    DiseaseCharacteristic = diseaseCharacteristic,
                    DiseaseSeverity = diseaseSeverity,
                    DiseaseSite = diseaseSite,
                    DiseaseTreatmentMethod = diseaseTreatmentMethod,
                    DiseaseType = diseaseType,
                    HerdNumber = herdNumber,
                    IsRetreatment = false,
                    VetDiseaseType = null
                };

                AnimalHealthRegistration animalHealthRegistration2 = new AnimalHealthRegistration
                {
                    Advisor = advisor,
                    AnimalNumber = animalNumber,
                    AnimalType = animalType,
                    Date = animalHealthDate2,
                    DiseaseCharacteristic = diseaseCharacteristic,
                    DiseaseSeverity = diseaseSeverity,
                    DiseaseSite = diseaseSite,
                    DiseaseTreatmentMethod = diseaseTreatmentMethod,
                    DiseaseType = diseaseType,
                    HerdNumber = herdNumber,
                    IsRetreatment = false,
                    VetDiseaseType = null
                };

                AnimalHealthRegistrationCollection animalHealthRegistrations = new AnimalHealthRegistrationCollection();
                animalHealthRegistrations.Add(animalHealthRegistration1);
                animalHealthRegistrations.Add(animalHealthRegistration2);

                //Register
                AnimalHealthCollection animalHealthCollection = proxy.RegisterAnimalHealths(animalHealthRegistrations);

                Assert.IsNotNull(animalHealthCollection);
                Assert.IsTrue(animalHealthCollection.Count == 2);

                //Delete
                foreach (AnimalHealth animalHealth in animalHealthCollection)
                    proxy.DeleteAnimalHealth(animalHealth);
            }
            catch (FaultException&lt;InvalidArgument&gt; ex)
            {
                Debug.WriteLine(ex.Message, "AnimalHealthEntityServiceTest.TestAnimalHealthCRUD_Multiple");
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.AnimalTransferEntityService">
      <summary>
        <h1>General</h1>
        <p>
            The following URIs specifies the location of the service in the production- and production test environment. 
            By default services in both the production and the production test environment uses the production data stores. The alternative URIs, which uses the test data stores (Medio), may be used for testing purposes.
            Please note that service versions might differ between the production- and production test environments. Before you begin using the service, please consult the person responsible as described in section 3.7 – Responsibility assignment.
            </p>
        <p>
          <b>Production URL:</b>
          <a href="http://prod.dcf.ws.dlbr.dk/DCFServices/AnimalTransferEntityService.svc">http://prod.dcf.ws.dlbr.dk/DCFServices/AnimalTransferEntityService.svc</a>
        </p>
        <p>
          <b>Accept test URL:</b>
          <a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/AnimalTransferEntityService.svc">http://accepttest.dcf.ws.dlbr.dk/DCFServices/AnimalTransferEntityService.svc</a>
        </p>
        <h1>Web Service Description</h1>
            The machine-readable description in the form of a WSDL document can be obtained by querying the following URI’s.
            <p><b>Production WSDL:</b><a href="http://prod.dcf.ws.dlbr.dk/DCFServices/AnimalTransferEntityService.svc?wsdl">http://prod.dcf.ws.dlbr.dk/DCFServices/AnimalTransferEntityService.svc?wsdl</a></p><p><b>Accept test WSDL:</b><a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/AnimalTransferEntityService.svc?wsdl">http://accepttest.dcf.ws.dlbr.dk/DCFServices/AnimalTransferEntityService.svc?wsdl</a></p><h1>Endpoints</h1>
            For information regarding endpoints, see topic 'Endpoints available in DCF Services'
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.AnimalTransferEntityService.FindAnimalTransfersByAnimalNumber(DLBR.DCF.KDB.MessageContracts.FindAnimalTransfersByAnimalNumberRequest)">
      <summary>
        <h1>Functional Description</h1>
            Finds existing animal transfers by an animal number.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>AnimalNumber</td><td>yes</td><td>&gt;0</td><td>The animal number for which to find the animal transfers</td></tr><tr><td>AnimalTransferTypes</td><td></td><td></td><td>If specified only transfers of the specified types is returned.</td></tr><tr><td>RequestedCount</td><td></td><td></td><td>If specified only the specified count is returned. The animal transfers are sorted by date, newest first.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>AnimalTransferCollection</td><td>The animal transfers found by the specified search criteria’s</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindAnimalTransfersByAnimalNumberRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindAnimalTransfersByAnimalNumberResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            var proxy = new AnimalTransferEntityServiceContractClient("AnimalTransferEntityService");
            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                proxy.FindAnimalTransfersByAnimalNumber(-1, null, null);
            }
            catch (FaultException&lt;InvalidArgument&gt; ex)
            {
                Debug.WriteLine(ex.Message, "AnimalTransferEntityServiceTest.TestFaultContracts");
                Assert.IsNotNull(ex.Detail);
                Assert.IsNotNull(ex.Detail.ArgumentName);
                Assert.AreEqual("AnimalNumber", ex.Detail.ArgumentName);
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.AnimalTransferEntityService.FindAnimalTransfersByHerdNumber(DLBR.DCF.KDB.MessageContracts.FindAnimalTransfersByHerdNumberRequest)">
      <summary>
        <h1>Functional Description</h1>
            Finds existing animal transfers by a herd number.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>HerdNumber</td><td>yes</td><td>&gt;0</td><td>The herd number for which to find the animal transfers</td></tr><tr><td>AnimalType</td><td>yes</td><td></td><td>The animal type of the herd.</td></tr><tr><td>AnimalTransferTypes</td><td></td><td></td><td>If specified only transfers of the specified types is returned.</td></tr><tr><td>FromDate</td><td></td><td></td><td>If specified only animal transfers performed after the specified date is returned. 
            If not specified all animal transfers matching the other criteria’s is returned.</td></tr><tr><td>ToDate</td><td>(yes)</td><td></td><td>If specified only animal transfers performed before the specified date is returned. 
            This parameter is required if “FromDate” is specified.</td></tr><tr><td>RequestedCount</td><td></td><td></td><td>If specified only the specified count is returned. The animal transfers are sorted by date, newest first. 
            If not specified all animal transfers matching the other criteria’s is returned.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>AnimalTransferCollection</td><td>The animal transfers found by the specified search criteria’s</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindAnimalTransfersByHerdNumberRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindAnimalTransfersByHerdNumberResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            var proxy = new AnimalTransferEntityServiceContractClient("AnimalTransferEntityService");
            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                var animalType = new AnimalType
                                     {
                                         Code = 12
                                     };

                AnimalTransferCollection result = proxy.FindAnimalTransfersByHerdNumber(null, animalType, null, TestUtil.HERD_NUMBER, null, null);

                Assert.IsNotNull(result);
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.AnimalTransferEntityService.RegisterAnimalTransfer(DLBR.DCF.KDB.MessageContracts.RegisterAnimalTransferRequest)">
      <summary>
        <h1>Functional Description</h1>
            Registers a new animal transfer
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>HerdNumber</td><td>yes</td><td>&gt;0</td><td>When an animal is exiting, this specifies the herd that the animal is leaving. 
            When an animal is entering a herd, this specifies the herd that the animal is entering.</td></tr><tr><td>AnimalNumber</td><td>yes</td><td>&gt;0</td><td>The animal number of the animal being transferred</td></tr><tr><td>AnimalType</td><td>yes</td><td></td><td>The type of the animal being transferred</td></tr><tr><td>Date</td><td>yes</td><td></td><td>The date of the transfer</td></tr><tr><td>AnimalTransferType</td><td>yes</td><td></td><td>The transfer type, e.g.</td></tr><tr><td>HerdNumberToFrom</td><td>yes</td><td></td><td>When an animal is exiting, this specifies the herd that the animal is transferred to. 
            When an animal is entering a herd, this specifies the herd that the animal was transferred from.</td></tr><tr><td>Nationality</td><td></td><td></td><td>Nationality of the animal.</td></tr><tr><td>IsTransferInternal</td><td></td><td></td><td>Specifies if the transfer occurs between herds owned by the same person.</td></tr><tr><td>TransferCauseCollection</td><td></td><td></td><td>A collection of transfer causes, specifying why the transfer occurs.</td></tr><tr><td>WeighingMethod</td><td>(yes)</td><td></td><td>The method of weighing, e.g. “ChestGirth” or “Weight”. If either Weight or ChestGirth is specified, this field is required.</td></tr><tr><td>WeighingType</td><td>(yes)</td><td></td><td>The type of weighing, e.g. “Weight upon leaving”. If either Weight or ChestGirth is specified, this field is required.</td></tr><tr><td>Weight</td><td></td><td></td><td>When weighing method is “Weight”, this field specifies the weight of the animal.</td></tr><tr><td>ChestGirth</td><td></td><td></td><td>When weighing method is “ChestGirth”, this field specifies the chest girth of the animal.</td></tr><tr><td>Price</td><td></td><td></td><td>Price of the animal.</td></tr><tr><td>VehicleRegistrationNumber</td><td></td><td></td><td>License plate of the vehicle</td></tr><tr><td>VehicleNationality</td><td></td><td></td><td>Country where the vehicle is registered.</td></tr><tr><td>CarrierLicenseNumber</td><td></td><td></td><td>The license number of the carrier.</td></tr><tr><td>WarningFlags</td><td>no</td><td></td><td>List of WarningFlags to force</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>AnimalTransfer</td><td>The newly registered animal transfer</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.RegisterAnimalTransferRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.RegisterAnimalTransferResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            if (token == null)
                token = AdfsHelper.GetSecurityToken(Settings.Default.ADFS_IdpEndpoint, Settings.Default.ADFS_Realm, TestUtil.USER_ID, TestUtil.PASSWORD);
            using (var service = new WcfServiceWrapper&lt;AnimalTransferEntityServiceContract&gt;(token,
                String.Format("https://{0}/DCFServices/AnimalTransferEntityService.svc/adfs",
                    Settings.Default.DCF_Hostname))
                )
            {
                RegisterAnimalTransferResponse result = null;
                RegisterAnimalTransferRequest request = new RegisterAnimalTransferRequest
                                                        {
                                                            AnimalNumber = 5176002427,
                                                            AnimalTransferType =
                                                                new AnimalTransferType
                                                                {
                                                                    Code = 1,
                                                                    Direction = Direction.Entering
                                                                },
                                                            AnimalType = new AnimalType {Code = 12},
                                                            Date = new DateTime(2013, 9, 2),
                                                            HerdNumber = 60771,
                                                            HerdNumberToFrom = 51760
                                                        };
                bool registered = false;
                List&lt;string&gt; warningFlags = new List&lt;string&gt;();
                while (!registered)
                {
                    try
                    {
                        request.WarningFlags = warningFlags.ToArray();
                        result = service.Channel.RegisterAnimalTransfer(request);
                        registered = true;
                    }
                    catch (FaultException&lt;OperationFailed&gt; ex)
                    {
                        string warningFlag = ex.Detail.WarningFlag;
                        warningFlags.Add(warningFlag);
                    }
                    catch (Exception ex)
                    {
                        Debug.WriteLine(ex.Message);
                        throw;
                    }
                }

                if (result != null &amp;&amp; result.AnimalTransfer != null)
                    service.Channel.DeleteAnimalTransfer(new DeleteAnimalTransferRequest {AnimalTransfer = result.AnimalTransfer});
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.AnimalTransferEntityService.UpdateAnimalTransfer(DLBR.DCF.KDB.MessageContracts.UpdateAnimalTransferRequest)">
      <summary>
        <h1>Functional Description</h1>
            Updates an existing animal transfer.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>AnimalTransfer</td><td>yes</td><td></td><td>The animal transfer to update.</td></tr><tr><td>WarningFlags</td><td>no</td><td></td><td>List of WarningFlags to force</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>AnimalTransfer</td><td>The updated animal transfer.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.UpdateAnimalTransferRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.UpdateAnimalTransferResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            var proxy = new AnimalTransferEntityServiceContractClient("AnimalTransferEntityService");

            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID_FARMER;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD_FARMER;

                var request = new RegisterAnimalTransferRequest
                                  {
                                      AnimalNumber = 2761202230,
                                      HerdNumber = TestUtil.HERD_NUMBER,
                                      HerdNumberToFrom = 71436,
                                      AnimalType = new AnimalType
                                                       {
                                                           Code = 12
                                                       },
                                      AnimalTransferType = new AnimalTransferType
                                                               {
                                                                   Code = 7,
                                                                   Direction = Direction.Exiting
                                                               },
                                      Date = DateTime.Now,
                                      IsTransferInternal = null,
                                      Nationality = null,
                                      ChestGirth = null,
                                      Price = null,
                                      TransferCauseCollection = null,
                                      WeighingMethod = null,
                                      WeighingType = null,
                                      Weight = null
                                  };

                // Register animalTransfer
                RegisterAnimalTransferResponse response = ((AnimalTransferEntityServiceContract) proxy).RegisterAnimalTransfer(request);
                AnimalTransfer animalTransfer = response.AnimalTransfer;

                Assert.IsNotNull(animalTransfer);

                // Update 
                animalTransfer.Price = 123;

                proxy.UpdateAnimalTransfer(ref animalTransfer, null);

                Assert.IsNotNull(animalTransfer);
                Assert.AreEqual(123f, animalTransfer.Price);

                // Delete
                proxy.DeleteAnimalTransfer(animalTransfer, null);
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.AnimalTransferEntityService.DeleteAnimalTransfer(DLBR.DCF.KDB.MessageContracts.DeleteAnimalTransferRequest)">
      <summary>
        <h1>Functional Description</h1>
            Deletes an existing animal transfer.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>AnimalTransfer</td><td>yes</td><td></td><td>The animal transfer to delete</td></tr><tr><td>WarningFlags</td><td>no</td><td></td><td>List of WarningFlags to force</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.DeleteAnimalTransferRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.DeleteAnimalTransferResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            var proxy = new AnimalTransferEntityServiceContractClient("AnimalTransferEntityService");

            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID_FARMER;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD_FARMER;

                var request = new RegisterAnimalTransferRequest
                                  {
                                      AnimalNumber = 2761202230,
                                      HerdNumber = TestUtil.HERD_NUMBER,
                                      HerdNumberToFrom = 71436,
                                      AnimalType = new AnimalType
                                                       {
                                                           Code = 12
                                                       },
                                      AnimalTransferType = new AnimalTransferType
                                                               {
                                                                   Code = 7,
                                                                   Direction = Direction.Exiting
                                                               },
                                      Date = DateTime.Now,
                                      IsTransferInternal = null,
                                      Nationality = null,
                                      ChestGirth = null,
                                      Price = null,
                                      TransferCauseCollection = null,
                                      WeighingMethod = null,
                                      WeighingType = null,
                                      Weight = null
                                  };

                // Register animalTransfer
                RegisterAnimalTransferResponse response = ((AnimalTransferEntityServiceContract) proxy).RegisterAnimalTransfer(request);
                AnimalTransfer animalTransfer = response.AnimalTransfer;

                Assert.IsNotNull(animalTransfer);

                // Update 
                animalTransfer.Price = 123;

                proxy.UpdateAnimalTransfer(ref animalTransfer, null);

                Assert.IsNotNull(animalTransfer);
                Assert.AreEqual(123f, animalTransfer.Price);

                // Delete
                proxy.DeleteAnimalTransfer(animalTransfer, null);
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.AnimalTransferEntityService.FindAnimalTransfersByManagementUnitId(DLBR.DCF.KDB.MessageContracts.FindAnimalTransfersByManagementUnitIdRequest)">
      <summary>
        <h1>Functional Description</h1>
            Finds existing animal transfers by Management unit id.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>ManagementUnitId</td><td>yes</td><td>&gt;0</td><td>The management unit id for which to find the animal transfers</td></tr><tr><td>FromDate</td><td></td><td></td><td>If specified only animal transfers performed after the specified date is returned. If not specified all animal transfers matching the other criteria’s is returned.</td></tr><tr><td>ToDate</td><td>(yes)</td><td></td><td>If specified only animal transfers performed before the specified date is returned. This parameter is required if “FromDate” is specified.</td></tr><tr><td>ReqCount</td><td></td><td></td><td>If specified only the specified count is returned.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>AnimalTransferEntities</td><td>The animal transfers found by the specified search criteria’s</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindAnimalTransfersByManagementUnitIdRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindAnimalTransfersByManagementUnitIdResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            AnimalTransferEntityServiceContractClient client = new AnimalTransferEntityServiceContractClient("AnimalTransferEntityService_Federation_Adfs");

            try
            {
                client.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                client.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                KPOAnimalTransferCollection animalTransferCollection = client.FindAnimalTransfersByManagementUnitId(null, 47800, null, null);

                animalTransferCollection.Should().NotBeNull().And.HaveCount(c =&gt; c &gt; 0);
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
                throw;
            }
            finally
            {
                if (client.State != CommunicationState.Faulted)
                {
                    client.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.AnimalTransferEntityService.GetAnimalTransferTypeEntityCollection(DLBR.DCF.KDB.DataContracts.AnimalTransferTypeCollection)">
      <summary>
            Method to translate a DataContracts.AnimalTransferTypeCollection to Collection of <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.AnimalTransferTypeEntity" /></summary>
      <param name="animalTransfertypeCollection"></param>
      <returns> Null if <paramref name="animalTransfertypeCollection" /> is null or empty. Otherwise a collection of AnimalTransferTypeEntity is returned. </returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.AnimalTransferEntityService.GetTransferCauseEntityCollection(DLBR.DCF.KDB.DataContracts.TransferCauseCollection)">
      <summary>
            Method to translate a DataContracts.TransferCauseCollection to a collection of <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.TransferCauseEntity" />. 
            </summary>
      <param name="transferCauseCollection"></param>
      <returns> Null if <paramref name="transferCauseCollection" /> is null or empty. Otherwise a collection of <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.TransferCauseEntity" /> is returned. </returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.AnimalWeightEntityService">
      <summary>
        <h1>General</h1>
        <p>
            The following URIs specifies the location of the service in the production- and production test environment. 
            By default services in both the production and the production test environment uses the production data stores. The alternative URIs, which uses the test data stores (Medio), may be used for testing purposes.
            Please note that service versions might differ between the production- and production test environments. Before you begin using the service, please consult the person responsible as described in section 3.7 – Responsibility assignment.
            </p>
        <p>
          <b>Production URL:</b>
          <a href="http://prod.dcf.ws.dlbr.dk/DCFServices/AnimalWeightEntityService.svc">http://prod.dcf.ws.dlbr.dk/DCFServices/AnimalWeightEntityService.svc</a>
        </p>
        <p>
          <b>Accept test URL:</b>
          <a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/AnimalWeightEntityService.svc">http://accepttest.dcf.ws.dlbr.dk/DCFServices/AnimalWeightEntityService.svc</a>
        </p>
        <h1>Web Service Description</h1>
            The machine-readable description in the form of a WSDL document can be obtained by querying the following URI’s.
            <p><b>Production WSDL:</b><a href="http://prod.dcf.ws.dlbr.dk/DCFServices/AnimalWeightEntityService.svc?wsdl">http://prod.dcf.ws.dlbr.dk/DCFServices/AnimalWeightEntityService.svc?wsdl</a></p><p><b>Accept test WSDL:</b><a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/AnimalWeightEntityService.svc?wsdl">http://accepttest.dcf.ws.dlbr.dk/DCFServices/AnimalWeightEntityService.svc?wsdl</a></p><h1>Endpoints</h1>
            For information regarding endpoints, see topic 'Endpoints available in DCF Services'
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.AnimalWeightEntityService.GetAnimalWeightById(DLBR.DCF.KDB.MessageContracts.GetAnimalWeightByIdRequest)">
      <summary>
        <h1>Functional Description</h1>
            Gets a single animal weight by the technical AnimalWeightId.
            <h1>Notes</h1><h1>Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>AnimalWeightId</td><td>yes</td><td>&gt;0</td><td>The id of the animal weight to read.</td></tr><tr><td>IncludeExpectedWeightInformation</td><td>no</td><td></td><td>Include expected weight informations. Default=false</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>AnimalWeight</td><td>The <see cref="T:DLBR.DCF.KDB.DataContracts.AnimalWeight" /> entity. If the entity is not found, this value is null.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetAnimalWeightByIdRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetAnimalWeightByIdResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            const int animalWeightId = 6797326;

            var proxy = new AnimalWeightEntityServiceContractClient("AnimalWeightEntityService_Federation_Adfs");
            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID_FARMER;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD_FARMER;

                AnimalWeight result = proxy.GetAnimalWeightById(animalWeightId, false);

                Assert.IsNotNull(result);
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.AnimalWeightEntityService.FindAnimalWeightsByAnimalNumber(DLBR.DCF.KDB.MessageContracts.FindAnimalWeightsByAnimalNumberRequest)">
      <summary>
        <h1>Functional Description</h1>
            Finds a number of animal weights by animal number.
            <h1>Notes</h1>
            Depending on user priviligies, only animal weights taken place in the herd the user is authorized to see is returned.
            <h1>Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>AnimalNumber</td><td>yes</td><td>&gt;0</td><td>The animal number from which to find AnimalWeights.</td></tr><tr><td>WeighingType</td><td>no</td><td></td><td>If specified the operation only returns AnimalWeights with the WeighingType specified. If not specified all AnimalWeights on the specified animal is returned.</td></tr><tr><td>RequestedCount</td><td>no</td><td></td><td>If specified the operation only returns the specified number of <see cref="T:DLBR.DCF.KDB.DataContracts.AnimalWeight" /> entities, sorted by date. If not specified all AnimalWeights on the specified animal is returned.</td></tr><tr><td>IncludeExpectedWeightInformation</td><td>no</td><td></td><td>Include expected weight informations. Default=false</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>AnimalWeightCollection</td><td>A collection of <see cref="T:DLBR.DCF.KDB.DataContracts.AnimalWeight" /> entities</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindAnimalWeightsByAnimalNumberRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindAnimalWeightsByAnimalNumberResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            var proxy = new AnimalWeightEntityServiceContractClient("AnimalWeightEntityService");

            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID_FARMER;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD_FARMER;

                AnimalWeightCollection result = proxy.FindAnimalWeightsByAnimalNumber(m_cowAnimalNumberWithAnimalWeight, false, null, null);

                result.Should().NotBeNull().And.NotBeEmpty();
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.AnimalWeightEntityService.FindAnimalWeightsByHerdNumber(DLBR.DCF.KDB.MessageContracts.FindAnimalWeightsByHerdNumberRequest)">
      <summary>
        <h1>Functional Description</h1>
            Finds a number of animal weights by herd number. 
            <h1>Notes</h1>
            Only animal weights that has taken place in specified herd and that match the other criteria below is returned.
            <h1>Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>HerdNumber</td><td>yes</td><td>&gt;0</td><td>The herd number from which to find AnimalWeights.</td></tr><tr><td>AnimalType</td><td>yes</td><td></td><td>The type of animal, e.g. Cattle.</td></tr><tr><td>WeighingType</td><td>no</td><td></td><td>If specified the operation only returns AnimalWeights with the WeighingType specified. If not specified all AnimalWeights on the specified animal is returned.</td></tr><tr><td>FromDate</td><td>(yes)</td><td></td><td>If specified only animal weights performed after the specified date is returned. If not specified all animal weights matching the other criteria’s is returned. If this parameter is set also the “ToDate” must be set. </td></tr><tr><td>ToDate</td><td>(yes)</td><td></td><td>If specified only animal weights performed before the specified date is returned. This parameter is required if “FromDate” is specified.</td></tr><tr><td>RequestedCount</td><td>no</td><td></td><td>If specified the operation only returns the specified number of AnimalWeights, sorted by date. If not specified all <see cref="T:DLBR.DCF.KDB.DataContracts.AnimalWeight" /> entities in the specified herd is returned.</td></tr><tr><td>IncludeExpectedWeightInformation</td><td>no</td><td></td><td>Include expected weight informations. Default=false</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>AnimalWeightCollection</td><td>A collection of <see cref="T:DLBR.DCF.KDB.DataContracts.AnimalWeight" /> entities</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindAnimalWeightsByHerdNumberRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindAnimalWeightsByHerdNumberResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            var proxy = new AnimalWeightEntityServiceContractClient("AnimalWeightEntityService");
            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID_FARMER;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD_FARMER;

                var animalType = new AnimalType
                                     {
                                         Code = 12
                                     };

                AnimalWeightCollection result = proxy.FindAnimalWeightsByHerdNumber(animalType, null, TestUtil.HERD_NUMBER, false, null, null, null);

                result.Should().NotBeNull().And.NotBeEmpty();

            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.AnimalWeightEntityService.RegisterAnimalWeight(DLBR.DCF.KDB.MessageContracts.RegisterAnimalWeightRequest)">
      <summary>
        <h1>Functional Description</h1>
            Registers a new animal weight.
            <h1>Notes</h1>
            This operation does not allow registering animal weights with weighing type “Birth” (code = 2), “Entering” (code=3) or “Exiting” (code = 4). Registering weights with the mentioned weighing types is handled by either the CalvingEntityService or the AnimalTransferEntitService.
            <h1>Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>HerdNumber</td><td>yes</td><td>&gt;0</td><td>The herd number to which the animal belongs.</td></tr><tr><td>AnimalType</td><td>yes</td><td></td><td>The type of animal, e.g. Cattle.</td></tr><tr><td>AnimalNumber</td><td>yes</td><td>&gt;0</td><td>The animal number of the animal being weighed.</td></tr><tr><td>Date</td><td>yes</td><td></td><td>The date of the weighing.</td></tr><tr><td>WeighingMethod</td><td>yes</td><td></td><td>The method of weighing, e.g. Using a weight scale or by measuring the circumference of the chest.</td></tr><tr><td>WeighingType</td><td>yes</td><td></td><td>The type of weighing, e.g. “Weighing”.</td></tr><tr><td>Weight</td><td>yes</td><td></td><td>The weight of the animal in kilograms.</td></tr><tr><td>Price</td><td>no</td><td></td><td>The price of the animal.</td></tr><tr><td>ChestGirth</td><td>no</td><td></td><td>The circumference of the chest, in centimeters.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>AnimalWeight</td><td>The newly registered <see cref="T:DLBR.DCF.KDB.DataContracts.AnimalWeight" /> entity.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.RegisterAnimalWeightRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.RegisterAnimalWeightResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            var proxy = new AnimalWeightEntityServiceContractClient("AnimalWeightEntityService");
            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID_FARMER;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD_FARMER;

                long herdNumber = TestUtil.HERD_NUMBER;
                long animalNumber = m_comAnimalNumberWithAnimalWeightInHerd;

                var animalType = new AnimalType
                                     {
                                         Code = 12
                                     };
                var weighingMethod = new WeighingMethod
                                         {
                                             Code = 1
                                         };
                var weighingType = new WeighingType
                                       {
                                           Code = 1
                                       };
                DateTime animalWeightDate = DateTime.Now.AddDays(-1);
                float weight = 650;

                //Register
                AnimalWeight animalWeight = proxy.RegisterAnimalWeight(
                    animalNumber,
                    animalType,
                    null,
                    animalWeightDate,
                    herdNumber,
                    null,
                    weighingMethod,
                    weighingType,
                    weight);

                Assert.IsNotNull(animalWeight);

                //Update
                DateTime date = DateTime.Now.AddDays(-2);
                animalWeight.Date = date;

                proxy.UpdateAnimalWeight(ref animalWeight);

                //Collection&lt;AnimalWeight&gt; animalWeights = proxy.FindAnimalWeightsByAnimalNumber(animalNumber, null, weighingType);
                //AnimalWeight animalWeight = animalWeights.OrderByDescending(a =&gt; a.Date).FirstOrDefault();
                Assert.IsNotNull(animalWeight);
                Assert.AreEqual(date.Date, animalWeight.Date.Date);

                //Delete
                proxy.DeleteAnimalWeight(animalWeight);
            }
            catch (FaultException&lt;InvalidArgument&gt; ex)
            {
                Debug.WriteLine(ex.Message, "AnimalWeightEntityServiceTest.TestCRUD");
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.AnimalWeightEntityService.UpdateAnimalWeight(DLBR.DCF.KDB.MessageContracts.UpdateAnimalWeightRequest)">
      <summary>
        <h1>Functional Description</h1>
            Updates an existing animal weight.
            <h1>Notes</h1>
            This operation does not allow updating animal weights with weighing type “Birth” (code = 2), “Entering” (code=3) or “Exiting” (code = 4). Updating weights with the mentioned weighing types is handled by either the CalvingEntityService or the AnimalTransferEntitService.
            <h1>Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>AnimalWeight</td><td>yes</td><td></td><td>The <see cref="T:DLBR.DCF.KDB.DataContracts.AnimalWeight" /> entity to update.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>AnimalWeight</td><td>The newly updated <see cref="T:DLBR.DCF.KDB.DataContracts.AnimalWeight" /> entity.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.UpdateAnimalWeightRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.UpdateAnimalWeightResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            var proxy = new AnimalWeightEntityServiceContractClient("AnimalWeightEntityService");
            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID_FARMER;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD_FARMER;

                long herdNumber = TestUtil.HERD_NUMBER;
                long animalNumber = m_comAnimalNumberWithAnimalWeightInHerd;

                var animalType = new AnimalType
                                     {
                                         Code = 12
                                     };
                var weighingMethod = new WeighingMethod
                                         {
                                             Code = 1
                                         };
                var weighingType = new WeighingType
                                       {
                                           Code = 1
                                       };
                DateTime animalWeightDate = DateTime.Now.AddDays(-1);
                float weight = 650;

                //Register
                AnimalWeight animalWeight = proxy.RegisterAnimalWeight(
                    animalNumber,
                    animalType,
                    null,
                    animalWeightDate,
                    herdNumber,
                    null,
                    weighingMethod,
                    weighingType,
                    weight);

                Assert.IsNotNull(animalWeight);

                //Update
                DateTime date = DateTime.Now.AddDays(-2);
                animalWeight.Date = date;

                proxy.UpdateAnimalWeight(ref animalWeight);

                //Collection&lt;AnimalWeight&gt; animalWeights = proxy.FindAnimalWeightsByAnimalNumber(animalNumber, null, weighingType);
                //AnimalWeight animalWeight = animalWeights.OrderByDescending(a =&gt; a.Date).FirstOrDefault();
                Assert.IsNotNull(animalWeight);
                Assert.AreEqual(date.Date, animalWeight.Date.Date);

                //Delete
                proxy.DeleteAnimalWeight(animalWeight);
            }
            catch (FaultException&lt;InvalidArgument&gt; ex)
            {
                Debug.WriteLine(ex.Message, "AnimalWeightEntityServiceTest.TestCRUD");
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.AnimalWeightEntityService.DeleteAnimalWeight(DLBR.DCF.KDB.MessageContracts.DeleteAnimalWeightRequest)">
      <summary>
        <h1>Functional Description</h1>
            Deletes an existing animal weight.
            <h1>Notes</h1>
            This operation does not allow deleting animal weights with weighing type “Birth” (code = 2), “Entering” (code=3) or “Exiting” (code = 4). Updating weights with the mentioned weighing types is handled by either the CalvingEntityService or the AnimalTransferEntitService.
            <h1>Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>AnimalWeight</td><td>yes</td><td></td><td>The <see cref="T:DLBR.DCF.KDB.DataContracts.AnimalWeight" /> entity to delete.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.DeleteAnimalWeightRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.DeleteAnimalWeightResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            var proxy = new AnimalWeightEntityServiceContractClient("AnimalWeightEntityService");
            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID_FARMER;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD_FARMER;

                long herdNumber = TestUtil.HERD_NUMBER;
                long animalNumber = m_comAnimalNumberWithAnimalWeightInHerd;

                var animalType = new AnimalType
                                     {
                                         Code = 12
                                     };
                var weighingMethod = new WeighingMethod
                                         {
                                             Code = 1
                                         };
                var weighingType = new WeighingType
                                       {
                                           Code = 1
                                       };
                DateTime animalWeightDate = DateTime.Now.AddDays(-1);
                float weight = 650;

                //Register
                AnimalWeight animalWeight = proxy.RegisterAnimalWeight(
                    animalNumber,
                    animalType,
                    null,
                    animalWeightDate,
                    herdNumber,
                    null,
                    weighingMethod,
                    weighingType,
                    weight);

                Assert.IsNotNull(animalWeight);

                //Update
                DateTime date = DateTime.Now.AddDays(-2);
                animalWeight.Date = date;

                proxy.UpdateAnimalWeight(ref animalWeight);

                //Collection&lt;AnimalWeight&gt; animalWeights = proxy.FindAnimalWeightsByAnimalNumber(animalNumber, null, weighingType);
                //AnimalWeight animalWeight = animalWeights.OrderByDescending(a =&gt; a.Date).FirstOrDefault();
                Assert.IsNotNull(animalWeight);
                Assert.AreEqual(date.Date, animalWeight.Date.Date);

                //Delete
                proxy.DeleteAnimalWeight(animalWeight);
            }
            catch (FaultException&lt;InvalidArgument&gt; ex)
            {
                Debug.WriteLine(ex.Message, "AnimalWeightEntityServiceTest.TestCRUD");
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.BasicInformationEntityServiceV2">
      <summary>
            Service Class - BasicInformationEntityService
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.BasicInformationEntityServiceV2.GetBasicMetadata(DLBR.DCF.KDB.MessageContracts.GetBasicMetadataRequest)">
      <summary>
        <h1>Functional Description</h1>
            Get all basic information metadata
            </summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetBasicMetadataRequest" /></param>
      <returns>The collection of basic information metadata. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetBasicMetadataResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example:
            <code>Method GetBasicMetadata not found in class ..\tests\DLBR.DCF.KDB.IntegrationTests\BasicInformationEntityServiceTest.cs</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.BasicInformationEntityServiceV2.GetBasicInformations(DLBR.DCF.KDB.MessageContracts.GetBasicInformationsRequest)">
      <summary>
        <h1>Functional Description</h1>
            Get all basic information elements
            </summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetBasicInformationsRequest" /></param>
      <returns>The collection of basic information for a module. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetBasicInformationsResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example:
            <code>Method GetBasicInformations not found in class ..\tests\DLBR.DCF.KDB.IntegrationTests\BasicInformationEntityServiceTest.cs</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.BasicInformationEntityServiceV2.GetModules(DLBR.DCF.KDB.MessageContracts.GetModulesRequest)">
      <summary>
        <h1>Functional Description</h1>
            Get all basic information elements
            </summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetAllBasicInformationsRequest" /></param>
      <returns>The collection of basic information. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetAllBasicInformationsResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example:
            <code>Method GetAllBasicInformations not found in class ..\tests\DLBR.DCF.KDB.IntegrationTests\BasicInformationEntityServiceTest.cs</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.BasicInformationEntityServiceV2.InsertBasicInformations(DLBR.DCF.KDB.MessageContracts.InsertBasicInformationsRequest)">
      <summary>
        <h1>Functional Description</h1>
            Inserrt basic information elements
            </summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.UpdateBasicInformationsResponse" /></param>
      <returns>See <see cref="T:DLBR.DCF.KDB.MessageContracts.UpdateBasicInformationsRequest" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example:
            <code>Method InsertBasicInformations not found in class ..\tests\DLBR.DCF.KDB.IntegrationTests\BasicInformationEntityServiceTest.cs</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.BasicInformationEntityServiceV2.UpdateBasicInformations(DLBR.DCF.KDB.MessageContracts.UpdateBasicInformationsRequest)">
      <summary>
        <h1>Functional Description</h1>
            Update basic information elements
            </summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.UpdateBasicInformationsResponse" /></param>
      <returns>See <see cref="T:DLBR.DCF.KDB.MessageContracts.UpdateBasicInformationsRequest" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example:
            <code>Method UpdateBasicInformations not found in class ..\tests\DLBR.DCF.KDB.IntegrationTests\BasicInformationEntityServiceTest.cs</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.BasicInformationEntityServiceV2.DeleteBasicInformations(DLBR.DCF.KDB.MessageContracts.DeleteBasicInformationsRequest)">
      <summary>
        <h1>Functional Description</h1>
            Update basic information elements
            </summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.UpdateBasicInformationsResponse" /></param>
      <returns>See <see cref="T:DLBR.DCF.KDB.MessageContracts.UpdateBasicInformationsRequest" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example:
            <code>Method UpdateBasicInformations not found in class ..\tests\DLBR.DCF.KDB.IntegrationTests\BasicInformationEntityServiceTest.cs</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.BasicInformationEntityServiceV2.GetAllBasicInformations(DLBR.DCF.KDB.MessageContracts.GetAllBasicInformationsRequest)">
      <summary>
        <h1>Functional Description</h1>
            Get all basic information elements
            </summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetAllBasicInformationsRequest" /></param>
      <returns>The collection of basic information. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetAllBasicInformationsResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example:
            <code>Method GetAllBasicInformations not found in class ..\tests\DLBR.DCF.KDB.IntegrationTests\BasicInformationEntityServiceTest.cs</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.BasicInformationEntityServiceV2.GetValidationInformation(DLBR.DCF.KDB.MessageContracts.GetValidationInformationRequest)">
      <summary>
        <h1>Functional Description</h1>
            Get the validation information for all basic information elements
            </summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetValidationInformationRequest" /></param>
      <returns>The collection of validation information. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetValidationInformationResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example:
            <code>Method GetValidationInformations not found in class ..\tests\DLBR.DCF.KDB.IntegrationTests\BasicInformationEntityServiceTest.cs</code></example>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.CalvingEntityService">
      <summary>
        <h1>General</h1>
        <p>
            The following URIs specifies the location of the service in the production- and production test environment. 
            By default services in both the production and the production test environment uses the production data stores. The alternative URIs, which uses the test data stores (Medio), may be used for testing purposes.
            Please note that service versions might differ between the production- and production test environments. Before you begin using the service, please consult the person responsible as described in section 3.7 – Responsibility assignment.
            </p>
        <p>
          <b>Production URL:</b>
          <a href="http://prod.dcf.ws.dlbr.dk/DCFServices/CalvingEntityService.svc">http://prod.dcf.ws.dlbr.dk/DCFServices/CalvingEntityService.svc</a>
        </p>
        <p>
          <b>Accept test URL:</b>
          <a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/CalvingEntityService.svc">http://accepttest.dcf.ws.dlbr.dk/DCFServices/CalvingEntityService.svc</a>
        </p>
        <h1>Web Service Description</h1>
            The machine-readable description in the form of a WSDL document can be obtained by querying the following URI’s.
            <p><b>Production WSDL:</b><a href="http://prod.dcf.ws.dlbr.dk/DCFServices/CalvingEntityService.svc?wsdl">http://prod.dcf.ws.dlbr.dk/DCFServices/CalvingEntityService.svc?wsdl</a></p><p><b>Accept test WSDL:</b><a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/CalvingEntityService.svc?wsdl">http://accepttest.dcf.ws.dlbr.dk/DCFServices/CalvingEntityService.svc?wsdl</a></p><h1>Endpoints</h1>
            For information regarding endpoints, see topic 'Endpoints available in DCF Services'
            </summary>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.CalvingEntityServiceBase">
      <summary>
            Service Class - CalvingEntityService
            </summary>
      <remarks>
        <tocexclude />
      </remarks>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.CalvingEntityService.RegisterCalving(DLBR.DCF.KDB.MessageContracts.RegisterCalvingRequest)">
      <summary>
        <h1>Functional Description</h1>
            Registers a new calving.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>HerdNumber</td><td>yes</td><td>&gt;0</td><td>The herd number to which the animal belongs.</td></tr><tr><td>CowAnimalNumber</td><td>yes</td><td>&gt;0</td><td>The animal number of the animal that delivered the calf.</td></tr><tr><td>CalvingDate</td><td>yes</td><td></td><td>The date of calving.</td></tr><tr><td>AnimalType</td><td>yes</td><td></td><td>The type of animal, e.g. cattle.</td></tr><tr><td>Size</td><td>no</td><td></td><td>The size of the calf, e.g. small </td></tr><tr><td>CalvingProgress</td><td>no</td><td></td><td>The progress of the calving, e.g. easy without help.</td></tr><tr><td>Gender</td><td>yes</td><td></td><td>The gender of the calf, e.g. male.</td></tr><tr><td>OutCome</td><td>yes</td><td></td><td>The condition of calf at birth, e.g. Living calf.</td></tr><tr><td>Price</td><td>no</td><td></td><td>The value of the calf.</td></tr><tr><td>Weight</td><td>no</td><td></td><td>The weight of the calf.</td></tr><tr><td>CalfHerdNumber</td><td>no</td><td></td><td>The animal sequence number in the herd, equivalent to the last 5 digits in the CHR number of an animal. The full number of the animal including the CHR number and the sequence number can also be submitted.If the calf is stillborn or the animal has an abortion, the CalfHerdNumber may be omitted.</td></tr><tr><td>Name</td><td>no</td><td></td><td>Name of calf.</td></tr><tr><td>ShortName</td><td>no</td><td></td><td>Short name of calf.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>Calving</td><td>The newly registered calving.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.RegisterCalvingRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.RegisterCalvingResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            CalvingEntityServiceContractClient proxy = new CalvingEntityServiceContractClient("CalvingEntityService");

            //Operate on ServiceContract when method with complex signatures are called.
            CalvingEntityServiceContract contract = proxy;
            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID_FARMER;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD_FARMER;

                //Instantiate classifications
                AnimalType animalType = new AnimalType { Code = 12 };
                AnimalSize animalSize = new AnimalSize { Code = 1 };
                Gender gender = new Gender { Code = 1, AnimalType = animalType };
                CalvingProgress progress = new CalvingProgress { Code = 1 };
                CalvingOutcome outCome = new CalvingOutcome { Code = 1, AnimalType = animalType };

                //Build request with invalid CalfHerdNumber in order to force the database to throw an exception.
                RegisterCalvingRequest request = new RegisterCalvingRequest();

                request.AnimalType = animalType;
                request.CalfHerdNumber = 0;
                request.CalvingDate = DateTime.Today;
                request.CalvingProgress = progress;
                request.CowAnimalNumber = TestUtil.COW_NUMBER_CALVING;
                request.Gender = gender;
                request.HerdNumber = TestUtil.HERD_NUMBER;
                request.OutCome = outCome;
                request.Size = animalSize;

                contract.RegisterCalving(request);
            }
            catch (FaultException&lt;OperationFailed&gt; ex)
            {
                Debug.WriteLine(ex.Message, "RegisterCalvingTest");

                Assert.IsNotNull(ex.Detail);
                Assert.IsNotNull(ex.Detail.FaultDescription);

                Assert.AreEqual("213", ex.Detail.FaultCode);
                Assert.AreEqual("Øremærkenummer på afkom skal indberettes.", ex.Detail.FaultDescription);
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message, "RegisterCalvingTest");
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                    proxy.Close();
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.CalvingEntityService.UpdateCalving(DLBR.DCF.KDB.MessageContracts.UpdateCalvingRequest)">
      <summary>
        <h1>Functional Description</h1>
            Updates an existing calving.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>Calving</td><td>yes</td><td></td><td>The <see cref="T:DLBR.DCF.KDB.DataContracts.Calving" /> entity to update</td></tr><tr><td>WarningFlags</td><td>no</td><td></td><td>List of WarningFlag to force</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>Calving</td><td>The updated <see cref="T:DLBR.DCF.KDB.DataContracts.Calving" /> entity</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.UpdateCalvingRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.UpdateCalvingResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            CalvingEntityServiceContractClient proxy = new CalvingEntityServiceContractClient("CalvingEntityService");
            bool updateCalvingSuccceeded = true;
            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID_FARMER;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD_FARMER;

                //Get latest calving in herd to update.
                CalvingCollection calvings = proxy.FindCalvingsByHerdNumber(new AnimalType { Code = 12 }, null, TestUtil.HERD_NUMBER, 1, null);

                IEnumerable&lt;Calving&gt; sortedCalvings = from c in calvings orderby c.CalvingDate descending select c;

                Calving calving = sortedCalvings.ToList()[1];

                //Set an invalid value to force a database operation failure.
                calving.CalvingDate = DateTime.Now.AddDays(-1);
                calving.Weight = 10;

                proxy.UpdateCalving(ref calving, null);
            }
            catch (FaultException&lt;InvalidArgument&gt; ex)
            {
                Debug.WriteLine(ex.Message, "UpdateCalvingTest");
                throw;
            }
            catch (FaultException&lt;OperationFailed&gt; ex)
            {
                Debug.WriteLine(ex.Message, "UpdateCalvingTest");

                Assert.IsNotNull(ex.Detail);
                Assert.IsNotNull(ex.Detail.FaultDescription);

                Assert.AreEqual("5466", ex.Detail.FaultCode);
                Assert.AreEqual("Fødselsvægt skal være indenfor racens min/max grænser.", ex.Detail.FaultDescription);
                updateCalvingSuccceeded = false;
            }
            catch (FaultException&lt;InternalSystemError&gt; ex)
            {
                Debug.WriteLine(ex.Message, "UpdateCalvingTest");
                throw;
            }
            catch (FaultException ex)
            {
                Debug.WriteLine(ex.Message, "UpdateCalvingTest");
                throw;
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message, "UpdateCalvingTest");
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                    proxy.Close();
            }

            Assert.IsFalse(updateCalvingSuccceeded);
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.CalvingEntityService.DeleteCalving(DLBR.DCF.KDB.MessageContracts.DeleteCalvingRequest)">
      <summary>
        <h1>Functional Description</h1>
            Deletes an existing calving.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>Calving</td><td>yes</td><td></td><td>The <see cref="T:DLBR.DCF.KDB.DataContracts.Calving" /> entity to delete</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.DeleteCalvingRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.DeleteCalvingResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            CalvingEntityServiceContractClient proxy = new CalvingEntityServiceContractClient("CalvingEntityService");

            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID_FARMER;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD_FARMER;

                AnimalType animalType = new AnimalType { Code = 12 };

                Calving calving = new Calving();
                calving.HerdNumber = TestUtil.HERD_NUMBER;
                calving.Id = 1;
                calving.CalfAnimalNumber = m_calfAnimalNumber;
                calving.CalfAnimalId = m_calfAnimalId;
                calving.AnimalType = animalType;

                proxy.DeleteCalving(calving);
            }
            catch (FaultException&lt;InvalidArgument&gt; ex)
            {
                Debug.WriteLine(ex.Message, "DeleteCalvingTest");
                throw;
            }
            catch (FaultException&lt;OperationFailed&gt; ex)
            {
                Debug.WriteLine(ex.Message, "DeleteCalvingTest");
                Assert.IsNotNull(ex.Detail);
                Assert.IsNotNull(ex.Detail.FaultDescription);

                Assert.AreEqual("1844", ex.Detail.FaultCode);
            }
            catch (FaultException&lt;InternalSystemError&gt; ex)
            {
                Debug.WriteLine(ex.Message, "DeleteCalvingTest");
                throw;
            }
            catch (FaultException ex)
            {
                Debug.WriteLine(ex.Message, "DeleteCalvingTest");
                throw;
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message, "DeleteCalvingTest");
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                    proxy.Close();
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.CalvingEntityService.GetCalvingByCalfAnimalNumber(DLBR.DCF.KDB.MessageContracts.GetCalvingByCalfAnimalNumberRequest)">
      <summary>
        <h1>Functional Description</h1>
            Gets a single calving by calf animal number.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>CalfAnimalNumber</td><td>yes</td><td>&gt;0</td><td>The animal number of the calf.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>Calving</td><td>The <see cref="T:DLBR.DCF.KDB.DataContracts.Calving" /> entity. If the entity is not found, this value is null.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetCalvingByCalfAnimalNumberRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetCalvingByCalfAnimalNumberResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            CalvingEntityServiceContractClient proxy = new CalvingEntityServiceContractClient("CalvingEntityService_Federation_Adfs");
            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                Calving result = proxy.GetCalvingByCalfAnimalNumber(m_calfAnimalNumber);

                Assert.IsNotNull(result);
                Assert.AreEqual(result.CalfAnimalNumber, m_calfAnimalNumber);
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.CalvingEntityService.FindCalvingsByHerdNumber(DLBR.DCF.KDB.MessageContracts.FindCalvingsByHerdNumberRequest)">
      <summary>
        <h1>Functional Description</h1>
            Find calvings of animals within specified herd.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>HerdNumber</td><td>yes</td><td>&gt;0</td><td>The herd number from where to find animals and their calvings.</td></tr><tr><td>RequestedCount</td><td>no</td><td>&gt;0</td><td>If specified the operation only returns the specified number of calvings per animal number, sorted by date in descending order. If not specified all calvings matching the other criteria’s is returned. </td></tr><tr><td>AnimalType</td><td>yes</td><td></td><td>The type of animal in the herd, e.g. cattle.</td></tr><tr><td>FromDate</td><td>(yes)</td><td></td><td>If not specified all calvings for each active animal in the herd is returned. If “FromDate” is set, then “ToDate” must also be set, and vice versa. If specified  then calvings with a calving date within specified period is returned for all animals in the herd at the specified period.</td></tr><tr><td>ToDate</td><td>(yes)</td><td></td><td>See FromDate</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>CalvingCollection</td><td>A collection of <see cref="T:DLBR.DCF.KDB.DataContracts.Calving" /> entities.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindCalvingsByHerdNumberRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindCalvingsByHerdNumberResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            CalvingEntityServiceContractClient proxy = new CalvingEntityServiceContractClient("CalvingEntityService");
            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                AnimalType animalType = new AnimalType { Code = 12 };

                CalvingCollection result = proxy.FindCalvingsByHerdNumber(animalType, null, TestUtil.HERD_NUMBER, null, null);

                Assert.IsNotNull(result);
                Assert.IsTrue(result.Count &gt; 0);
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.CalvingEntityService.FindCalvingsByCowAnimalNumber(DLBR.DCF.KDB.MessageContracts.FindCalvingsByCowAnimalNumberRequest)">
      <summary>
        <h1>Functional Description</h1>
            Finds a number of calvings by cow animal number.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>CowAnimalNumber</td><td>yes</td><td>&gt;0</td><td>The animal number of the cow from which to find calvings.</td></tr><tr><td>RequestedCount</td><td>no</td><td>&gt;0</td><td>If specified the operation only returns the specified number of calvings per animal number, sorted by date in descending order. If not specified all calvings matching the other criteria’s is returned. </td></tr><tr><td>FromDate</td><td>(yes)</td><td></td><td>If not specified all calvings for each active animal in the herd is returned. If “FromDate” is set, then “ToDate” must also be set, and vice versa. If specified  then calvings with a calving date within specified period is returned for all animals in the herd at the specified period.</td></tr><tr><td>ToDate</td><td>(yes)</td><td></td><td>See FromDate</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>CalvingCollection</td><td>A collection of <see cref="T:DLBR.DCF.KDB.DataContracts.Calving" /> entities.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindCalvingsByCowAnimalNumberRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindCalvingsByCowAnimalNumberResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            CalvingEntityServiceContractClient proxy = new CalvingEntityServiceContractClient("CalvingEntityService");
            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                CalvingCollection result = proxy.FindCalvingsByCowAnimalNumber(3288701475, null, null, null);

                Assert.IsNotNull(result);
                Assert.IsTrue(result.Count &gt; 0);
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.CalvingEntityService.GetCalvingByDBID(DLBR.DCF.KDB.MessageContracts.GetCalvingByDBIDRequest)">
      <summary>
        <h1>Functional Description</h1>
            Gets a single calving by DB id
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>DBID</td><td>yes</td><td>&gt;0</td><td>DB id of the calving</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>Calving</td><td>The calving with the given DB id.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetCalvingByDBIDRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetCalvingByDBIDResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            CalvingEntityServiceContractClient proxy = new CalvingEntityServiceContractClient("CalvingEntityService");
            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                long dbId = 3264441;
                Calving result = proxy.GetCalvingByDBID(dbId);

                result.Should().NotBeNull();
                result.Id.Should().Be(dbId);
                result.TwinCode.Should().NotBeNull();
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.CalvingEntityService.FindCalvingsByCalvingNumber(DLBR.DCF.KDB.MessageContracts.FindCalvingsByCalvingNumberRequest)">
      <summary>
        <h1>Functional Description</h1>
            Find a collection of <see cref="T:DLBR.DCF.KDB.DataContracts.Calving" /> entities from a given Calving number
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>CalvingNumber</td><td>yes</td><td>&gt;0</td><td>Calving number</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>CalvingCollection</td><td>A collection of <see cref="T:DLBR.DCF.KDB.DataContracts.Calving" /> entities.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindCalvingsByCalvingNumberRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindCalvingsByCalvingNumberResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            CalvingEntityServiceContractClient proxy = new CalvingEntityServiceContractClient("CalvingEntityService");
            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                long dbId = 3264441;
                CalvingCollection result = proxy.FindCalvingsByCalvingNumber(dbId);

                result.Should().NotBeNull().And.HaveCount(2);
                result.Should().OnlyContain(c =&gt; c.Id == dbId &amp;&amp; c.TwinCode != null);
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.ClassificationEntityService">
      <summary>
        <h1>General</h1>
        <p>
            The following URIs specifies the location of the service in the production- and production test environment. 
            By default services in both the production and the production test environment uses the production data stores. The alternative URIs, which uses the test data stores (Medio), may be used for testing purposes.
            Please note that service versions might differ between the production- and production test environments. Before you begin using the service, please consult the person responsible as described in section 3.7 – Responsibility assignment.
            </p>
        <p>
          <b>Production URL:</b>
          <a href="http://prod.dcf.ws.dlbr.dk/DCFServices/ClassificationEntityService.svc">http://prod.dcf.ws.dlbr.dk/DCFServices/ClassificationEntityService.svc</a>
        </p>
        <p>
          <b>Accept test URL:</b>
          <a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/ClassificationEntityService.svc">http://accepttest.dcf.ws.dlbr.dk/DCFServices/ClassificationEntityService.svc</a>
        </p>
        <h1>Web Service Description</h1>
            The machine-readable description in the form of a WSDL document can be obtained by querying the following URI’s.
            <p><b>Production WSDL:</b><a href="http://prod.dcf.ws.dlbr.dk/DCFServices/ClassificationEntityService.svc?wsdl">http://prod.dcf.ws.dlbr.dk/DCFServices/ClassificationEntityService.svc?wsdl</a></p><p><b>Accept test WSDL:</b><a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/ClassificationEntityService.svc?wsdl">http://accepttest.dcf.ws.dlbr.dk/DCFServices/ClassificationEntityService.svc?wsdl</a></p><h1>Endpoints</h1>
            For information regarding endpoints, see topic 'Endpoints available in DCF Services'
            </summary>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.ClassificationEntityServiceBase">
      <summary>
            Service Class - ClassificationEntityService
            </summary>
      <tocexclude />
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.ClassificationEntityService.GetAnimalTypeCollection(DLBR.DCF.KDB.MessageContracts.GetAnimalTypeCollectionRequest)">
      <summary>
        <h1>Functional Description</h1>
            Gets a collection of AnimalType classification code entities.
            <h1>Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>AnimalCollection</td><td>A collection of the <see cref="T:DLBR.DCF.KDB.DataContracts.AnimalType" /> objects found.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetAnimalTypeCollectionRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetAnimalTypeCollectionResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            ClassificationEntityServiceContractClient client = new ClassificationEntityServiceContractClient("ClassificationEntityService");

            try
            {
                if (client.ClientCredentials != null)
                {
                    client.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                    client.ClientCredentials.UserName.Password = TestUtil.PASSWORD;
                }

                AnimalTypeCollection result = client.GetAnimalTypeCollection();

                Assert.IsNotNull(result);
                Assert.AreNotEqual(result.Count, 0);

                Debug.WriteLine("Number of returned Animal types: " + result.Count, "Result");
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message, "Exception");
                throw;
            }
            finally
            {
                if (client.State != CommunicationState.Faulted)
                {
                    client.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.ClassificationEntityService.GetAnimalSizeCollection(DLBR.DCF.KDB.MessageContracts.GetAnimalSizeCollectionRequest)">
      <summary>
        <h1>Functional Description</h1>
            Gets a collection of AnimalSize classification code entities.
            <h1>Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>AnimalCollection</td><td>A collection of the <see cref="T:DLBR.DCF.KDB.DataContracts.AnimalSize" /> objects found.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetAnimalSizeCollectionRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetAnimalSizeCollectionResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            ClassificationEntityServiceContractClient client = new ClassificationEntityServiceContractClient("ClassificationEntityService");

            try
            {
                if (client.ClientCredentials != null)
                {
                    client.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                    client.ClientCredentials.UserName.Password = TestUtil.PASSWORD;
                }

                AnimalSizeCollection result = client.GetAnimalSizeCollection();

                Assert.IsNotNull(result);
                Assert.AreNotEqual(result.Count, 0);

                Debug.WriteLine("Number of returned AnimalSize types: " + result.Count, "Result");
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message, "Exception");
                throw;
            }
            finally
            {
                if (client.State != CommunicationState.Faulted)
                {
                    client.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.ClassificationEntityService.GetCalvingOutcomeCollection(DLBR.DCF.KDB.MessageContracts.GetCalvingOutcomeCollectionRequest)">
      <summary>
        <h1>Functional Description</h1>
            Gets a collection of CalvingOutcome classification code entities.
            <h1>Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>AnimalCollection</td><td>A collection of the <see cref="T:DLBR.DCF.KDB.DataContracts.CalvingOutcome" /> objects found.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetCalvingOutcomeCollectionRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetCalvingOutcomeCollectionResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            ClassificationEntityServiceContractClient client = new ClassificationEntityServiceContractClient("ClassificationEntityService");

            try
            {
                if (client.ClientCredentials != null)
                {
                    client.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                    client.ClientCredentials.UserName.Password = TestUtil.PASSWORD;
                }

                CalvingOutcomeCollection result = client.GetCalvingOutcomeCollection();

                Assert.IsNotNull(result);
                Assert.AreNotEqual(result.Count, 0);

                Debug.WriteLine("Number of returned CalvingOutcome types: " + result.Count, "Result");
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message, "Exception");
                throw;
            }
            finally
            {
                if (client.State != CommunicationState.Faulted)
                {
                    client.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.ClassificationEntityService.GetCalvingProgressCollection(DLBR.DCF.KDB.MessageContracts.GetCalvingProgressCollectionRequest)">
      <summary>
        <h1>Functional Description</h1>
            Gets a collection of CalvingProgress classification code entities.
            <h1>Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>AnimalCollection</td><td>A collection of the <see cref="T:DLBR.DCF.KDB.DataContracts.CalvingProgress" /> objects found.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetCalvingProgressCollectionRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetCalvingProgressCollectionResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            ClassificationEntityServiceContractClient client = new ClassificationEntityServiceContractClient("ClassificationEntityService");

            try
            {
                if (client.ClientCredentials != null)
                {
                    client.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                    client.ClientCredentials.UserName.Password = TestUtil.PASSWORD;
                }

                CalvingProgressCollection result = client.GetCalvingProgressCollection();

                Assert.IsNotNull(result);
                Assert.AreNotEqual(result.Count, 0);

                Debug.WriteLine("Number of returned CalvingProgress types: " + result.Count, "Result");
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message, "Exception");
                throw;
            }
            finally
            {
                if (client.State != CommunicationState.Faulted)
                {
                    client.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.ClassificationEntityService.GetGenderCollection(DLBR.DCF.KDB.MessageContracts.GetGenderCollectionRequest)">
      <summary>
        <h1>Functional Description</h1>
            Gets a collection of Gender classification code entities.
            <h1>Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>AnimalCollection</td><td>A collection of the <see cref="T:DLBR.DCF.KDB.DataContracts.Gender" /> objects found.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetGenderCollectionRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetGenderCollectionResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            ClassificationEntityServiceContractClient client = new ClassificationEntityServiceContractClient("ClassificationEntityService");

            try
            {
                if (client.ClientCredentials != null)
                {
                    client.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                    client.ClientCredentials.UserName.Password = TestUtil.PASSWORD;
                }

                GenderCollection result = client.GetGenderCollection();

                Assert.IsNotNull(result);
                Assert.AreNotEqual(result.Count, 0);

                Debug.WriteLine("Number of returned gender types: " + result.Count, "Result");
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message, "Exception");
                throw;
            }
            finally
            {
                if (client.State != CommunicationState.Faulted)
                {
                    client.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.ClassificationEntityService.GetHerdTypeCollection(DLBR.DCF.KDB.MessageContracts.GetHerdTypeCollectionRequest)">
      <summary>
        <h1>Functional Description</h1>
            Gets a collection of HerdType classification code entities.
            <h1>Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>AnimalCollection</td><td>A collection of the <see cref="T:DLBR.DCF.KDB.DataContracts.HerdType" /> objects found.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetHerdTypeCollectionRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetHerdTypeCollectionResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            ClassificationEntityServiceContractClient client = new ClassificationEntityServiceContractClient("ClassificationEntityService");

            try
            {
                if (client.ClientCredentials != null)
                {
                    client.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                    client.ClientCredentials.UserName.Password = TestUtil.PASSWORD;
                }

                HerdTypeCollection result = client.GetHerdTypeCollection();

                Assert.IsNotNull(result);
                Assert.AreNotEqual(result.Count, 0);

                Debug.WriteLine("Number of returned Herd types: " + result.Count, "Result");
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message, "Exception");
                throw;
            }
            finally
            {
                if (client.State != CommunicationState.Faulted)
                {
                    client.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.ClassificationEntityService.GetTwinCodeCollection(DLBR.DCF.KDB.MessageContracts.GetTwinCodeCollectionRequest)">
      <summary>
        <h1>Functional Description</h1>
            Gets a collection of TwinCode classification code entities.
            <h1>Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>AnimalCollection</td><td>A collection of the <see cref="T:DLBR.DCF.KDB.DataContracts.TwinCode" /> objects found.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetTwinCodeCollectionRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetTwinCodeCollectionResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            ClassificationEntityServiceContractClient client = new ClassificationEntityServiceContractClient("ClassificationEntityService");

            try
            {
                if (client.ClientCredentials != null)
                {
                    client.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                    client.ClientCredentials.UserName.Password = TestUtil.PASSWORD;
                }

                TwinCodeCollection result = client.GetTwinCodeCollection();

                Assert.IsNotNull(result);
                Assert.AreNotEqual(result.Count, 0);

                Debug.WriteLine("Number of returned TwinCode types: " + result.Count, "Result");
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message, "Exception");
                throw;
            }
            finally
            {
                if (client.State != CommunicationState.Faulted)
                {
                    client.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.ClassificationEntityService.GetAnimalRaceCollection(DLBR.DCF.KDB.MessageContracts.GetAnimalRaceCollectionRequest)">
      <summary>
        <h1>Functional Description</h1>
            Gets a collection of AnimalRace classification code entities.
            <h1>Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>AnimalCollection</td><td>A collection of the <see cref="T:DLBR.DCF.KDB.DataContracts.AnimalRace" /> objects found.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetAnimalRaceCollectionRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetAnimalRaceCollectionResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            ClassificationEntityServiceContractClient client = new ClassificationEntityServiceContractClient("ClassificationEntityService");

            try
            {
                if (client.ClientCredentials != null)
                {
                    client.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                    client.ClientCredentials.UserName.Password = TestUtil.PASSWORD;
                }

                AnimalRaceCollection result = client.GetAnimalRaceCollection();

                Assert.IsNotNull(result);
                Assert.AreNotEqual(result.Count, 0);

                Debug.WriteLine("Number of returned AnimalRace types: " + result.Count, "Result");
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message, "Exception");
                throw;
            }
            finally
            {
                if (client.State != CommunicationState.Faulted)
                {
                    client.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.ClassificationEntityService.GetAnimalStatusCollection(DLBR.DCF.KDB.MessageContracts.GetAnimalStatusCollectionRequest)">
      <summary>
        <h1>Functional Description</h1>
            Gets a collection of AnimalStatus classification code entities.
            <h1>Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>AnimalCollection</td><td>A collection of the <see cref="T:DLBR.DCF.KDB.DataContracts.AnimalStatus" /> objects found.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetAnimalStatusCollectionRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetAnimalStatusCollectionResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            ClassificationEntityServiceContractClient client = new ClassificationEntityServiceContractClient("ClassificationEntityService");

            try
            {
                if (client.ClientCredentials != null)
                {
                    client.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                    client.ClientCredentials.UserName.Password = TestUtil.PASSWORD;
                }

                AnimalStatusCollection result = client.GetAnimalStatusCollection();

                Assert.IsNotNull(result);
                Assert.AreNotEqual(result.Count, 0);

                Debug.WriteLine("Number of returned AnimalStatus types: " + result.Count, "Result");
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message, "Exception");
                throw;
            }
            finally
            {
                if (client.State != CommunicationState.Faulted)
                {
                    client.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.ClassificationEntityService.GetInseminationTreatmentCodeCollection(DLBR.DCF.KDB.MessageContracts.GetInseminationTreatmentCodeCollectionRequest)">
      <summary>
        <h1>Functional Description</h1>
            Gets a collection of InseminationTreatmentCode classification code entities.
            <h1>Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>AnimalCollection</td><td>A collection of the <see cref="T:DLBR.DCF.KDB.DataContracts.InseminationTreatmentCode" /> objects found.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetInseminationTreatmentCodeCollectionRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetInseminationTreatmentCodeCollectionResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            ClassificationEntityServiceContractClient client = new ClassificationEntityServiceContractClient("ClassificationEntityService");

            try
            {
                if (client.ClientCredentials != null)
                {
                    client.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                    client.ClientCredentials.UserName.Password = TestUtil.PASSWORD;
                }

                InseminationTreatmentCodeCollection result = client.GetInseminationTreatmentCodeCollection();

                Assert.IsNotNull(result);
                Assert.AreNotEqual(result.Count, 0);

                Debug.WriteLine("Number of returned InseminationTreatment types: " + result.Count, "Result");
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message, "Exception");
                throw;
            }
            finally
            {
                if (client.State != CommunicationState.Faulted)
                {
                    client.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.ClassificationEntityService.GetInseminationProductCollection(DLBR.DCF.KDB.MessageContracts.GetInseminationProductCollectionRequest)">
      <summary>
        <h1>Functional Description</h1>
            Gets a collection of InseminationProduct classification code entities.
            <h1>Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>AnimalCollection</td><td>A collection of the <see cref="T:DLBR.DCF.KDB.DataContracts.InseminationProduct" /> objects found.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetInseminationProductCollectionRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetInseminationProductCollectionResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            ClassificationEntityServiceContractClient client = new ClassificationEntityServiceContractClient("ClassificationEntityService");

            try
            {
                if (client.ClientCredentials != null)
                {
                    client.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                    client.ClientCredentials.UserName.Password = TestUtil.PASSWORD;
                }

                InseminationProductCollection result = client.GetInseminationProductCollection();

                Assert.IsNotNull(result);
                Assert.AreNotEqual(result.Count, 0);

                Debug.WriteLine("Number of returned InseminationProduct types: " + result.Count, "Result");
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message, "Exception");
                throw;
            }
            finally
            {
                if (client.State != CommunicationState.Faulted)
                {
                    client.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.ClassificationEntityService.GetAdvisorTypeCollection(DLBR.DCF.KDB.MessageContracts.GetAdvisorTypeCollectionRequest)">
      <summary>
        <h1>Functional Description</h1>
            Gets a collection of AdvisorType classification code entities.
            <h1>Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>AnimalCollection</td><td>A collection of the <see cref="T:DLBR.DCF.KDB.DataContracts.AdvisorType" /> objects found.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetAdvisorTypeCollectionRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetAdvisorTypeCollectionResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            ClassificationEntityServiceContractClient client = new ClassificationEntityServiceContractClient("ClassificationEntityService");

            try
            {
                if (client.ClientCredentials != null)
                {
                    client.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                    client.ClientCredentials.UserName.Password = TestUtil.PASSWORD;
                }

                AdvisorTypeCollection result = client.GetAdvisorTypeCollection();

                Assert.IsNotNull(result);
                Assert.AreNotEqual(result.Count, 0);

                Debug.WriteLine("Number of returned Advisor types: " + result.Count, "Result");
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message, "Exception");
                throw;
            }
            finally
            {
                if (client.State != CommunicationState.Faulted)
                {
                    client.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.ClassificationEntityService.GetAnimalColorCollection(DLBR.DCF.KDB.MessageContracts.GetAnimalColorCollectionRequest)">
      <summary>
        <h1>Functional Description</h1>
            Gets a collection of AnimalColor classification code entities.
            <h1>Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>AnimalCollection</td><td>A collection of the <see cref="T:DLBR.DCF.KDB.DataContracts.AnimalColor" /> objects found.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetAnimalColorCollectionRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetAnimalColorCollectionResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>Method GetAnimalColorCollection not found in class ..\tests\DLBR.DCF.KDB.IntegrationTests\ClassificationEntityServiceIntegrationTest.cs</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.ClassificationEntityService.GetAnimalOriginCollection(DLBR.DCF.KDB.MessageContracts.GetAnimalOriginCollectionRequest)">
      <summary>
        <h1>Functional Description</h1>
            Gets a collection of AnimalOrigin classification code entities.
            <h1>Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>AnimalCollection</td><td>A collection of the <see cref="T:DLBR.DCF.KDB.DataContracts.AnimalOrigin" /> objects found.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetAnimalOriginCollectionRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetAnimalOriginCollectionResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>Method GetAnimalOriginCollection not found in class ..\tests\DLBR.DCF.KDB.IntegrationTests\ClassificationEntityServiceIntegrationTest.cs</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.ClassificationEntityService.GetNationalityCollection(DLBR.DCF.KDB.MessageContracts.GetNationalityCollectionRequest)">
      <summary>
        <h1>Functional Description</h1>
            Gets a collection of Nationality classification code entities.
            <h1>Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>AnimalCollection</td><td>A collection of the <see cref="T:DLBR.DCF.KDB.DataContracts.Nationality" /> objects found.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetNationalityCollectionRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetNationalityCollectionResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            ClassificationEntityServiceContractClient client = new ClassificationEntityServiceContractClient("ClassificationEntityService");

            try
            {
                if (client.ClientCredentials != null)
                {
                    client.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                    client.ClientCredentials.UserName.Password = TestUtil.PASSWORD;
                }

                NationalityCollection result = client.GetNationalityCollection();

                Assert.IsNotNull(result);
                Assert.AreNotEqual(result.Count, 0);

                Debug.WriteLine("Number of returned Nationality types: " + result.Count, "Result");
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message, "Exception");
                throw;
            }
            finally
            {
                if (client.State != CommunicationState.Faulted)
                {
                    client.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.ClassificationEntityService.GetVetSampleTypeCollection(DLBR.DCF.KDB.MessageContracts.GetVetSampleTypeCollectionRequest)">
      <summary>
        <h1>Functional Description</h1>
            Gets a collection of VetSampleType classification code entities.
            <h1>Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>AnimalCollection</td><td>A collection of the <see cref="T:DLBR.DCF.KDB.DataContracts.VetSampleType" /> objects found.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetVetSampleTypeCollectionRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetVetSampleTypeCollectionResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>Method GetVetSampleTypeCollection not found in class ..\tests\DLBR.DCF.KDB.IntegrationTests\ClassificationEntityServiceIntegrationTest.cs</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.ClassificationEntityService.GetVetSamplePCRTypeCollection(DLBR.DCF.KDB.MessageContracts.GetVetSamplePCRTypeCollectionRequest)">
      <summary>
        <h1>Functional Description</h1>
            Gets a collection of VetSampleType classification code entities.
            <h1>Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>VetSamplePCRTypeCollection</td><td>A collection of the <see cref="T:DLBR.DCF.KDB.DataContracts.VetSampleHealth.VetPCRType" /> objects found.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetVetSampleTypeCollectionRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetVetSampleTypeCollectionResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            ClassificationEntityServiceContractClient client = new ClassificationEntityServiceContractClient("ClassificationEntityService");

            try
            {
                if (client.ClientCredentials != null)
                {
                    client.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                    client.ClientCredentials.UserName.Password = TestUtil.PASSWORD;
                }

                var result = client.GetVetSamplePCRTypeCollection();

                Assert.IsNotNull(result);
                Assert.AreNotEqual(result.Count, 0);

                Debug.WriteLine("Number of returned VetSamplePCR types: " + result.Count, "Result");
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message, "Exception");
                throw;
            }
            finally
            {
                if (client.State != CommunicationState.Faulted)
                {
                    client.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.ClassificationEntityService.GetAnimalTransferTypeCollection(DLBR.DCF.KDB.MessageContracts.GetAnimalTransferTypeCollectionRequest)">
      <summary>
        <h1>Functional Description</h1>
            Gets a collection of AnimalTransferType classification code entities.
            <h1>Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>AnimalCollection</td><td>A collection of the <see cref="T:DLBR.DCF.KDB.DataContracts.AnimalTransferType" /> objects found.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetAnimalTransferTypeCollectionRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetAnimalTransferTypeCollectionResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>Method GetAnimalTransferTypeCollection not found in class ..\tests\DLBR.DCF.KDB.IntegrationTests\ClassificationEntityServiceIntegrationTest.cs</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.ClassificationEntityService.GetTransferCauseCollection(DLBR.DCF.KDB.MessageContracts.GetTransferCauseCollectionRequest)">
      <summary>
        <h1>Functional Description</h1>
            Gets a collection of TransferCause classification code entities.
            <h1>Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>AnimalCollection</td><td>A collection of the <see cref="T:DLBR.DCF.KDB.DataContracts.TransferCause" /> objects found.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetTransferCauseCollectionRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetTransferCauseCollectionResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>Method GetTransferCauseCollection not found in class ..\tests\DLBR.DCF.KDB.IntegrationTests\ClassificationEntityServiceIntegrationTest.cs</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.ClassificationEntityService.GetWeighingTypeCollection(DLBR.DCF.KDB.MessageContracts.GetWeighingTypeCollectionRequest)">
      <summary>
        <h1>Functional Description</h1>
            Gets a collection of WeighingType classification code entities.
            <h1>Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>AnimalCollection</td><td>A collection of the <see cref="T:DLBR.DCF.KDB.DataContracts.WeighingType" /> objects found.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetWeighingTypeCollectionRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetWeighingTypeCollectionResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>Method GetWeighingTypeCollection not found in class ..\tests\DLBR.DCF.KDB.IntegrationTests\ClassificationEntityServiceIntegrationTest.cs</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.ClassificationEntityService.GetWeighingMethodCollection(DLBR.DCF.KDB.MessageContracts.GetWeighingMethodCollectionRequest)">
      <summary>
        <h1>Functional Description</h1>
            Gets a collection of WeighingMethod classification code entities.
            <h1>Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>AnimalCollection</td><td>A collection of the <see cref="T:DLBR.DCF.KDB.DataContracts.WeighingMethod" /> objects found.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetWeighingMethodCollectionRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetWeighingMethodCollectionResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>Method GetWeighingMethodCollection not found in class ..\tests\DLBR.DCF.KDB.IntegrationTests\ClassificationEntityServiceIntegrationTest.cs</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.ClassificationEntityService.GetInsOwnerCategoryCollection(DLBR.DCF.KDB.MessageContracts.GetInsOwnerCategoryCollectionRequest)">
      <summary>
        <h1>Functional Description</h1>
            Gets a collection of InsOwnerCategory classification code entities.
            <h1>Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>AnimalCollection</td><td>A collection of the <see cref="T:DLBR.DCF.KDB.DataContracts.InsOwnerCategory" /> objects found.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetInsOwnerCategoryCollectionRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetInsOwnerCategoryCollectionResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>Method GetInsOwnerCategoryCollection not found in class ..\tests\DLBR.DCF.KDB.IntegrationTests\ClassificationEntityServiceIntegrationTest.cs</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.ClassificationEntityService.GetMilkRecordingNoteCollection(DLBR.DCF.KDB.MessageContracts.GetMilkRecordingNoteCollectionRequest)">
      <summary>
        <h1>Functional Description</h1>
            Gets a collection of MilkRecordingNote classification code entities.
            <h1>Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>AnimalCollection</td><td>A collection of the <see cref="T:DLBR.DCF.KDB.DataContracts.MilkRecordings.MilkRecordingNote" /> objects found.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetMilkRecordingNoteCollectionRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetMilkRecordingNoteCollectionResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>Method GetMilkRecordingNoteCollection not found in class ..\tests\DLBR.DCF.KDB.IntegrationTests\ClassificationEntityServiceIntegrationTest.cs</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.ClassificationEntityService.GetCullingTypeCollection(DLBR.DCF.KDB.MessageContracts.GetCullingTypeCollectionRequest)">
      <summary>
        <h1>Functional Description</h1>
            Gets a collection of CullingType classification code entities.
            <h1>Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>AnimalCollection</td><td>A collection of the <see cref="T:DLBR.DCF.KDB.DataContracts.CullingType" /> objects found.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetCullingTypeCollectionRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetCullingTypeCollectionResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>Method GetCullingTypeCollection not found in class ..\tests\DLBR.DCF.KDB.IntegrationTests\ClassificationEntityServiceIntegrationTest.cs</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.ClassificationEntityService.GetHerdRemarkTypeCollection(DLBR.DCF.KDB.MessageContracts.GetHerdRemarkTypeCollectionRequest)">
      <summary>
        <h1>Functional Description</h1>
            Gets a collection of HerdRemarkType classification code entities.
            <h1>Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>AnimalCollection</td><td>A collection of the <see cref="T:DLBR.DCF.KDB.DataContracts.HerdRemarkType" /> objects found.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetHerdRemarkTypeCollectionRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetHerdRemarkTypeCollectionResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>Method GetHerdRemarkTypeCollection not found in class ..\tests\DLBR.DCF.KDB.IntegrationTests\ClassificationEntityServiceIntegrationTest.cs</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.ClassificationEntityService.GetDiseaseTypeCollection(DLBR.DCF.KDB.MessageContracts.GetDiseaseTypeCollectionRequest)">
      <summary>
        <h1>Functional Description</h1>
            Gets a collection of DiseaseType classification code entities.
            <h1>Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>AnimalCollection</td><td>A collection of the <see cref="T:DLBR.DCF.KDB.DataContracts.DiseaseType" /> objects found.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetDiseaseTypeCollectionRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetDiseaseTypeCollectionResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>Method GetDiseaseTypeCollection not found in class ..\tests\DLBR.DCF.KDB.IntegrationTests\ClassificationEntityServiceIntegrationTest.cs</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.ClassificationEntityService.GetDiseaseSiteCollection(DLBR.DCF.KDB.MessageContracts.GetDiseaseSiteCollectionRequest)">
      <summary>
        <h1>Functional Description</h1>
            Gets a collection of DiseaseSite classification code entities.
            <h1>Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>AnimalCollection</td><td>A collection of the <see cref="T:DLBR.DCF.KDB.DataContracts.DiseaseSite" /> objects found.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetDiseaseSiteCollectionRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetDiseaseSiteCollectionResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>Method GetDiseaseSiteCollection not found in class ..\tests\DLBR.DCF.KDB.IntegrationTests\ClassificationEntityServiceIntegrationTest.cs</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.ClassificationEntityService.GetDiseaseCharacteristicCollection(DLBR.DCF.KDB.MessageContracts.GetDiseaseCharacteristicCollectionRequest)">
      <summary>
        <h1>Functional Description</h1>
            Gets a collection of DiseaseCharacteristic classification code entities.
            <h1>Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>AnimalCollection</td><td>A collection of the <see cref="T:DLBR.DCF.KDB.DataContracts.DiseaseCharacteristic" /> objects found.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetDiseaseCharacteristicCollectionRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetDiseaseCharacteristicCollectionResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>Method GetDiseaseCharacteristicCollection not found in class ..\tests\DLBR.DCF.KDB.IntegrationTests\ClassificationEntityServiceIntegrationTest.cs</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.ClassificationEntityService.GetDiseaseTreatmentMethodCollection(DLBR.DCF.KDB.MessageContracts.GetDiseaseTreatmentMethodCollectionRequest)">
      <summary>
        <h1>Functional Description</h1>
            Gets a collection of DiseaseTreatmentMethod classification code entities.
            <h1>Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>AnimalCollection</td><td>A collection of the <see cref="T:DLBR.DCF.KDB.DataContracts.DiseaseTreatmentMethod" /> objects found.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetDiseaseTreatmentMethodCollectionRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetDiseaseTreatmentMethodCollectionResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>Method GetDiseaseTreatmentMethodCollection not found in class ..\tests\DLBR.DCF.KDB.IntegrationTests\ClassificationEntityServiceIntegrationTest.cs</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.ClassificationEntityService.GetDiseaseSeverityCollection(DLBR.DCF.KDB.MessageContracts.GetDiseaseSeverityCollectionRequest)">
      <summary>
        <h1>Functional Description</h1>
            Gets a collection of DiseaseSeverity classification code entities.
            <h1>Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>AnimalCollection</td><td>A collection of the <see cref="T:DLBR.DCF.KDB.DataContracts.DiseaseSeverity" /> objects found.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetDiseaseSeverityCollectionRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetDiseaseSeverityCollectionResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>Method GetDiseaseSeverityCollection not found in class ..\tests\DLBR.DCF.KDB.IntegrationTests\ClassificationEntityServiceIntegrationTest.cs</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.ClassificationEntityService.GetClinicalParameterCollection(DLBR.DCF.KDB.MessageContracts.GetClinicalParameterCollectionRequest)">
      <summary>
        <h1>Functional Description</h1>
            Gets a collection of ClinicalParameter classification code entities.
            <h1>Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>AnimalCollection</td><td>A collection of the <see cref="T:DLBR.DCF.KDB.DataContracts.ClinicalParameter" /> objects found.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetClinicalParameterCollectionRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetClinicalParameterCollectionResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>Method GetClinicalParameterCollection not found in class ..\tests\DLBR.DCF.KDB.IntegrationTests\ClassificationEntityServiceIntegrationTest.cs</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.ClassificationEntityService.GetInternalAnimalIdentifierTypeCollection(DLBR.DCF.KDB.MessageContracts.GetInternalAnimalIdentifierTypeRequest)">
      <summary>
        <h1>Functional Description</h1>
            Gets a collection of InternalAnimalIdentifierType classification code entities.
            <h1>Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>AnimalCollection</td><td>A collection of the <see cref="T:DLBR.DCF.KDB.DataContracts.InternalAnimalIdentifierType" /> objects found.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetInternalAnimalIdentifierTypeRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetInternalAnimalIdentifierTypeResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>Method GetInternalAnimalIdentifierTypeCollection not found in class ..\tests\DLBR.DCF.KDB.IntegrationTests\ClassificationEntityServiceIntegrationTest.cs</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.ClassificationEntityService.GetDrugCollection(DLBR.DCF.KDB.MessageContracts.GetDrugCollectionRequest)">
      <summary>
        <h1>Functional Description</h1>
            Gets a collection of Drug classification code entities.
            <h1>Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>AnimalCollection</td><td>A collection of the <see cref="T:DLBR.DCF.KDB.DataContracts.Drug" /> objects found.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetDrugCollectionRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetDrugCollectionResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>Method GetDrugCollection not found in class ..\tests\DLBR.DCF.KDB.IntegrationTests\ClassificationEntityServiceIntegrationTest.cs</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.ClassificationEntityService.GetDrugUsageCollection(DLBR.DCF.KDB.MessageContracts.GetDrugUsageCollectionRequest)">
      <summary>
        <h1>Functional Description</h1>
            Gets a collection of DrugUsage classification code entities.
            <h1>Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>AnimalCollection</td><td>A collection of the <see cref="T:DLBR.DCF.KDB.DataContracts.DrugUsage" /> objects found.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetDrugUsageCollectionRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetDrugUsageCollectionResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>Method GetDrugUsageCollection not found in class ..\tests\DLBR.DCF.KDB.IntegrationTests\ClassificationEntityServiceIntegrationTest.cs</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.ClassificationEntityService.GetDrugUnitCollection(DLBR.DCF.KDB.MessageContracts.GetDrugUnitCollectionRequest)">
      <summary>
        <h1>Functional Description</h1>
            Gets a collection of DrugUnit classification code entities.
            <h1>Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>AnimalCollection</td><td>A collection of the <see cref="T:DLBR.DCF.KDB.DataContracts.DrugUnit" /> objects found.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetDrugUnitCollectionRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetDrugUnitCollectionResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>Method GetDrugUnitCollection not found in class ..\tests\DLBR.DCF.KDB.IntegrationTests\ClassificationEntityServiceIntegrationTest.cs</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.ClassificationEntityService.GetAnimalGroupCollection(DLBR.DCF.KDB.MessageContracts.GetAnimalGroupCollectionRequest)">
      <summary>
        <h1>Functional Description</h1>
            Gets a collection of AnimalGroup classification code entities.
            <h1>Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>AnimalCollection</td><td>A collection of the <see cref="T:DLBR.DCF.KDB.DataContracts.AnimalGroup" /> objects found.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetAnimalGroupCollectionRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetAnimalGroupCollectionResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>Method GetAnimalGroupCollection not found in class ..\tests\DLBR.DCF.KDB.IntegrationTests\ClassificationEntityServiceIntegrationTest.cs</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.ClassificationEntityService.GetPrescriptionGroupCollection(DLBR.DCF.KDB.MessageContracts.GetPrescriptionGroupCollectionRequest)">
      <summary>
        <h1>Functional Description</h1>
            Gets a collection of PrescriptionGroup classification code entities.
            <h1>Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>AnimalCollection</td><td>A collection of the <see cref="T:DLBR.DCF.KDB.DataContracts.PrescriptionGroup" /> objects found.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetPrescriptionGroupCollectionRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetPrescriptionGroupCollectionResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>Method GetPrescriptionGroupCollection not found in class ..\tests\DLBR.DCF.KDB.IntegrationTests\ClassificationEntityServiceIntegrationTest.cs</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.ClassificationEntityService.GetMeatRetentionUnitCollection(DLBR.DCF.KDB.MessageContracts.GetMeatRetentionUnitCollectionRequest)">
      <summary>
        <h1>Functional Description</h1>
            Gets a collection of MeatRetentionUnit classification code entities.
            <h1>Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>AnimalCollection</td><td>A collection of the <see cref="T:DLBR.DCF.KDB.DataContracts.MeatRetentionUnit" /> objects found.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetMeatRetentionUnitCollectionRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetMeatRetentionUnitCollectionResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>Method GetMeatRetentionUnitCollection not found in class ..\tests\DLBR.DCF.KDB.IntegrationTests\ClassificationEntityServiceIntegrationTest.cs</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.ClassificationEntityService.GetMilkRetentionUnitCollection(DLBR.DCF.KDB.MessageContracts.GetMilkRetentionUnitCollectionRequest)">
      <summary>
        <h1>Functional Description</h1>
            Gets a collection of MilkRetentionUnit classification code entities.
            <h1>Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>AnimalCollection</td><td>A collection of the <see cref="T:DLBR.DCF.KDB.DataContracts.MilkRetentionUnit" /> objects found.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetMilkRetentionUnitCollectionRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetMilkRetentionUnitCollectionResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>Method GetMilkRetentionUnitCollection not found in class ..\tests\DLBR.DCF.KDB.IntegrationTests\ClassificationEntityServiceIntegrationTest.cs</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.ClassificationEntityService.GetEarmarkColorTypeCollection(DLBR.DCF.KDB.MessageContracts.GetEarmarkColorTypeCollectionRequest)">
      <summary>
        <h1>Functional Description</h1>
            Gets a collection of EarmarkColorType classification code entities.
            <h1>Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>AnimalCollection</td><td>A collection of the <see cref="T:DLBR.DCF.KDB.DataContracts.EarmarkColorType" /> objects found.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetEarmarkColorTypeCollectionRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetEarmarkColorTypeCollectionResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>Method GetEarmarkColorTypeCollection not found in class ..\tests\DLBR.DCF.KDB.IntegrationTests\ClassificationEntityServiceIntegrationTest.cs</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.ClassificationEntityService.GetEarmarkManufacturerTypeCollection(DLBR.DCF.KDB.MessageContracts.GetEarmarkManufacturerTypeCollectionRequest)">
      <summary>
        <h1>Functional Description</h1>
            Gets a collection of EarmarkManufacturerType classification code entities.
            <h1>Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>AnimalCollection</td><td>A collection of the <see cref="T:DLBR.DCF.KDB.DataContracts.EarmarkManufacturerType" /> objects found.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetEarmarkManufacturerTypeCollectionRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetEarmarkManufacturerTypeCollectionResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>Method GetEarmarkManufacturerTypeCollection not found in class ..\tests\DLBR.DCF.KDB.IntegrationTests\ClassificationEntityServiceIntegrationTest.cs</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.ClassificationEntityService.GetEarmarkOptionalTextTypeCollection(DLBR.DCF.KDB.MessageContracts.GetEarmarkOptionalTextTypeCollectionRequest)">
      <summary>
        <h1>Functional Description</h1>
            Gets a collection of EarmarkOptionalTextType classification code entities.
            <h1>Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>AnimalCollection</td><td>A collection of the <see cref="T:DLBR.DCF.KDB.DataContracts.EarmarkOptionalTextType" /> objects found.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetEarmarkOptionalTextTypeCollectionRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetEarmarkOptionalTextTypeCollectionResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>Method GetEarmarkOptionalTextTypeCollection not found in class ..\tests\DLBR.DCF.KDB.IntegrationTests\ClassificationEntityServiceIntegrationTest.cs</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.ClassificationEntityService.GetEarmarkArticleTypeCollection(DLBR.DCF.KDB.MessageContracts.GetEarmarkArticleTypeCollectionRequest)">
      <summary>
        <h1>Functional Description</h1>
            Gets a collection of EarmarkArticleType classification code entities.
            <h1>Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>AnimalCollection</td><td>A collection of the <see cref="T:DLBR.DCF.KDB.DataContracts.EarmarkArticleType" /> objects found.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetEarmarkArticleTypeCollectionRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetEarmarkArticleTypeCollectionResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>Method GetEarmarkArticleTypeCollection not found in class ..\tests\DLBR.DCF.KDB.IntegrationTests\ClassificationEntityServiceIntegrationTest.cs</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.ClassificationEntityService.GetPostingTypeCollection(DLBR.DCF.KDB.MessageContracts.GetPostingTypeCollectionRequest)">
      <summary>
        <h1>Functional Description</h1>
            Gets a collection of PostingType classification code entities.
            <h1>Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>AnimalCollection</td><td>A collection of the <see cref="T:DLBR.DCF.KDB.DataContracts.PostingType" /> objects found.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetPostingTypeCollectionRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetPostingTypeCollectionResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            ClassificationEntityServiceContractClient client = new ClassificationEntityServiceContractClient("ClassificationEntityService");

            try
            {
                if (client.ClientCredentials != null)
                {
                    client.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                    client.ClientCredentials.UserName.Password = TestUtil.PASSWORD;
                }

                PostingTypeCollection result = client.GetPostingTypeCollection();

                Assert.IsNotNull(result);
                Assert.AreNotEqual(result.Count, 0);

                Debug.WriteLine("Number of returned Posting types: " + result.Count, "Result");
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message, "Exception");
                throw;
            }
            finally
            {
                if (client.State != CommunicationState.Faulted)
                {
                    client.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.ClassificationEntityService.GetInseminatorTimeRecordPartCollection(DLBR.DCF.KDB.MessageContracts.GetInseminatorTimeRecordPartCollectionRequest)">
      <summary>
        <h1>Functional Description</h1>
            Gets a collection of InseminatorTimeRecordPart classification code entities.
            <h1>Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>AnimalCollection</td><td>A collection of the <see cref="T:DLBR.DCF.KDB.DataContracts.InseminatorTimeRecordPart" /> objects found.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetInseminatorTimeRecordPartCollectionRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetInseminatorTimeRecordPartCollectionResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>Method GetInseminatorTimeRecordPartCollection not found in class ..\tests\DLBR.DCF.KDB.IntegrationTests\ClassificationEntityServiceIntegrationTest.cs</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.ClassificationEntityService.GetInseminatorHomeTimeCollection(DLBR.DCF.KDB.MessageContracts.GetInseminatorHomeTimeCollectionRequest)">
      <summary>
        <h1>Functional Description</h1>
            Gets a collection of HomeTime classification code entities.
            <h1>Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>AnimalCollection</td><td>A collection of the <see cref="T:DLBR.DCF.KDB.DataContracts.HomeTime" /> objects found.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetInseminatorHomeTimeCollectionRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetInseminatorHomeTimeCollectionResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>Method GetInseminatorHomeTimeCollection not found in class ..\tests\DLBR.DCF.KDB.IntegrationTests\ClassificationEntityServiceIntegrationTest.cs</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.ClassificationEntityService.GetManagementUnitTypeCollection(DLBR.DCF.KDB.MessageContracts.GetManagementUnitTypeCollectionRequest)">
      <summary>
        <h1>Functional Description</h1>
            Gets a collection of ManagementUnitType classification code entities.
            <h1>Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>ManagementUnitTypeCollection</td><td>A collection of the <see cref="T:DLBR.DCF.KDB.DataContracts.ManagementUnitType" /> objects found.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetManagementUnitTypeCollectionRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetManagementUnitTypeCollectionResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>Method GetManagementUnitTypeCollection not found in class ..\tests\DLBR.DCF.KDB.IntegrationTests\ClassificationEntityServiceIntegrationTest.cs</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.ClassificationEntityService.GetCollections(DLBR.DCF.KDB.MessageContracts.GetCollectionsRequest)">
      <summary>
        <h1>Functional Description</h1>
            Gets a collection of all classification types
            <h1>Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>AnimalCollection</td><td>A collection of all collection types.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetCollectionsRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetCollectionsResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            ClassificationEntityServiceContractClient client = new ClassificationEntityServiceContractClient("ClassificationEntityService");
            ClassificationEntityServiceContract contract = client;

            try
            {
                if (client.ClientCredentials != null)
                {
                    client.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                    client.ClientCredentials.UserName.Password = TestUtil.PASSWORD;
                }

                GetCollectionsRequest request = new GetCollectionsRequest
                    {
                        GetAdvisorTypeCollection = true,
                        GetAnimalColorCollection = true,
                        GetAnimalOriginCollection = true,
                        GetAnimalRaceCollection = true,
                        GetAnimalSizeCollection = true,
                        GetAnimalStatusCollection = true,
                        GetAnimalTransferTypeCollection = true,
                        GetAnimalTypeCollection = true,
                        GetCalvingOutcomeCollection = true,
                        GetCalvingProgressCollection = true,
                        GetGenderCollection = true,
                        GetHerdTypeCollection = true,
                        GetInseminationProductCollection = true,
                        GetInseminationTreatmentCodeCollection = true,
                        GetNationalityCollection = true,
                        GetTransferCauseCollection = true,
                        GetTwinCodeCollection = true,
                        GetVetSampleTypeCollection = true,
                        GetVetSamplePCRTypeCollection = true,
                        GetWeighingMethodCollection = true,
                        GetWeighingTypeCollection = true,
                        GetInsOwnerCategoryCollection = true,
                        GetMilkRecordingNoteCollection = true,
                        GetCullingTypeCollection = true,
                        GetDiseaseTypeCollection = true,
                        GetDiseaseSiteCollection = true,
                        GetDiseaseCharacteristicCollection = true,
                        GetDiseaseTreatmentMethodCollection = true,
                        GetDiseaseSeverityCollection = true,
                        GetClinicalParameterCollection = true,
                        GetInternalAnimalIdentifierTypeCollection = true,
                        GetDrugCollection = true,
                        GetDrugUsageCollection = true,
                        GetDrugUnitCollection = true,
                        GetAnimalGroupCollection = true,
                        GetPrescriptionGroupCollection = true,
                        GetMeatRetentionUnitCollection = true,
                        GetMilkRetentionUnitCollection = true,
                        GetEarmarkOptionalTextTypeCollection = true,
                        GetEarmarkColorTypeCollection = true,
                        GetEarmarkManufacturerTypeCollection = true,
                        GetEarmarkArticleTypeCollection = true, 
                        GetInseminatorHomeTimeCollection = true,
                        GetManagementUnitTypesCollection = true,
                    };

                GetCollectionsResponse response = contract.GetCollections(request);

                Assert.IsNotNull(response);

                Assert.IsNotNull(response.AdvisorTypeCollection);
                Assert.AreNotEqual(response.AdvisorTypeCollection.Count, 0);

                Assert.IsNotNull(response.AnimalColorCollection);
                Assert.AreNotEqual(response.AnimalColorCollection.Count, 0);

                Assert.IsNotNull(response.AnimalOriginCollection);
                Assert.AreNotEqual(response.AnimalOriginCollection.Count, 0);

                Assert.IsNotNull(response.AnimalRaceCollection);
                Assert.AreNotEqual(response.AnimalRaceCollection.Count, 0);

                Assert.IsNotNull(response.AnimalSizeCollection);
                Assert.AreNotEqual(response.AnimalSizeCollection.Count, 0);

                Assert.IsNotNull(response.AnimalStatusCollection);
                Assert.AreNotEqual(response.AnimalStatusCollection.Count, 0);

                Assert.IsNotNull(response.AnimalTransferTypeCollection);
                Assert.AreNotEqual(response.AnimalTransferTypeCollection.Count, 0);

                Assert.IsNotNull(response.AnimalTypeCollection);
                Assert.AreNotEqual(response.AnimalTypeCollection.Count, 0);

                Assert.IsNotNull(response.CalvingOutcomeCollection);
                Assert.AreNotEqual(response.CalvingOutcomeCollection.Count, 0);

                Assert.IsNotNull(response.CalvingProgressCollection);
                Assert.AreNotEqual(response.CalvingProgressCollection.Count, 0);

                Assert.IsNotNull(response.GenderCollection);
                Assert.AreNotEqual(response.GenderCollection.Count, 0);

                Assert.IsNotNull(response.HerdTypeCollection);
                Assert.AreNotEqual(response.HerdTypeCollection.Count, 0);

                Assert.IsNotNull(response.InseminationProductCollection);
                Assert.AreNotEqual(response.InseminationProductCollection.Count, 0);

                Assert.IsNotNull(response.InseminationTreatmentCodeCollection);
                Assert.AreNotEqual(response.InseminationTreatmentCodeCollection.Count, 0);

                Assert.IsNotNull(response.NationalityCollection);
                Assert.AreNotEqual(response.NationalityCollection.Count, 0);

                Assert.IsNotNull(response.TransferCauseCollection);
                Assert.AreNotEqual(response.TransferCauseCollection.Count, 0);

                Assert.IsNotNull(response.TwinCodeCollection);
                Assert.AreNotEqual(response.TwinCodeCollection.Count, 0);

                Assert.IsNotNull(response.VetSampleTypeCollection);
                Assert.AreNotEqual(response.VetSampleTypeCollection.Count, 0);

                Assert.IsNotNull(response.VetSamplePCRTypeCollection);
                Assert.AreNotEqual(response.VetSamplePCRTypeCollection.Count, 0);

                Assert.IsNotNull(response.WeighingMethodCollection);
                Assert.AreNotEqual(response.WeighingMethodCollection.Count, 0);

                Assert.IsNotNull(response.WeighingTypeCollection);
                Assert.AreNotEqual(response.WeighingMethodCollection.Count, 0);

                Assert.IsNotNull(response.InsOwnerCategoryCollection);
                Assert.AreNotEqual(response.InsOwnerCategoryCollection.Count, 0);

                Assert.IsNotNull(response.MilkRecordingNoteCollection);
                Assert.AreNotEqual(response.MilkRecordingNoteCollection.Count, 0);

                Assert.IsNotNull(response.CullingTypeCollection);
                Assert.AreNotEqual(response.CullingTypeCollection.Count, 0);

                Assert.IsNotNull(response.DiseaseTypeCollection);
                Assert.AreNotEqual(response.DiseaseTypeCollection.Count, 0);

                Assert.IsNotNull(response.DiseaseSiteCollection);
                Assert.AreNotEqual(response.DiseaseSiteCollection.Count, 0);

                Assert.IsNotNull(response.DiseaseCharacteristicCollection);
                Assert.AreNotEqual(response.DiseaseCharacteristicCollection.Count, 0);

                Assert.IsNotNull(response.DiseaseTreatmentMethodCollection);
                Assert.AreNotEqual(response.DiseaseTreatmentMethodCollection.Count, 0);

                Assert.IsNotNull(response.DiseaseSeverityCollection);
                Assert.AreNotEqual(response.DiseaseSeverityCollection.Count, 0);

                Assert.IsNotNull(response.ClinicalParameterCollection);
                Assert.AreNotEqual(response.ClinicalParameterCollection.Count, 0);

                Assert.IsNotNull(response.InternalAnimalIdentifierTypeCollection);
                Assert.AreNotEqual(response.InternalAnimalIdentifierTypeCollection.Count, 0);

                Assert.IsNotNull(response.DrugCollection);
                Assert.AreNotEqual(response.DrugCollection.Count, 0);

                Assert.IsNotNull(response.DrugUsageCollection);
                Assert.AreNotEqual(response.DrugUsageCollection.Count, 0);

                Assert.IsNotNull(response.DrugUnitCollection);
                Assert.AreNotEqual(response.DrugUnitCollection.Count, 0);

                Assert.IsNotNull(response.AnimalGroupCollection);
                Assert.AreNotEqual(response.AnimalGroupCollection.Count, 0);

                Assert.IsNotNull(response.PrescriptionGroupCollection);
                Assert.AreNotEqual(response.PrescriptionGroupCollection.Count, 0);

                Assert.IsNotNull(response.MeatRetentionUnitCollection);
                Assert.AreNotEqual(response.MeatRetentionUnitCollection.Count, 0);

                Assert.IsNotNull(response.MilkRetentionUnitCollection);
                Assert.AreNotEqual(response.MilkRetentionUnitCollection.Count, 0);

                Assert.IsNotNull(response.EarmarkOptionalTextTypeCollection);
                Assert.AreNotEqual(response.EarmarkOptionalTextTypeCollection.Count, 0);

                Assert.IsNotNull(response.EarmarkColorTypeCollection);
                Assert.AreNotEqual(response.EarmarkColorTypeCollection.Count, 0);

                Assert.IsNotNull(response.EarmarkManufacturerTypeCollection);
                Assert.AreNotEqual(response.EarmarkManufacturerTypeCollection.Count, 0);

                Assert.IsNotNull(response.EarmarkArticleTypeCollection);
                Assert.AreNotEqual(response.EarmarkArticleTypeCollection.Count, 0);

                response.InseminatorHomeTimeCollection.Should().NotBeNull().And.NotBeEmpty();

                response.ManagementUnitTypeCollection.Should().NotBeNull().And.NotBeEmpty();
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message, "Exception");
                throw;
            }
            finally
            {
                if (client.State != CommunicationState.Faulted)
                {
                    client.Close();
                }
            }
</code></example>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.ClinicalRecordingEntityService">
      <summary>
        <h1>General</h1>
        <p>
            The following URIs specifies the location of the service in the production- and production test environment. 
            By default services in both the production and the production test environment uses the production data stores. The alternative URIs, which uses the test data stores (Medio), may be used for testing purposes.
            Please note that service versions might differ between the production- and production test environments. Before you begin using the service, please consult the person responsible as described in section 3.7 – Responsibility assignment.
            </p>
        <p>
          <b>Production URL:</b>
          <a href="http://prod.dcf.ws.dlbr.dk/DCFServices/ClinicalRecordingEntityService.svc">http://prod.dcf.ws.dlbr.dk/DCFServices/ClinicalRecordingEntityService.svc</a>
        </p>
        <p>
          <b>Accept test URL:</b>
          <a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/ClinicalRecordingEntityService.svc">http://accepttest.dcf.ws.dlbr.dk/DCFServices/ClinicalRecordingEntityService.svc</a>
        </p>
        <h1>Web Service Description</h1>
            The machine-readable description in the form of a WSDL document can be obtained by querying the following URI’s.
            <p><b>Production WSDL:</b><a href="http://prod.dcf.ws.dlbr.dk/DCFServices/ClinicalRecordingEntityService.svc?wsdl">http://prod.dcf.ws.dlbr.dk/DCFServices/ClinicalRecordingEntityService.svc?wsdl</a></p><p><b>Accept test WSDL:</b><a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/ClinicalRecordingEntityService.svc?wsdl">http://accepttest.dcf.ws.dlbr.dk/DCFServices/ClinicalRecordingEntityService.svc?wsdl</a></p><h1>Endpoints</h1>
            For information regarding endpoints, see topic 'Endpoints available in DCF Services'
            </summary>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.ClinicalRecordingEntityServiceBase">
      <summary>
            Service Class - ClinicalRecordingEntityService
            </summary>
      <tocexclude />
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.ClinicalRecordingEntityService.GetClinicalRecordingById(DLBR.DCF.KDB.MessageContracts.GetClinicalRecordingByIdRequest)">
      <summary>
        <h1>Functional Description</h1>
            Gets a single ClinicalRecording by the technical ClinicalRecordingId.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>ClinicalRecordingId</td><td>yes</td><td>&gt;0</td><td>The id of the ClinicalRecording to read.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>ClinicalRecording</td><td>The ClinicalRecording entity. If the entity is not found, this value is null.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetClinicalRecordingByIdRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetClinicalRecordingByIdResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            long clinicalRecordingId = 12420897;

            ClinicalRecordingEntityServiceContractClient proxy = new ClinicalRecordingEntityServiceContractClient("ClinicalRecordingEntityService_Federation_Adfs");
            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID_FARMER;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD_FARMER;

                ClinicalRecording result = proxy.GetClinicalRecordingById(clinicalRecordingId);

                Assert.IsNotNull(result);
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.ClinicalRecordingEntityService.FindClinicalRecordingsByAnimalNumber(DLBR.DCF.KDB.MessageContracts.FindClinicalRecordingsByAnimalNumberRequest)">
      <summary>
        <h1>Functional Description</h1>
            Finds a number of ClinicalRecordings by animal number.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>AnimalNumber</td><td>yes</td><td>&gt;0</td><td>The animal number from which to find ClinicalRecordings.</td></tr><tr><td>ClinicalParameter</td><td></td><td></td><td>If specified the operation only returns ClinicalRecordings with the ClinicalParameter specified. If not specified all ClinicalRecordings on the specified animal is returned.</td></tr><tr><td>FromDate</td><td>(yes)</td><td></td><td>If specified only ClinicalRecordings performed after the specified date is returned. If not specified all ClinicalRecordings matching the other criteria’s is returned. If this parameter is set also the “ToDate” must be set. </td></tr><tr><td>ToDate</td><td>(yes)</td><td></td><td>If specified only ClinicalRecordings performed before the specified date is returned. This parameter is required if “FromDate” is specified. If not specified all ClinicalRecordings matching the other criteria’s is returned for each animal. </td></tr><tr><td>RequestedCount</td><td></td><td></td><td>If specified the operation only returns the specified number of ClinicalRecordings, sorted by date. If not specified all ClinicalRecordings matching the other criteria’s is returned for each animal. </td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>ClinicalRecordingCollection</td><td>A collection of ClinicalRecording</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindClinicalRecordingsByAnimalNumberRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindClinicalRecordingsByAnimalNumberResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            ClinicalRecordingEntityServiceContractClient proxy = new ClinicalRecordingEntityServiceContractClient("ClinicalRecordingEntityService");

            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID_FARMER;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD_FARMER;

                ClinicalRecordingCollection result = proxy.FindClinicalRecordingsByAnimalNumber(m_cowAnimalNumberWithClinicalRecording, null, null, null, null);

                Assert.IsNotNull(result);
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.ClinicalRecordingEntityService.FindClinicalRecordingsByHerdNumber(DLBR.DCF.KDB.MessageContracts.FindClinicalRecordingsByHerdNumberRequest)">
      <summary>
        <h1>Functional Description</h1>
            Finds a number of ClinicalRecordings by herd number. 
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>HerdNumber</td><td>yes</td><td>&gt;0</td><td>The herd number from which to find ClinicalRecordings.</td></tr><tr><td>AnimalType</td><td>yes</td><td></td><td>The type of animal, e.g. Cattle.</td></tr><tr><td>ClinicalParameter</td><td></td><td></td><td>If specified the operation only returns ClinicalRecordings with the ClinicalParameter specified for each animal in the herd.  If not specified all ClinicalRecordings matching the other criteria’s is returned for each animal in the herd specified. </td></tr><tr><td>FromDate</td><td>(yes)</td><td></td><td>If specified only ClinicalRecordings performed after the specified date is returned. If not specified all ClinicalRecordings matching the other criteria’s is returned for each animal in the herd specified. If this parameter is set also the “ToDate” must be set. </td></tr><tr><td>ToDate</td><td>(yes)</td><td></td><td>If specified only ClinicalRecordings performed before the specified date is returned. This parameter is required if “FromDate” is specified. </td></tr><tr><td>Advisor</td><td></td><td></td><td>If specified the operation only returns ClinicalRecordings with the Advisor specified for each animal in the herd. If not specified all ClinicalRecordings matching the other criteria’s is returned for each animal in the herd specified. </td></tr><tr><td>RequestedCount</td><td></td><td></td><td>If specified the operation only returns the specified number of ClinicalRecordings, sorted by date in decending order.  If not specified all ClinicalRecordings matching the other criteria’s is returned for each animal in the herd specified. </td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>ClinicalRecordingCollection</td><td>A collection of ClinicalRecording</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindClinicalRecordingsByHerdNumberRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindClinicalRecordingsByHerdNumberResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            ClinicalRecordingEntityServiceContractClient proxy = new ClinicalRecordingEntityServiceContractClient("ClinicalRecordingEntityService");
            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID_FARMER;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD_FARMER;

                AnimalType animalType = new AnimalType() { Code = 12 };

                ClinicalRecordingCollection result = proxy.FindClinicalRecordingsByHerdNumber(null, animalType, null, null, TestUtil.HERD_NUMBER, null, null);

                Assert.IsNotNull(result);
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.ClinicalRecordingEntityService.RegisterClinicalRecording(DLBR.DCF.KDB.MessageContracts.RegisterClinicalRecordingRequest)">
      <summary>
        <h1>Functional Description</h1>
            Registers a new ClinicalRecording, e.g. clinical parameter 1 “Body condition score”.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>AnimalNumber</td><td>yes</td><td>&gt;0</td><td>The number of the animal the clinical recording is related to.</td></tr><tr><td>AnimalType</td><td>yes</td><td></td><td>The type of animal, e.g. Cattle.</td></tr><tr><td>HerdNumber</td><td>yes</td><td>&gt;0</td><td>The herd number to which the animal belongs. </td></tr><tr><td>Date</td><td>yes</td><td></td><td>The date of the animal clinical recording. </td></tr><tr><td>ClinicalParameter</td><td>yes</td><td></td><td>The type of clinical parameter e.g. code 1 for “Body condition score”. </td></tr><tr><td>ClinicalValue</td><td></td><td></td><td>The value of the clinical recording, e.g. 3,25 as the numeric value of the clinical parameter “Body condition score”. The value has to be converted to a string. </td></tr><tr><td>Advisor</td><td></td><td></td><td>The advisor responsible for the clinical recording. </td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>ClinicalRecording</td><td>The newly registered ClinicalRecording entity.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.RegisterClinicalRecordingRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.RegisterClinicalRecordingResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            ClinicalRecordingEntityServiceContractClient proxy = new ClinicalRecordingEntityServiceContractClient("ClinicalRecordingEntityService");
            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID_FARMER;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD_FARMER;

                long herdNumber = TestUtil.HERD_NUMBER;
                long animalNumber = m_cowAnimalNumberWithClinicalRecording;
                AnimalType animalType = new AnimalType() { Code = 12 };
                ClinicalParameter clinicalParameter = new ClinicalParameter() { Code = 1 };

                double value = 3.25;

                string clinicalValue = value.ToString(System.Threading.Thread.CurrentThread.CurrentCulture);

                Advisor advisor = new Advisor() { AdvisorNumber = 1, AdvisorType = new AdvisorType() { Code = 5 } };

                DateTime clinicalRecordingDate = DateTime.Now.AddDays(-1);

                //Register
                ClinicalRecording ClinicalRecording = proxy.RegisterClinicalRecording(
                    advisor,
                    animalNumber,
                    animalType,
                    clinicalParameter,
                    clinicalValue,
                    clinicalRecordingDate,
                    herdNumber);

                Assert.IsNotNull(ClinicalRecording);

                //Update
                DateTime date = DateTime.Now.AddDays(-2);
                ClinicalRecording.Date = date;

                proxy.UpdateClinicalRecording(ref ClinicalRecording);

                Assert.IsNotNull(ClinicalRecording);
                Assert.AreEqual(date.Date, ClinicalRecording.Date.Date);

                //Delete
                proxy.DeleteClinicalRecording(ClinicalRecording);

            }
            catch (FaultException&lt;InvalidArgument&gt; ex)
            {
                Debug.WriteLine(ex.Message, "ClinicalRecordingEntityServiceTest.TestCRUD");
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.ClinicalRecordingEntityService.UpdateClinicalRecording(DLBR.DCF.KDB.MessageContracts.UpdateClinicalRecordingRequest)">
      <summary>
        <h1>Functional Description</h1>
            Updates an existing ClinicalRecording.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>ClinicalRecording</td><td>yes</td><td></td><td>The ClinicalRecording entity to update.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>ClinicalRecording</td><td>The newly updated ClinicalRecording entity.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.UpdateClinicalRecordingRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.UpdateClinicalRecordingResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            ClinicalRecordingEntityServiceContractClient proxy = new ClinicalRecordingEntityServiceContractClient("ClinicalRecordingEntityService");
            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID_FARMER;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD_FARMER;

                long herdNumber = TestUtil.HERD_NUMBER;
                long animalNumber = m_cowAnimalNumberWithClinicalRecording;
                AnimalType animalType = new AnimalType() { Code = 12 };
                ClinicalParameter clinicalParameter = new ClinicalParameter() { Code = 1 };

                double value = 3.25;

                string clinicalValue = value.ToString(System.Threading.Thread.CurrentThread.CurrentCulture);

                Advisor advisor = new Advisor() { AdvisorNumber = 1, AdvisorType = new AdvisorType() { Code = 5 } };

                DateTime clinicalRecordingDate = DateTime.Now.AddDays(-1);

                //Register
                ClinicalRecording ClinicalRecording = proxy.RegisterClinicalRecording(
                    advisor,
                    animalNumber,
                    animalType,
                    clinicalParameter,
                    clinicalValue,
                    clinicalRecordingDate,
                    herdNumber);

                Assert.IsNotNull(ClinicalRecording);

                //Update
                DateTime date = DateTime.Now.AddDays(-2);
                ClinicalRecording.Date = date;

                proxy.UpdateClinicalRecording(ref ClinicalRecording);

                Assert.IsNotNull(ClinicalRecording);
                Assert.AreEqual(date.Date, ClinicalRecording.Date.Date);

                //Delete
                proxy.DeleteClinicalRecording(ClinicalRecording);

            }
            catch (FaultException&lt;InvalidArgument&gt; ex)
            {
                Debug.WriteLine(ex.Message, "ClinicalRecordingEntityServiceTest.TestCRUD");
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.ClinicalRecordingEntityService.DeleteClinicalRecording(DLBR.DCF.KDB.MessageContracts.DeleteClinicalRecordingRequest)">
      <summary>
        <h1>Functional Description</h1>
            Deletes an existing ClinicalRecording.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>ClinicalRecording</td><td>yes</td><td></td><td>The ClinicalRecording entity to delete.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.DeleteClinicalRecordingRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.DeleteClinicalRecordingResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            ClinicalRecordingEntityServiceContractClient proxy = new ClinicalRecordingEntityServiceContractClient("ClinicalRecordingEntityService");
            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID_FARMER;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD_FARMER;

                long herdNumber = TestUtil.HERD_NUMBER;
                long animalNumber = m_cowAnimalNumberWithClinicalRecording;
                AnimalType animalType = new AnimalType() { Code = 12 };
                ClinicalParameter clinicalParameter = new ClinicalParameter() { Code = 1 };

                double value = 3.25;

                string clinicalValue = value.ToString(System.Threading.Thread.CurrentThread.CurrentCulture);

                Advisor advisor = new Advisor() { AdvisorNumber = 1, AdvisorType = new AdvisorType() { Code = 5 } };

                DateTime clinicalRecordingDate = DateTime.Now.AddDays(-1);

                //Register
                ClinicalRecording ClinicalRecording = proxy.RegisterClinicalRecording(
                    advisor,
                    animalNumber,
                    animalType,
                    clinicalParameter,
                    clinicalValue,
                    clinicalRecordingDate,
                    herdNumber);

                Assert.IsNotNull(ClinicalRecording);

                //Update
                DateTime date = DateTime.Now.AddDays(-2);
                ClinicalRecording.Date = date;

                proxy.UpdateClinicalRecording(ref ClinicalRecording);

                Assert.IsNotNull(ClinicalRecording);
                Assert.AreEqual(date.Date, ClinicalRecording.Date.Date);

                //Delete
                proxy.DeleteClinicalRecording(ClinicalRecording);

            }
            catch (FaultException&lt;InvalidArgument&gt; ex)
            {
                Debug.WriteLine(ex.Message, "ClinicalRecordingEntityServiceTest.TestCRUD");
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.BenchmarkService">
      <summary>
        <h1>General</h1>
        <p>
            The following URIs specifies the location of the service in the production- and production test environment. 
            By default services in both the production and the production test environment uses the production data stores. The alternative URIs, which uses the test data stores (Medio), may be used for testing purposes.
            Please note that service versions might differ between the production- and production test environments. Before you begin using the service, please consult the person responsible as described in section 3.7 – Responsibility assignment.
            </p>
        <p>
          <b>Production URL:</b>
          <a href="http://prod.dcf.ws.dlbr.dk/DCFServices/BenchmarkService.svc">http://prod.dcf.ws.dlbr.dk/DCFServices/BenchmarkService.svc</a>
        </p>
        <p>
          <b>Accept test URL:</b>
          <a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/BenchmarkService.svc">http://accepttest.dcf.ws.dlbr.dk/DCFServices/BenchmarkService.svc</a>
        </p>
        <h1>Web Service Description</h1>
            The machine-readable description in the form of a WSDL document can be obtained by querying the following URI’s.
            <p><b>Production WSDL:</b><a href="http://prod.dcf.ws.dlbr.dk/DCFServices/BenchmarkService.svc?wsdl">http://prod.dcf.ws.dlbr.dk/DCFServices/BenchmarkService.svc?wsdl</a></p><p><b>Accept test WSDL:</b><a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/BenchmarkService.svc?wsdl">http://accepttest.dcf.ws.dlbr.dk/DCFServices/BenchmarkService.svc?wsdl</a></p><h1>Endpoints</h1>
            For information regarding endpoints, see topic 'Endpoints available in DCF Services'
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.BenchmarkService.FindCriteriaByManagementUnit(DLBR.DCF.KDB.MessageContracts.BenchmarkService.FindCriteriaByManagementUnitRequest)">
      <summary>
        <h1>Functional Description</h1>
            Get list of criterias by managementUnit
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>ManagementUnitId</td><td>Yes</td><td>&gt;0</td><td>ManagementUnit to get criteria list from</td></tr><tr><td>ToDate</td><td>Yes</td><td></td><td>Date to get criteria list from</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>CriteriaCollection</td><td>Collection of the <see cref="T:DLBR.DCF.KDB.DataContracts.BenchmarkService.Criteria" /> entities</td></tr></table></summary>
      <param name="request">The byManagementUnitRequest object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.BenchmarkService.FindCriteriaByManagementUnitRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.BenchmarkService.FindCriteriaByManagementUnitResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            long managementUnitId = 32238;

            BenchmarkServiceContractClient client =
                new BenchmarkServiceContractClient("Benchmark_ADFS");
            try
            {
                client.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                client.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                CriteriaCollection result = client.FindCriteriaByManagementUnit(managementUnitId, DateTime.MaxValue);
                result.Should().NotBeNull();
                result.Should().NotBeEmpty();

            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message, "Exception");
                throw;
            }
            finally
            {
                if (client.State != CommunicationState.Faulted)
                {
                    client.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.BenchmarkService.FindBenchmarkNumbersByManagementUnit(DLBR.DCF.KDB.MessageContracts.BenchmarkService.FindBenchmarkNumbersByManagementUnitRequest)">
      <summary>
        <h1>Functional Description</h1>
            Get list of benchmark numbers by managementUnit
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>ManagementUnitId</td><td>Yes</td><td>&gt;0</td><td>ManagementUnit to get benchmark list from</td></tr><tr><td>CriteriaValueList</td><td>Yes</td><td></td><td>A list of selected criteria Id's</td></tr><tr><td>KpiList</td><td>Yes</td><td></td><td>A list of selected KPI Id's</td></tr><tr><td>ReportingPeriod</td><td>Yes</td><td></td><td>The selected reporting period</td></tr><tr><td>ToDate</td><td>Yes</td><td></td><td>To date in period</td></tr><tr><td>Fractile</td><td>Yes</td><td></td><td>Fractile</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>BenchmarkValueCollection</td><td> The resulting List of <see cref="T:DLBR.DCF.KDB.DataContracts.BenchmarkService.BenchmarkValue" /> entities</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.BenchmarkService.FindBenchmarkNumbersByManagementUnitRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.BenchmarkService.FindBenchmarkNumbersByManagementUnitResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            long managementUnitId = 32238;
            Collection&lt;long&gt; kpiList = new Collection&lt;long&gt;() { 13, 43, 85, 86, 87, 88, 89, 90, 91 };
            Collection&lt;long&gt; criteriaValueList = new Collection&lt;long&gt; { 4, 14, 16 };
            DateTime toDate = new DateTime(2012, 12, 31);
            Fractile fractile = Fractile.Fractile_10;

            BenchmarkServiceContractClient client =
                new BenchmarkServiceContractClient("Benchmark_ADFS");
            try
            {
                client.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                client.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                var result = client.FindBenchmarkNumbersByManagementUnit(criteriaValueList, fractile, kpiList, managementUnitId, ReportingPeriod.PreviousMonth, toDate);
                result.Should().NotBeNull();
                foreach (var row in result)
                {
                    Debug.WriteLine(row.OffsetPeriod);
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message, "Exception");
                throw;
            }
            finally
            {
                if (client.State != CommunicationState.Faulted)
                {
                    client.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.BenchmarkService.FindBenchmarkDetailsByManagementUnit(DLBR.DCF.KDB.MessageContracts.BenchmarkService.FindBenchmarkDetailsByManagementUnitRequest)">
      <summary>
        <h1>Functional Description</h1>
            Get list of benchmark details by managementUnit
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>ManagementUnitId</td><td>Yes</td><td></td><td>ManagementUnit to get benchmark detail list from</td></tr><tr><td>KpiId</td><td>Yes</td><td></td><td>The id of the KPI to get benchmark detail list from</td></tr><tr><td>ReportingPeriod</td><td>Yes</td><td></td><td>The period for the benchmark detail list</td></tr><tr><td>ToDate</td><td>Yes</td><td></td><td>The end date related to the reporting period</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>BenchmarkCollection</td><td>The resulting List of <see cref="T:DLBR.DCF.KDB.DataContracts.BenchmarkService.BenchmarkDetailValue" /> entities</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.BenchmarkService.FindBenchmarkDetailsByManagementUnitRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.BenchmarkService.FindBenchmarkDetailsByManagementUnitResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            long managementUnitId = 32238;
            DateTime fromDate = DateTime.Today;
            DateTime toDate = DateTime.Today;
            long kpiId = 14;

            BenchmarkServiceContractClient client =
                new BenchmarkServiceContractClient("Benchmark_ADFS");
            try
            {
                client.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                client.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                var result = client.FindBenchmarkDetailsByManagementUnit(kpiId, managementUnitId, ReportingPeriod.Previous12Months, toDate);

            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message, "Exception");
                throw;
            }
            finally
            {
                if (client.State != CommunicationState.Faulted)
                {
                    client.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.BenchmarkService.FindBenchmarkMetaData(DLBR.DCF.KDB.MessageContracts.BenchmarkService.FindBenchmarkMetaDataRequest)">
      <summary>
        <h1>Functional Description</h1>
            Gets all KPI metadata for the Benchmark module
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>CategoryCollection</td><td>A (root) list of <see cref="T:DLBR.DCF.KDB.DataContracts.BenchmarkService.Category" />, containing nested lists of <see cref="T:DLBR.DCF.KDB.DataContracts.BenchmarkService.SubCategory" />, containing nested lists of <see cref="T:DLBR.DCF.KDB.DataContracts.BenchmarkService.BenchmarkMetaData" /></td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.BenchmarkService.FindBenchmarkMetaDataRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.BenchmarkService.FindBenchmarkMetaDataResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>!!BenchmarkServiceTest.FindBenchmarkMetaData_AdfsEndpoint_ShouldNotThrow!!</code></example>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.CowmarketEntityService">
      <summary>
        <h1>General</h1>
        <p>
            The following URIs specifies the location of the service in the production- and production test environment. 
            By default services in both the production and the production test environment uses the production data stores. The alternative URIs, which uses the test data stores (Medio), may be used for testing purposes.
            Please note that service versions might differ between the production- and production test environments. Before you begin using the service, please consult the person responsible as described in section 3.7 – Responsibility assignment.
            </p>
        <p>
          <b>Production URL:</b>
          <a href="http://prod.dcf.ws.dlbr.dk/DCFServices/CowmarketEntityService.svc">http://prod.dcf.ws.dlbr.dk/DCFServices/CowmarketEntityService.svc</a>
        </p>
        <p>
          <b>Accept test URL:</b>
          <a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/CowmarketEntityService.svc">http://accepttest.dcf.ws.dlbr.dk/DCFServices/CowmarketEntityService.svc</a>
        </p>
        <h1>Web Service Description</h1>
            The machine-readable description in the form of a WSDL document can be obtained by querying the following URI’s.
            <p><b>Production WSDL:</b><a href="http://prod.dcf.ws.dlbr.dk/DCFServices/CowmarketEntityService.svc?wsdl">http://prod.dcf.ws.dlbr.dk/DCFServices/CowmarketEntityService.svc?wsdl</a></p><p><b>Accept test WSDL:</b><a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/CowmarketEntityService.svc?wsdl">http://accepttest.dcf.ws.dlbr.dk/DCFServices/CowmarketEntityService.svc?wsdl</a></p><h1>Endpoints</h1>
            For information regarding endpoints, see topic 'Endpoints available in DCF Services'
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.CowmarketEntityService.ActivateAnimal(DLBR.DCF.KDB.MessageContracts.CowmarketEntityService.ActivateAnimalRequest)">
      <summary>
        <h1>Functional Description</h1>
            Activate animal on cowmarket list
            Authorised to ActAs Farmer
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>AnimalNumber</td><td>yes</td><td>&gt;0</td><td>The animal number to register</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>CowmarketInformation</td><td>The <see cref="T:DLBR.DCF.KDB.DataContracts.CowMarketEntityService.CowmarketInformation" /> entity</td></tr></table></summary>
      <param name="animalRequest">The animalRequest object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.CowmarketEntityService.ActivateAnimalRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.CowmarketEntityService.ActivateAnimalResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            string WebdyrClaimType = "http://claims.dlbr.dk/2011/01/dataid/webdyr";
            long animalNumber = 1087200223;

            GenericXmlSecurityToken farmerToken = (GenericXmlSecurityToken)AdfsHelper.GetSecurityToken(Settings.Default.ADFS_IdpEndpoint, TestUtil.Cowmarket_REALM, TestUtil.Cowmarket10872_USER_ID, TestUtil.Cowmarket10872_PASSWORD);
            SecurityToken actAsToken = AdfsHelper.GetActAsToken(Settings.Default.ADFS_IdpEndpoint, Settings.Default.ADFS_Realm, TestUtil.Cowmarket_USER_ID, TestUtil.Cowmarket_Password, farmerToken);

            //Webdyr claim format AnimalType;HerdId;CVRId;CprId
            var token = FederatedAuthentication.ServiceConfiguration.SecurityTokenHandlers.ReadToken(new XmlTextReader(new StringReader(farmerToken.TokenXml.OuterXml)));
            var identity = FederatedAuthentication.ServiceConfiguration.SecurityTokenHandlers.ValidateToken(token).First();
            var webdyrClaim = identity.Claims.FindAll(c =&gt; c.ClaimType == WebdyrClaimType).FirstOrDefault();
            Collection&lt;WcfHeaderInfo&gt; headerInfos = new Collection&lt;WcfHeaderInfo&gt;
                                                        {
                                                            new WcfHeaderInfo { Key = "HerdIdKey", Namespace = "http://dcf.ws.dlbr.dk/ws/2012/07/identity", Value = webdyrClaim.Value }
                                                        };
            using (var service = new WcfServiceWrapper&lt;CowmarketEntityServiceContract&gt;(actAsToken,
                           String.Format("https://{0}/DCFServices/CowmarketEntityService.svc/adfs", Settings.Default.DCF_Hostname), headerInfos))
            {
                var result =
                    service.Channel.ActivateAnimal(new ActivateAnimalRequest
                    {
                        AnimalNumber = animalNumber,
                    });
                result.Should().NotBeNull();
                result.CowmarketInformation.Should().NotBeNull();
            }

</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.CowmarketEntityService.DeactivateAnimal(DLBR.DCF.KDB.MessageContracts.CowmarketEntityService.DeactivateAnimalRequest)">
      <summary>
        <h1>Functional Description</h1>
            Deactivate animal on cowmarket list
            Authorised to Cowmarket system account
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>AnimalNumber</td><td>yes</td><td>&gt;0</td><td>The animal number to register</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>CowmarketInformation</td><td>The <see cref="T:DLBR.DCF.KDB.DataContracts.CowMarketEntityService.CowmarketInformation" /> entity</td></tr></table></summary>
      <param name="animalRequest">The animalRequest object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.CowmarketEntityService.DeactivateAnimalRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.CowmarketEntityService.DeactivateAnimalResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            List&lt;long&gt; animalsToSell = new List&lt;long&gt; { 2761202313, 2761202314, 2761202315, 2761202316, 2761202317 };            
            SecurityToken token = AdfsHelper.GetSecurityToken(Settings.Default.ADFS_IdpEndpoint, Settings.Default.ADFS_Realm, TestUtil.Cowmarket_USER_ID, TestUtil.Cowmarket_Password);
            using (var service = new WcfServiceWrapper&lt;CowmarketEntityServiceContract&gt;(token,
                           String.Format("https://{0}/DCFServices/CowmarketEntityService.svc/adfs", Settings.Default.DCF_Hostname)))
            {

                animalsToSell.ForEach(a =&gt;
                                      {
                                          var result =
                                              service.Channel.DeactivateAnimal(new DeactivateAnimalRequest
                                                                               {
                                                                                   AnimalNumber = a,
                                                                               });
                                          result.Should().NotBeNull();
                                          result.CowmarketInformation.Should().NotBeNull();
                                      });
            }

</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.CowmarketEntityService.GetCowmarketInformationOnAnimal(DLBR.DCF.KDB.MessageContracts.CowmarketEntityService.GetCowmarketInformationOnAnimalRequest)">
      <summary>
        <h1>Functional Description</h1>
            Get CowmarketInformation On Animal.
            It is possible to call this method before the animal is actually for sale.
            Can be called by ActAS farmer user.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>AnimalNumber</td><td>yes</td><td>&gt;0</td><td>The number of the animal you wish to find.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>CowmarketInformation</td><td>The <see cref="T:DLBR.DCF.KDB.DataContracts.CowMarketEntityService.CowmarketInformation" /> entity</td></tr></table></summary>
      <param name="request">The animalRequest object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.CowmarketEntityService.GetCowmarketInformationOnAnimalRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.CowmarketEntityService.GetCowmarketInformationOnAnimalResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            string WebdyrClaimType = "http://claims.dlbr.dk/2011/01/dataid/webdyr";
            long animalNumber = 1087200223;

            GenericXmlSecurityToken farmerToken = (GenericXmlSecurityToken)AdfsHelper.GetSecurityToken(Settings.Default.ADFS_IdpEndpoint, TestUtil.Cowmarket_REALM, TestUtil.Cowmarket10872_USER_ID, TestUtil.Cowmarket10872_PASSWORD);
            SecurityToken actAsToken = AdfsHelper.GetActAsToken(Settings.Default.ADFS_IdpEndpoint, Settings.Default.ADFS_Realm, TestUtil.Cowmarket_USER_ID, TestUtil.Cowmarket_Password, farmerToken);

            //Webdyr claim format AnimalType;HerdId;CVRId;CprId
            var token = FederatedAuthentication.ServiceConfiguration.SecurityTokenHandlers.ReadToken(new XmlTextReader(new StringReader(farmerToken.TokenXml.OuterXml)));
            var identity = FederatedAuthentication.ServiceConfiguration.SecurityTokenHandlers.ValidateToken(token).First();
            var webdyrClaim = identity.Claims.FindAll(c =&gt; c.ClaimType == WebdyrClaimType).FirstOrDefault();
            Collection&lt;WcfHeaderInfo&gt; headerInfos = new Collection&lt;WcfHeaderInfo&gt;
                                                        {
                                                            new WcfHeaderInfo { Key = "HerdIdKey", Namespace = "http://dcf.ws.dlbr.dk/ws/2012/07/identity", Value = webdyrClaim.Value }
                                                        };

            using (var service = new WcfServiceWrapper&lt;CowmarketEntityServiceContract&gt;(actAsToken,
                           String.Format("https://{0}/DCFServices/CowmarketEntityService.svc/adfs", Settings.Default.DCF_Hostname), headerInfos))
            {

                var result = service.Channel.GetCowmarketInformationOnAnimal(new GetCowmarketInformationOnAnimalRequest { AnimalNumber = animalNumber });
                result.Should().NotBeNull();
                //result.CowmarketInformation.Should().NotBeNull();

            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.CowmarketEntityService.FindCowmarketInformationOnAnimalsForSale(DLBR.DCF.KDB.MessageContracts.CowmarketEntityService.FindCowmarketInformationOnAnimalsForSaleRequest)">
      <summary>
        <h1>Functional Description</h1>
            Find CowmarketInformation On Animal For Sale
            Authorised to Cowmarket system account
            Returns <see cref="T:DLBR.DCF.KDB.DataContracts.CowMarketEntityService.CowmarketInformation" /> entities for all animals activated.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>CowmarketInformationList</td><td>List of <see cref="T:DLBR.DCF.KDB.DataContracts.CowMarketEntityService.CowmarketInformation" /> entities</td></tr></table></summary>
      <param name="request">The animalRequest object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.CowmarketEntityService.FindCowmarketInformationOnAnimalsForSaleRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.CowmarketEntityService.FindCowmarketInformationOnAnimalsForSaleResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            SecurityToken token = AdfsHelper.GetSecurityToken(Settings.Default.ADFS_IdpEndpoint, Settings.Default.ADFS_Realm, TestUtil.Cowmarket_USER_ID, TestUtil.Cowmarket_Password);
            using (var service = new WcfServiceWrapper&lt;CowmarketEntityServiceContract&gt;(token,
                           String.Format("https://{0}/DCFServices/CowmarketEntityService.svc/adfs", Settings.Default.DCF_Hostname)))
            {
                service.ConfigureChannel += factory =&gt;
                {
                    service.Binding.MaxReceivedMessageSize = 200000000;
                };

                var result = service.Channel.FindCowmarketInformationOnAnimalsForSale(new FindCowmarketInformationOnAnimalsForSaleRequest());
                result.Should().NotBeNull();
                result.CowmarketInformationList.Should().NotBeNull().And.NotBeEmpty();
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.CowmarketEntityService.FindCowmarketInformationByHerdNumberOnAnimalsForSale(DLBR.DCF.KDB.MessageContracts.CowmarketEntityService.FindCowmarketInformationByHerdNumberOnAnimalsForSaleRequest)">
      <summary>
        <h1>Functional Description</h1>
            Find CowmarketInformation by herdnumber On Animal For Sale.
            Returns <see cref="T:DLBR.DCF.KDB.DataContracts.CowMarketEntityService.CowmarketInformation" /> entities for all animals activated.
            Authorised to Cowmarket system account
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>HerdNumber</td><td>yes</td><td>&gt;0</td><td>The number of the herd you wish to find all activated animals for.</td></tr><tr><td>AnimalType</td><td>yes</td><td>&gt;0</td><td>The type of animals in the herd.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>CowmarketInformationList</td><td>List of <see cref="T:DLBR.DCF.KDB.DataContracts.CowMarketEntityService.CowmarketInformation" /> entities for all activated animals</td></tr></table></summary>
      <param name="request">The animalRequest object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.CowmarketEntityService.FindCowmarketInformationByHerdNumberOnAnimalsForSaleRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.CowmarketEntityService.FindCowmarketInformationByHerdNumberOnAnimalsForSaleResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            SecurityToken token = AdfsHelper.GetSecurityToken(Settings.Default.ADFS_IdpEndpoint, Settings.Default.ADFS_Realm, TestUtil.Cowmarket_USER_ID, TestUtil.Cowmarket_Password);
            using (var service = new WcfServiceWrapper&lt;CowmarketEntityServiceContract&gt;(token,
                           String.Format("https://{0}/DCFServices/CowmarketEntityService.svc/adfs", Settings.Default.DCF_Hostname)))
            {

                var result = service.Channel.FindCowmarketInformationByHerdNumberOnAnimalsForSale(new FindCowmarketInformationByHerdNumberOnAnimalsForSaleRequest
                {AnimalType = new AnimalType{Code=12}, HerdNumber = 27612});
                result.Should().NotBeNull();
                result.CowmarketInformationList.Should().NotBeNull();

            }

</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.CowmarketEntityService.FindInvoiceableByCHRNumber(DLBR.DCF.KDB.MessageContracts.CowmarketEntityService.FindInvoiceableByCHRNumberRequest)">
      <summary>
        <h1>Functional Description</h1>
            Find invoiceable animals for cowmarket
            Authorised to Cowmarket system account
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>CHR number</td><td>yes</td><td>&gt;0</td><td>The CHR number you wish to find animals for.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>InvoiceableAnimalTransferList</td><td>List of <see cref="T:DLBR.DCF.KDB.DataContracts.CowmarketEntityService.CowmarketAnimalTransfer" /> entities that represent animals to send invoices for.</td></tr></table></summary>
      <param name="request">The animalRequest object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.CowmarketEntityService.FindInvoiceableByCHRNumberRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.CowmarketEntityService.FindInvoiceableByCHRNumberResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            SecurityToken token = AdfsHelper.GetSecurityToken(Settings.Default.ADFS_IdpEndpoint, Settings.Default.ADFS_Realm, TestUtil.Cowmarket_USER_ID, TestUtil.Cowmarket_Password);
            using (var service = new WcfServiceWrapper&lt;CowmarketEntityServiceContract&gt;(token,
               String.Format("https://{0}/DCFServices/CowmarketEntityService.svc/adfs", Settings.Default.DCF_Hostname)))
            {

                var result =
                    service.Channel.FindInvoiceableByCHRNumber(new FindInvoiceableByCHRNumberRequest
                    {
                        ChrNumber = 27612,
                        DateFrom = new DateTime(2013,09, 01),
                        DateTo = DateTime.Today,
                    });
                result.Should().NotBeNull();
                result.InvoiceableAnimalTransferList.Should().NotBeNull();

            }

</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.CowmarketEntityService.FindInvoiceableByCVRNumber(DLBR.DCF.KDB.MessageContracts.CowmarketEntityService.FindInvoiceableByCVRNumberRequest)">
      <summary>
        <h1>Functional Description</h1>
            Find invoiceable animals for cowmarket.
            Invoiceable means the animals have a transfer (16=Levebrug, 17=Export) within the period the animal is for sale.
            Authorised to Cowmarket system account
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>CVR number</td><td>yes</td><td>&gt;0</td><td>The CVR number you wish to find animals for.</td></tr><tr><td>DateFrom</td><td>yes</td><td></td><td>DateFrom in the period you wish to find invoiceable animals</td></tr><tr><td>DateTo</td><td>yes</td><td></td><td>DateTo in the period you wish to find invoiceable animals</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>InvoiceableAnimalTransferList</td><td>List of <see cref="T:DLBR.DCF.KDB.DataContracts.CowmarketEntityService.CowmarketAnimalTransfer" /> entities that represent animals to send invoices for.</td></tr></table></summary>
      <param name="request">The animalRequest object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.CowmarketEntityService.FindInvoiceableByCVRNumberRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.CowmarketEntityService.FindInvoiceableByCVRNumberResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            SecurityToken token = AdfsHelper.GetSecurityToken(Settings.Default.ADFS_IdpEndpoint, Settings.Default.ADFS_Realm, TestUtil.Cowmarket_USER_ID, TestUtil.Cowmarket_Password);
            using (var service = new WcfServiceWrapper&lt;CowmarketEntityServiceContract&gt;(token,
               String.Format("https://{0}/DCFServices/CowmarketEntityService.svc/adfs", Settings.Default.DCF_Hostname)))
            {

                var result =
                    service.Channel.FindInvoiceableByCVRNumber(new FindInvoiceableByCVRNumberRequest
                    {
                        CVRNumber = 10370094,
                        DateFrom = new DateTime(2013, 09, 01),
                        DateTo = DateTime.Today,
                    });
                result.Should().NotBeNull();
                result.InvoiceableAnimalTransferList.Should().NotBeNull();

            }

</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.CowmarketEntityService.FindAnimalsToRemoveAd(DLBR.DCF.KDB.MessageContracts.CowmarketEntityService.FindAnimalsToRemoveAdRequest)">
      <summary>
        <h1>Functional Description</h1>
            Find animals in cowmarket where the ad can be removed.
            The animal is dead of different causes
            7: Slagtet
            9: Død
            19: Aflivet
            Authorised to Cowmarket system account
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>AnimalsToRemoveAdTransferList</td><td>List of <see cref="T:DLBR.DCF.KDB.DataContracts.AnimalTransfer" /> entities that represent animals to remove ads for.</td></tr></table></summary>
      <param name="request">The animalRequest object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.CowmarketEntityService.FindInvoiceableByCHRNumberRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.CowmarketEntityService.FindInvoiceableByCHRNumberResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            SecurityToken token = AdfsHelper.GetSecurityToken(Settings.Default.ADFS_IdpEndpoint, Settings.Default.ADFS_Realm, TestUtil.Cowmarket_USER_ID, TestUtil.Cowmarket_Password);
            using (var service = new WcfServiceWrapper&lt;CowmarketEntityServiceContract&gt;(token,
               String.Format("https://{0}/DCFServices/CowmarketEntityService.svc/adfs", Settings.Default.DCF_Hostname)))
            {

                var result =
                    service.Channel.FindAnimalsToRemoveAd(new FindAnimalsToRemoveAdRequest
                                                          {
                                                              DateFrom = new DateTime(2013, 09, 01),
                                                              DateTo = DateTime.Today,
                                                          });
                result.Should().NotBeNull();
                result.AnimalsToRemoveAdTransferList.Should().NotBeNull();
            }

</code></example>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.PedigreeService">
      <summary>
        <h1>General</h1>
        <p>
            The following URIs specifies the location of the service in the production- and production test environment. 
            By default services in both the production and the production test environment uses the production data stores. The alternative URIs, which uses the test data stores (Medio), may be used for testing purposes.
            Please note that service versions might differ between the production- and production test environments. Before you begin using the service, please consult the person responsible as described in section 3.7 – Responsibility assignment.
            </p>
        <p>
          <b>Production URL:</b>
          <a href="http://prod.dcf.ws.dlbr.dk/DCFServices/PedigreeService.svc">http://prod.dcf.ws.dlbr.dk/DCFServices/PedigreeService.svc</a>
        </p>
        <p>
          <b>Accept test URL:</b>
          <a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/PedigreeService.svc">http://accepttest.dcf.ws.dlbr.dk/DCFServices/PedigreeService.svc</a>
        </p>
        <h1>Web Service Description</h1>
            The machine-readable description in the form of a WSDL document can be obtained by querying the following URI’s.
            <p><b>Production WSDL:</b><a href="http://prod.dcf.ws.dlbr.dk/DCFServices/PedigreeService.svc?wsdl">http://prod.dcf.ws.dlbr.dk/DCFServices/PedigreeService.svc?wsdl</a></p><p><b>Accept test WSDL:</b><a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/PedigreeService.svc?wsdl">http://accepttest.dcf.ws.dlbr.dk/DCFServices/PedigreeService.svc?wsdl</a></p><h1>Endpoints</h1>
            For information regarding endpoints, see topic 'Endpoints available in DCF Services'
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.PedigreeService.GetPedigreeByAnimalNumber(DLBR.DCF.KDB.MessageContracts.PedigreeService.GetPedigreeByAnimalNumberRequest)">
      <summary>
        <h1>Functional Description</h1>
            Get Pedigree by animal number
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>AnimalNumber</td><td>yes</td><td>&gt;0</td><td>The number of the animal you wish to find pedigree for.</td></tr><tr><td>NoOfLevels</td><td>no</td><td></td><td>No of levels of ancestors, 1= parents, 2= grandparents, etc. Default=3</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>Pedigree</td><td>The <see cref="T:DLBR.DCF.KDB.DataContracts.PedigreeService.Pedigree" /> instance that was found.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.PedigreeService.GetPedigreeByAnimalNumberRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.PedigreeService.GetPedigreeByAnimalNumberResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            if (tokenFarmer == null)
                tokenFarmer = AdfsHelper.GetSecurityToken(Settings.Default.ADFS_IdpEndpoint, Settings.Default.ADFS_Realm,
                    TestUtil.DIAGNOSIS_TEST_USER, TestUtil.DIAGNOSIS_TEST_PASSWORD);

            using (var service = new WcfServiceWrapper&lt;PedigreeServiceContract&gt;(tokenFarmer,
                String.Format("https://{0}/DCFServices/PedigreeService.svc/adfs",
                    Settings.Default.DCF_Hostname)))
            {
                var result =
                    service.Channel.GetPedigreeByAnimalNumber(
                        new GetPedigreeByAnimalNumberRequest(5266601111, null));

                result.Should().NotBeNull();
                result.Pedigree.Should().NotBeNull();
                result.Pedigree.AnimalNumber.Should().Be(5266601111);
                result.Pedigree.AnimalHerdBookInformationList.Should().NotBeNull().And.NotBeEmpty();
                var herdBookInfo = result.Pedigree.AnimalHerdBookInformationList.FirstOrDefault();
                herdBookInfo.Should().NotBeNull();
                herdBookInfo.AnimalNumber.Should().Be(5266601111);
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.PedigreeService.FindPedigreesByHerdNumber(DLBR.DCF.KDB.MessageContracts.PedigreeService.FindPedigreesByHerdNumberRequest)">
      <summary>
        <h1>Functional Description</h1>
            Find Pedigree for all active animals in Herd number.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>HerdNumber</td><td>yes</td><td>&gt;0</td><td>Herd number.</td></tr><tr><td>AnimalType</td><td>yes</td><td>&gt;0</td><td>Animal type.</td></tr><tr><td>NoOfLevels</td><td>no</td><td></td><td>No of levels of ancestors, 1= parents, 2= grandparents, etc. Default=1</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>PedigreeList</td><td>A list of <see cref="T:DLBR.DCF.KDB.DataContracts.PedigreeService.Pedigree" /> instance that was found.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.PedigreeService.GetPedigreeByAnimalNumberRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.PedigreeService.GetPedigreeByAnimalNumberResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            if (tokenFarmer == null)
                tokenFarmer = AdfsHelper.GetSecurityToken(Settings.Default.ADFS_IdpEndpoint, Settings.Default.ADFS_Realm,
                    TestUtil.DIAGNOSIS_TEST_USER, TestUtil.DIAGNOSIS_TEST_PASSWORD);

            AnimalType animalType = new AnimalType { Code = 12 };

            using (var service = new WcfServiceWrapper&lt;PedigreeServiceContract&gt;(tokenFarmer,
                String.Format("https://{0}/DCFServices/PedigreeService.svc/adfs",
                    Settings.Default.DCF_Hostname)))
            {
                service.ConfigureChannel += factory =&gt;
                {
                    service.Binding.MaxReceivedMessageSize = 200000000;
                };

                var result =
                    service.Channel.FindPedigreesByHerdNumber(
                        new FindPedigreesByHerdNumberRequest(animalType, 52666, null));

                result.Should().NotBeNull();
                result.PedigreeList.Should().NotBeNull().And.NotBeEmpty();
            }
</code></example>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.ReportBuilderEntityService">
      <summary>
        <h1>General</h1>
        <p>
            The following URIs specifies the location of the service in the production- and production test environment. 
            By default services in both the production and the production test environment uses the production data stores. The alternative URIs, which uses the test data stores (Medio), may be used for testing purposes.
            Please note that service versions might differ between the production- and production test environments. Before you begin using the service, please consult the person responsible as described in section 3.7 – Responsibility assignment.
            </p>
        <p>
          <b>Production URL:</b>
          <a href="http://prod.dcf.ws.dlbr.dk/DCFServices/ReportBuilderEntityService.svc">http://prod.dcf.ws.dlbr.dk/DCFServices/ReportBuilderEntityService.svc</a>
        </p>
        <p>
          <b>Accept test URL:</b>
          <a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/ReportBuilderEntityService.svc">http://accepttest.dcf.ws.dlbr.dk/DCFServices/ReportBuilderEntityService.svc</a>
        </p>
        <h1>Web Service Description</h1>
            The machine-readable description in the form of a WSDL document can be obtained by querying the following URI’s.
            <p><b>Production WSDL:</b><a href="http://prod.dcf.ws.dlbr.dk/DCFServices/ReportBuilderEntityService.svc?wsdl">http://prod.dcf.ws.dlbr.dk/DCFServices/ReportBuilderEntityService.svc?wsdl</a></p><p><b>Accept test WSDL:</b><a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/ReportBuilderEntityService.svc?wsdl">http://accepttest.dcf.ws.dlbr.dk/DCFServices/ReportBuilderEntityService.svc?wsdl</a></p><h1>Endpoints</h1>
            For information regarding endpoints, see topic 'Endpoints available in DCF Services'
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.ReportBuilderEntityService.GetKPOSubReportDefaultConfiguration(DLBR.DCF.KDB.MessageContracts.ReportBuilderEntityService.GetKPOSubReportDefaultConfigurationRequest)">
      <summary>
        <h1>Functional Description</h1>
             Returns the configuration default values for KPO subreports
             <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>KPOSubReportConfigurationList</td><td>A list of <see cref="T:DLBR.DCF.KDB.DataContracts.ReportBuilderEntityService.KPOSubReportConfiguration" /> objects</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.ReportBuilderEntityService.GetKPOSubReportDefaultConfigurationRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.ReportBuilderEntityService.GetKPOSubReportDefaultConfigurationResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
        <code>!!ReportBuilderEntityServiceTest.GetKPOSubReportDefaultConfiguration_AllOK_ShouldNotFail()!!</code>
      </example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.ReportBuilderEntityService.GetStandardReportStatus(DLBR.DCF.KDB.MessageContracts.ReportBuilderEntityService.GetStandardReportStatusRequest)">
      <summary>
        <h1>Functional Description</h1>
            Returns a the status of a standard report
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>ReportId</td><td>Yes</td><td>&gt; 0</td><td>The Id of the Report</td><td>ManagementUnitId</td><td>Yes</td><td>&gt; 0</td><td>The Id of the Management Unit</td><td>UserId</td><td>Yes</td><td>&gt; 0</td><td>The Id of the User</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>ReportStatus</td><td>A <see cref="T:DLBR.DCF.KDB.DataContracts.ReportBuilderEntityService.ReportStatus" /> object</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.ReportBuilderEntityService.GetStandardReportStatusRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.ReportBuilderEntityService.GetStandardReportStatusResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>Method GetStandardReportStatus_AdfsEndpoint_ShouldNotFail() not found in class ..\tests\DLBR.DCF.KDB.IntegrationTests\ReportBuilderEntityServiceTest.cs</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.ReportBuilderEntityService.FindSubReportPictures(DLBR.DCF.KDB.MessageContracts.ReportBuilderEntityService.FindSubReportPicturesRequest)">
      <summary>
        <h1>Functional Description</h1>
            Returns a list of all subreport images
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>SubReportId</td><td>No</td><td>&gt; 0</td><td>The Id of the subreport image. NULL to retrieve all images</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>SubReportPictures</td><td>A list of <see cref="T:DLBR.DCF.KDB.DataContracts.ReportBuilderEntityService.SubReportPicture" /> objects</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.ReportBuilderEntityService.FindSubReportPicturesRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.ReportBuilderEntityService.FindSubReportPicturesResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>Method FindSubReportPictures_AdfsEndpoint_ShouldNotFail() not found in class ..\tests\DLBR.DCF.KDB.IntegrationTests\ReportBuilderEntityServiceTest.cs</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.ReportBuilderEntityService.FindStandardReports(DLBR.DCF.KDB.MessageContracts.ReportBuilderEntityService.FindStandardReportsRequest)">
      <summary>
        <h1>Functional Description</h1>
            Returns a categorized tree of standard reports ready for rendering
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>AgriBusinessId</td><td>Yes</td><td>&gt; 0</td><td>The Id of the AgriBusiness</td></tr><tr><td>UserId</td><td>Yes</td><td></td><td>The Id of the current user</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>Categories</td><td>A list of <see cref="T:DLBR.DCF.KDB.DataContracts.ReportBuilderEntityService.StandardReportCategory" /></td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.ReportBuilderEntityService.FindStandardReportsRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.ReportBuilderEntityService.FindStandardReportsResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            ReportBuilderEntityServiceContractClient client =
                new ReportBuilderEntityServiceContractClient("ReportBuilderEntity_ADFS");
            try
            {
                client.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                client.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                var result = client.FindStandardReports(18571, "TestUser");
                result.Should().NotBeNull();

                foreach (var category in result)
                {
                    Debug.WriteLine(category.CategoryName);
                    foreach (var report in category.Reports)
                    {
                        Debug.WriteLine("  " + report.ReportName);
                        foreach (var parameter in report.UserParameters)
                            Debug.WriteLine("    " + parameter.PromptTypeName);
                    }
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message, "Exception");
                throw;
            }
            finally
            {
                if (client.State != CommunicationState.Faulted)
                {
                    client.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.ReportBuilderEntityService.FindSubReports(DLBR.DCF.KDB.MessageContracts.ReportBuilderEntityService.FindSubReportsRequest)">
      <summary>
        <h1>Functional Description</h1>
            Returns a complete list of all existing subreports (aka blocks) as a categorized tree structure.
            The number of category levels is unrestricted
            Subreports may me attached to any category level
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>Categories</td><td>A list of <see cref="T:DLBR.DCF.KDB.DataContracts.ReportBuilderEntityService.SubReportCategory" /> objects</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.ReportBuilderEntityService.FindSubReportsRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.ReportBuilderEntityService.FindSubReportsResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>Method FindSubReports_AdfsEndpoint_ShouldNotFail() not found in class ..\tests\DLBR.DCF.KDB.IntegrationTests\ReportBuilderEntityServiceTest.cs</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.ReportBuilderEntityService.FindReportDefinitions(DLBR.DCF.KDB.MessageContracts.ReportBuilderEntityService.FindReportDefinitionsRequest)">
      <summary>
        <h1>Functional Description</h1>
            Returns a list of reports ready for rendering
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>AgriBusinessId</td><td>Yes</td><td>&gt; 0</td><td>The Id of the AgriBusiness</td></tr><tr><td>UserId</td><td>Yes</td><td></td><td>The Id of the current user</td></tr><tr><td>XmlReportRefId</td><td>No</td><td></td><td>Optional filter to look up a single, specific report</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>ReportDefinitions</td><td>A list of <see cref="T:DLBR.DCF.KDB.DataContracts.ReportBuilderEntityService.ReportDefinition" /></td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.ReportBuilderEntityService.FindReportDefinitionsRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.ReportBuilderEntityService.FindReportDefinitionsResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            ReportBuilderEntityServiceContractClient client =
                new ReportBuilderEntityServiceContractClient("ReportBuilderEntity_ADFS");
            try
            {
                client.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                client.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                var result = client.FindReportDefinitions(AgriBusinessId, null, null);
                result.Should().NotBeNull();
                foreach (var row in result)
                {
                    Debug.WriteLine(row.AgriBusinessId);
                    Debug.WriteLine(row.TemplateReportRefId);
                    Debug.WriteLine(row.ReportUrl);
                    Debug.WriteLine(row.QueryStringParameters);
                    Debug.WriteLine(row.SubReportEditions.Length);
                    Debug.WriteLine(row.SubReports.Length);
                    row.SubReportEditions.Length.Should().Be(row.SubReports.Length);
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message, "Exception");
                throw;
            }
            finally
            {
                if (client.State != CommunicationState.Faulted)
                {
                    client.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.ReportBuilderEntityService.DeleteReportDefinition(DLBR.DCF.KDB.MessageContracts.ReportBuilderEntityService.DeleteReportDefinitionRequest)">
      <summary>
        <h1>Functional Description</h1>
            Removes a report definition from the database
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>XmlReportRefId</td><td>Yes</td><td>&gt; 0</td><td>The Id of the ReportDefinition</td></tr><tr><td>UserId</td><td>Yes</td><td></td><td>The Id of the current user</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.ReportBuilderEntityService.DeleteReportDefinitionRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.ReportBuilderEntityService.DeleteReportDefinitionResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            ReportBuilderEntityServiceContractClient client =
                new ReportBuilderEntityServiceContractClient("ReportBuilderEntity_ADFS");
            try
            {
                client.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                client.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                client.DeleteReportDefinition(TestUserId, 999999999);

            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message, "Exception");
                throw;
            }
            finally
            {
                if (client.State != CommunicationState.Faulted)
                {
                    client.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.ReportBuilderEntityService.UpdateReportDefinition(DLBR.DCF.KDB.MessageContracts.ReportBuilderEntityService.UpdateReportDefinitionRequest)">
      <summary>
        <h1>Functional Description</h1>
            Creates og updates a report definition
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>XmlReportRefId</td><td>No</td><td></td><td>The Id of the report to update. Null initiates a create operation.</td></tr><tr><td>AgriBusinessId</td><td>No</td><td>&gt; 0</td><td>The Id of the AgriBusiness. Null allowed if report is owned by user</td></tr><tr><td>UserId</td><td>Yes</td><td></td><td>The Id of the current user</td></tr><tr><td>Name</td><td>Yes</td><td></td><td>The name of the report</td></tr><tr><td>SubReports</td><td>Yes</td><td></td><td>A list of <see cref="T:DLBR.DCF.KDB.DataContracts.ReportBuilderEntityService.SubReportEdition"> objects</see></td></tr><tr><td>SubReportParameters</td><td>No</td><td></td><td>A list of <see cref="T:DLBR.DCF.KDB.DataContracts.ReportBuilderEntityService.SubReportEditionParameterValue"> objects</see></td></tr><tr><td>TemplateReportRefId</td><td>No</td><td></td><td>The optional reference to a report template.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>Result</td><td>A <see cref="T:DLBR.DCF.KDB.DataContracts.ReportBuilderEntityService.ReportDefinitionUpdateResult"> object</see></td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.ReportBuilderEntityService.UpdateReportDefinitionRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.ReportBuilderEntityService.UpdateReportDefinitionResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            SubReportEdition[] editions = new SubReportEdition[2];
            editions[0] = new SubReportEdition() { BlockNo = 1, SubReportId = 1 };
            editions[1] = new SubReportEdition() { BlockNo = 2, SubReportId = 2 };

            ReportBuilderEntityServiceContractClient client =
                new ReportBuilderEntityServiceContractClient("ReportBuilderEntity_ADFS");
            try
            {
                client.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                client.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

//                var result = client.UpdateReportDefinition(AgriBusinessId, "Test Report", null, editions, TestUserId, 999999999);
                var result = client.UpdateReportDefinition(AgriBusinessId, "Test Report", null, editions, null, TestUserId, 999999999);
                result.Should().NotBeNull();
                Debug.WriteLine("UpdateReportDefinition ReturnValue = {0}, XmlReportRefId = {1}", result.ReturnValue, result.XmlReportRefId);

            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message, "Exception");
                throw;
            }
            finally
            {
                if (client.State != CommunicationState.Faulted)
                {
                    client.Close();
                }
            }
</code></example>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.InseminatorDeliveredSemenEntityService">
      <summary>
        <h1>General</h1>
        <p>
            The following URIs specifies the location of the service in the production- and production test environment. 
            By default services in both the production and the production test environment uses the production data stores. The alternative URIs, which uses the test data stores (Medio), may be used for testing purposes.
            Please note that service versions might differ between the production- and production test environments. Before you begin using the service, please consult the person responsible as described in section 3.7 – Responsibility assignment.
            </p>
        <p>
          <b>Production URL:</b>
          <a href="http://prod.dcf.ws.dlbr.dk/DCFServices/InseminatorDeliveredSemenEntityService.svc">http://prod.dcf.ws.dlbr.dk/DCFServices/InseminatorDeliveredSemenEntityService.svc</a>
        </p>
        <p>
          <b>Accept test URL:</b>
          <a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/InseminatorDeliveredSemenEntityService.svc">http://accepttest.dcf.ws.dlbr.dk/DCFServices/InseminatorDeliveredSemenEntityService.svc</a>
        </p>
        <h1>Web Service Description</h1>
            The machine-readable description in the form of a WSDL document can be obtained by querying the following URI’s.
            <p><b>Production WSDL:</b><a href="http://prod.dcf.ws.dlbr.dk/DCFServices/InseminatorDeliveredSemenEntityService.svc?wsdl">http://prod.dcf.ws.dlbr.dk/DCFServices/InseminatorDeliveredSemenEntityService.svc?wsdl</a></p><p><b>Accept test WSDL:</b><a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/InseminatorDeliveredSemenEntityService.svc?wsdl">http://accepttest.dcf.ws.dlbr.dk/DCFServices/InseminatorDeliveredSemenEntityService.svc?wsdl</a></p><h1>Endpoints</h1>
            For information regarding endpoints, see topic 'Endpoints available in DCF Services'
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.InseminatorDeliveredSemenEntityService.FindDeliveredSemenRegistrationsByInseminator(DLBR.DCF.KDB.MessageContracts.InseminatorDeliveredSemen.FindDeliveredSemenRegistrationsByInseminatorRequest)">
      <summary>
        <h1>Functional Description</h1>
            Finds DeliveredSemen Registrations for a given inseminator or a given period. If you do not specify inseminator a periode must be specified.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>InseminatorNumber</td><td>(yes)</td><td>&gt;0</td><td>The inseminator number you wish to find deliveredSemen registrations for.</td></tr><tr><td>FromDate</td><td>(yes)</td><td>FromDate &lt;= ToDate</td><td>If not specified all deliveredSemen registrations are returned. If “FromDate” is set, then “ToDate” must also be 
            set, and vice versa. If specified all deliveredSemen registrations in the specified herd are returned.</td></tr><tr><td>ToDate</td><td>(yes)</td><td>FromDate &lt;= ToDate</td><td>See above.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>DeliveredSemenRegistrationCollection</td><td>A collection of the <see cref="T:DLBR.DCF.KDB.DataContracts.InseminatorDeliveredSemen.DeliveredSemenRegistration" /> objects found.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.InseminatorDeliveredSemen.FindDeliveredSemenRegistrationsByInseminatorRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.InseminatorDeliveredSemen.FindDeliveredSemenRegistrationsByInseminatorResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            DateTime fromDate = new DateTime(2012, 10, 1);
            DateTime toDate = new DateTime(2012, 12, 1);
            InseminatorDeliveredSemenEntityServiceContractClient client =
                new InseminatorDeliveredSemenEntityServiceContractClient("InseminatorDeliveredSemenEntity");
            try
            {
                client.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                client.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                DeliveredSemenRegistrationCollection result = client.FindDeliveredSemenRegistrationsByInseminator(fromDate, null,
                                                                                                      toDate);
                result.Should().NotBeNull().And.NotBeEmpty();
                result.Should().OnlyContain(h =&gt; h.RegistrationDate &gt;= fromDate &amp;&amp; h.RegistrationDate &lt;= toDate);
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message, "Exception");
                throw;
            }
            finally
            {
                if (client.State != CommunicationState.Faulted)
                {
                    client.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.InseminatorDeliveredSemenEntityService.RegisterDeliveredSemen(DLBR.DCF.KDB.MessageContracts.InseminatorDeliveredSemen.RegisterDeliveredSemenRequest)">
      <summary>
        <h1>Functional Description</h1>
            Register DeliveredSemen
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>InseminatorNumber</td><td>yes</td><td>&gt;0</td><td>The inseminator number you wish to register deliveredSemen for.</td></tr><tr><td>RegistrationDate</td><td>(yes)</td><td></td><td>Registration date</td></tr><tr><td>DeliveredSemen</td><td>(yes)</td><td></td><td>Amount of delivered semen</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>DeliveredSemenRegistration</td><td>The delivered semen registration <see cref="T:DLBR.DCF.KDB.DataContracts.InseminatorDeliveredSemen.DeliveredSemenRegistration" /></td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.InseminatorDeliveredSemen.RegisterDeliveredSemenRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.InseminatorDeliveredSemen.RegisterDeliveredSemenResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            int deliveredSemen = 22;
            DateTime regDate = DateTime.Today;
            long insNumber = 4001;

            InseminatorDeliveredSemenEntityServiceContractClient client =
                new InseminatorDeliveredSemenEntityServiceContractClient("InseminatorDeliveredSemenEntity");

            try
            {
                client.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                client.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                DeliveredSemenRegistration DeliveredSemenRegistration = client.RegisterDeliveredSemen(deliveredSemen, insNumber, regDate);

                DeliveredSemenRegistration.DeliveredSemen = 60;
                client.UpdateDeliveredSemen(ref DeliveredSemenRegistration);

                client.DeleteDeliveredSemen(DeliveredSemenRegistration);
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message, "Exception");
                throw;
            }
            finally
            {
                if (client.State != CommunicationState.Faulted)
                {
                    client.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.InseminatorDeliveredSemenEntityService.UpdateDeliveredSemen(DLBR.DCF.KDB.MessageContracts.InseminatorDeliveredSemen.UpdateDeliveredSemenRequest)">
      <summary>
        <h1>Functional Description</h1>
            Update DeliveredSemen registration
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>DeliveredSemenRegistration</td><td>yes</td><td>&gt;0</td><td>The delivered semen registration to update.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>DeliveredSemenRegistration</td><td>The delivered semen update <see cref="T:DLBR.DCF.KDB.DataContracts.InseminatorDeliveredSemen.DeliveredSemenRegistration" /></td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.InseminatorDeliveredSemen.UpdateDeliveredSemenRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.InseminatorDeliveredSemen.UpdateDeliveredSemenResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            int deliveredSemen = 22;
            DateTime regDate = DateTime.Today;
            long insNumber = 4001;

            InseminatorDeliveredSemenEntityServiceContractClient client =
                new InseminatorDeliveredSemenEntityServiceContractClient("InseminatorDeliveredSemenEntity");

            try
            {
                client.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                client.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                DeliveredSemenRegistration DeliveredSemenRegistration = client.RegisterDeliveredSemen(deliveredSemen, insNumber, regDate);

                DeliveredSemenRegistration.DeliveredSemen = 60;
                client.UpdateDeliveredSemen(ref DeliveredSemenRegistration);

                client.DeleteDeliveredSemen(DeliveredSemenRegistration);
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message, "Exception");
                throw;
            }
            finally
            {
                if (client.State != CommunicationState.Faulted)
                {
                    client.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.InseminatorDeliveredSemenEntityService.DeleteDeliveredSemen(DLBR.DCF.KDB.MessageContracts.InseminatorDeliveredSemen.DeleteDeliveredSemenRequest)">
      <summary>
        <h1>Functional Description</h1>
            Delete DeliveredSemen registration
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>DeliveredSemenRegistration</td><td>yes</td><td>&gt;0</td><td>The delivered semen registration to delete.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.InseminatorDeliveredSemen.DeleteDeliveredSemenRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.InseminatorDeliveredSemen.DeleteDeliveredSemenResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            int deliveredSemen = 22;
            DateTime regDate = DateTime.Today;
            long insNumber = 4001;

            InseminatorDeliveredSemenEntityServiceContractClient client =
                new InseminatorDeliveredSemenEntityServiceContractClient("InseminatorDeliveredSemenEntity");

            try
            {
                client.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                client.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                DeliveredSemenRegistration DeliveredSemenRegistration = client.RegisterDeliveredSemen(deliveredSemen, insNumber, regDate);

                DeliveredSemenRegistration.DeliveredSemen = 60;
                client.UpdateDeliveredSemen(ref DeliveredSemenRegistration);

                client.DeleteDeliveredSemen(DeliveredSemenRegistration);
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message, "Exception");
                throw;
            }
            finally
            {
                if (client.State != CommunicationState.Faulted)
                {
                    client.Close();
                }
            }
</code></example>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.InseminatorHomeTimeEntityService">
      <summary>
        <h1>General</h1>
        <p>
            The following URIs specifies the location of the service in the production- and production test environment. 
            By default services in both the production and the production test environment uses the production data stores. The alternative URIs, which uses the test data stores (Medio), may be used for testing purposes.
            Please note that service versions might differ between the production- and production test environments. Before you begin using the service, please consult the person responsible as described in section 3.7 – Responsibility assignment.
            </p>
        <p>
          <b>Production URL:</b>
          <a href="http://prod.dcf.ws.dlbr.dk/DCFServices/InseminatorHomeTimeEntityService.svc">http://prod.dcf.ws.dlbr.dk/DCFServices/InseminatorHomeTimeEntityService.svc</a>
        </p>
        <p>
          <b>Accept test URL:</b>
          <a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/InseminatorHomeTimeEntityService.svc">http://accepttest.dcf.ws.dlbr.dk/DCFServices/InseminatorHomeTimeEntityService.svc</a>
        </p>
        <h1>Web Service Description</h1>
            The machine-readable description in the form of a WSDL document can be obtained by querying the following URI’s.
            <p><b>Production WSDL:</b><a href="http://prod.dcf.ws.dlbr.dk/DCFServices/InseminatorHomeTimeEntityService.svc?wsdl">http://prod.dcf.ws.dlbr.dk/DCFServices/InseminatorHomeTimeEntityService.svc?wsdl</a></p><p><b>Accept test WSDL:</b><a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/InseminatorHomeTimeEntityService.svc?wsdl">http://accepttest.dcf.ws.dlbr.dk/DCFServices/InseminatorHomeTimeEntityService.svc?wsdl</a></p><h1>Endpoints</h1>
            For information regarding endpoints, see topic 'Endpoints available in DCF Services'
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.InseminatorHomeTimeEntityService.FindHomeTimeRegistrationsByInseminator(DLBR.DCF.KDB.MessageContracts.InseminatorHomeTime.FindHomeTimeRegistrationsByInseminatorRequest)">
      <summary>
        <h1>Functional Description</h1>
            Finds HomeTime Registrations for a given inseminator or a given period. If you do not specify inseminator a periode must be specified.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>InseminatorNumber</td><td>(yes)</td><td>&gt;0</td><td>The inseminator number you wish to find hometime registrations for.</td></tr><tr><td>FromDate</td><td>(yes)</td><td>FromDate &lt;= ToDate</td><td>If not specified all hometime registrations are returned. If “FromDate” is set, then “ToDate” must also be 
            set, and vice versa. If specified all hometime registrations in the specified period are returned.</td></tr><tr><td>ToDate</td><td>(yes)</td><td>FromDate &lt;= ToDate</td><td>See above.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>HomeTimeRegistrationCollection</td><td>A collection of the <see cref="T:DLBR.DCF.KDB.DataContracts.InseminatorHomeTime.HomeTimeRegistration" /> objects found.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.InseminatorHomeTime.FindHomeTimeRegistrationsByInseminatorRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.InseminatorHomeTime.FindHomeTimeRegistrationsByInseminatorResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            DateTime fromDate = new DateTime(2012, 10, 1);
            DateTime toDate = new DateTime(2012, 12, 1);
            InseminatorHomeTimeEntityServiceContractClient client =
                new InseminatorHomeTimeEntityServiceContractClient("InseminatorHomeTimeEntity");
            try
            {
                client.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                client.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                HomeTimeRegistrationCollection result = client.FindHomeTimeRegistrationsByInseminator(fromDate, null,
                                                                                                      toDate);
                result.Should().NotBeNull().And.NotBeEmpty();
                result.Should().OnlyContain(h =&gt; h.RegistrationDate &gt;= fromDate &amp;&amp; h.RegistrationDate &lt;= toDate);
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message, "Exception");
                throw;
            }
            finally
            {
                if (client.State != CommunicationState.Faulted)
                {
                    client.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.InseminatorHomeTimeEntityService.RegisterHomeTime(DLBR.DCF.KDB.MessageContracts.InseminatorHomeTime.RegisterHomeTimeRequest)">
      <summary>
        <h1>Functional Description</h1>
            Register HomeTime
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>InseminatorNumber</td><td>yes</td><td>&gt;0</td><td>The inseminator number you wish to register HomeTime for.</td></tr><tr><td>RegistrationDate</td><td>(yes)</td><td></td><td>Registration date</td></tr><tr><td>HomeTime</td><td>(yes)</td><td></td><td>HomeTime <see cref="M:DLBR.DCF.KDB.ServiceImplementation.ClassificationEntityService.GetInseminatorHomeTimeCollection" /></td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>HomeTimeRegistration</td><td>The hometime registration <see cref="T:DLBR.DCF.KDB.DataContracts.InseminatorHomeTime.HomeTimeRegistration" /></td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.InseminatorHomeTime.RegisterHomeTimeRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.InseminatorHomeTime.RegisterHomeTimeResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            DateTime regDate = DateTime.Today;
            long insNumber = 4001;

            InseminatorHomeTimeEntityServiceContractClient client =
                new InseminatorHomeTimeEntityServiceContractClient("InseminatorHomeTimeEntity");

            try
            {
                client.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                client.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                HomeTime homeTime = new HomeTime() {Minutes = 22.5};
                
                client.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                client.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                HomeTimeRegistration homeTimeRegistration = client.RegisterHomeTime(homeTime, insNumber, regDate);

                homeTimeRegistration.HomeTime.Minutes.Should().Be(22.5);

                homeTimeRegistration.HomeTime.Minutes = 60;
                client.UpdateHomeTime(ref homeTimeRegistration);

                homeTimeRegistration.HomeTime.Minutes.Should().Be(60);

                client.DeleteHomeTime(homeTimeRegistration);
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message, "Exception");
                throw;
            }
            finally
            {
                if (client.State != CommunicationState.Faulted)
                {
                    client.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.InseminatorHomeTimeEntityService.UpdateHomeTime(DLBR.DCF.KDB.MessageContracts.InseminatorHomeTime.UpdateHomeTimeRequest)">
      <summary>
        <h1>Functional Description</h1>
            Update HomeTime registration
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>HomeTimeRegistration</td><td>yes</td><td>&gt;0</td><td>The delivered semen registration to update.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>HomeTimeRegistration</td><td>The delivered semen update <see cref="T:DLBR.DCF.KDB.DataContracts.InseminatorHomeTime.HomeTimeRegistration" /></td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.InseminatorHomeTime.UpdateHomeTimeRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.InseminatorHomeTime.UpdateHomeTimeResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            DateTime regDate = DateTime.Today;
            long insNumber = 4001;

            InseminatorHomeTimeEntityServiceContractClient client =
                new InseminatorHomeTimeEntityServiceContractClient("InseminatorHomeTimeEntity");

            try
            {
                client.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                client.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                HomeTime homeTime = new HomeTime() {Minutes = 22.5};
                
                client.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                client.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                HomeTimeRegistration homeTimeRegistration = client.RegisterHomeTime(homeTime, insNumber, regDate);

                homeTimeRegistration.HomeTime.Minutes.Should().Be(22.5);

                homeTimeRegistration.HomeTime.Minutes = 60;
                client.UpdateHomeTime(ref homeTimeRegistration);

                homeTimeRegistration.HomeTime.Minutes.Should().Be(60);

                client.DeleteHomeTime(homeTimeRegistration);
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message, "Exception");
                throw;
            }
            finally
            {
                if (client.State != CommunicationState.Faulted)
                {
                    client.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.InseminatorHomeTimeEntityService.DeleteHomeTime(DLBR.DCF.KDB.MessageContracts.InseminatorHomeTime.DeleteHomeTimeRequest)">
      <summary>
        <h1>Functional Description</h1>
            Delete HomeTime registration
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>HomeTimeRegistration</td><td>yes</td><td>&gt;0</td><td>The delivered semen registration to delete.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.InseminatorHomeTime.DeleteHomeTimeRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.InseminatorHomeTime.DeleteHomeTimeResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            DateTime regDate = DateTime.Today;
            long insNumber = 4001;

            InseminatorHomeTimeEntityServiceContractClient client =
                new InseminatorHomeTimeEntityServiceContractClient("InseminatorHomeTimeEntity");

            try
            {
                client.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                client.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                HomeTime homeTime = new HomeTime() {Minutes = 22.5};
                
                client.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                client.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                HomeTimeRegistration homeTimeRegistration = client.RegisterHomeTime(homeTime, insNumber, regDate);

                homeTimeRegistration.HomeTime.Minutes.Should().Be(22.5);

                homeTimeRegistration.HomeTime.Minutes = 60;
                client.UpdateHomeTime(ref homeTimeRegistration);

                homeTimeRegistration.HomeTime.Minutes.Should().Be(60);

                client.DeleteHomeTime(homeTimeRegistration);
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message, "Exception");
                throw;
            }
            finally
            {
                if (client.State != CommunicationState.Faulted)
                {
                    client.Close();
                }
            }
</code></example>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.DiagnosisEntityService">
      <summary>
        <h1>General</h1>
        <p>
            The following URIs specifies the location of the service in the production- and production test environment. 
            By default services in both the production and the production test environment uses the production data stores. The alternative URIs, which uses the test data stores (Medio), may be used for testing purposes.
            Please note that service versions might differ between the production- and production test environments. Before you begin using the service, please consult the person responsible as described in section 3.7 – Responsibility assignment.
            </p>
        <p>
          <b>Production URL:</b>
          <a href="http://prod.dcf.ws.dlbr.dk/DCFServices/DiagnosisEntityService.svc">http://prod.dcf.ws.dlbr.dk/DCFServices/DiagnosisEntityService.svc</a>
        </p>
        <p>
          <b>Accept test URL:</b>
          <a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/DiagnosisEntityService.svc">http://accepttest.dcf.ws.dlbr.dk/DCFServices/DiagnosisEntityService.svc</a>
        </p>
        <h1>Web Service Description</h1>
            The machine-readable description in the form of a WSDL document can be obtained by querying the following URI’s.
            <p><b>Production WSDL:</b><a href="http://prod.dcf.ws.dlbr.dk/DCFServices/DiagnosisEntityService.svc?wsdl">http://prod.dcf.ws.dlbr.dk/DCFServices/DiagnosisEntityService.svc?wsdl</a></p><p><b>Accept test WSDL:</b><a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/DiagnosisEntityService.svc?wsdl">http://accepttest.dcf.ws.dlbr.dk/DCFServices/DiagnosisEntityService.svc?wsdl</a></p><h1>Endpoints</h1>
            For information regarding endpoints, see topic 'Endpoints available in DCF Services'
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.DiagnosisEntityService.FindDiagnosisByHerdNumber(DLBR.DCF.KDB.MessageContracts.FindDiagnosisByHerdNumberRequest)">
      <summary>
        <h1>Functional Description</h1>
            Find Diagnosis by Herd and Animaltype
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>HerdNumber</td><td>yes</td><td>&gt;0</td><td>The danish central husbandry registration number of the property, to which the order is to be registrated to.</td></tr><tr><td>AnimalType</td><td>conditional</td><td>Code&gt;0</td><td>The type of animal(e.g. cattle) in the herd defined by the ShipToHerdNumber member.If ShipToHerdNumber is set, AnimalType is required.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>DiagnosisList</td><td>A collection of Diagnosis</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindDiagnosisByHerdNumberRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindDiagnosisByHerdNumberResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            DiagnosisEntityServiceContractClient proxy = new DiagnosisEntityServiceContractClient("DiagnosisEntityService");
            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID_FARMER;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD_FARMER;

                AnimalType animalType = new AnimalType() { Code = 12 };

                DiagnosisCollection result = proxy.FindDiagnosisByHerdNumber(animalType, TestUtil.HERD_NUMBER);
                result.Should().NotBeNull().And.NotBeEmpty();
                result.ToList().ForEach(d =&gt; d.DiagnosisTreatments.Should().NotBeNull().And.NotBeEmpty());
                result.ToList().ForEach(
                    d =&gt; d.DiagnosisTreatments.ToList().ForEach(t =&gt; t.ProductName.Should().NotBeNullOrEmpty()));
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.DiagnosisEntityService.FindActiveTreatmentsByHerdNumber(DLBR.DCF.KDB.MessageContracts.FindActiveTreatmentsByHerdNumberRequest)">
      <summary>
        <h1>Functional Description</h1>
            Find Active treatments by Herd
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>HerdNumber</td><td>yes</td><td>&gt;0</td><td>The danish central husbandry registration number of the property, to which the order is to be registrated to.</td></tr><tr><td>AnimalType</td><td>conditional</td><td>Code&gt;0</td><td>The type of animal(e.g. cattle) in the herd defined by the ShipToHerdNumber member.If ShipToHerdNumber is set, AnimalType is required.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>TreatmentList</td><td>A collection of Active treatments</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindActiveTreatmentsByHerdNumberRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindActiveTreatmentsByHerdNumberResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            DiagnosisEntityServiceContractClient proxy = new DiagnosisEntityServiceContractClient("DiagnosisEntityService_Federation_Adfs");
            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID_FARMER;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD_FARMER;

                AnimalType animalType = new AnimalType() { Code = 12 };

                TreatmentCollection result = proxy.FindActiveTreatmentsByHerdNumber(animalType, TestUtil.HERD_NUMBER);
                result.Should().NotBeNull();

            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.DiagnosisEntityService.RegisterTreatment(DLBR.DCF.KDB.MessageContracts.RegisterTreatmentRequest)">
      <summary>
        <h1>Functional Description</h1>
            Register treatment
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>HerdNumber</td><td>yes</td><td>&gt;0</td><td>The danish central husbandry registration number of the property, to which the order is to be registrated to.</td></tr><tr><td>AnimalType</td><td>yes</td><td>&gt;0</td><td>AnimalType</td></tr><tr><td>AnimalNumber</td><td>yes</td><td>&gt;0</td>The animal number to find replacement orders by.<td></td></tr><tr><td>StartDate</td><td>yes</td><td>Startdate for the treatment</td><td></td></tr><tr><td>Diagnosis</td><td>yes</td><td>&gt;0</td><td>Diagnosis - Se FindDiagnosisByHerdNumber to find Diagnosis</td></tr><tr><td>Weight</td><td>yes</td><td>&gt;0</td><td>Weight for the animal</td></tr><tr><td>AutoComplete</td><td>yes</td><td>&gt;0</td><td>AutoComplete flag</td></tr><tr><td>WarningFlags</td><td>no</td><td></td><td>List of WarningFlags to force</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>Treatment</td><td>The generated treatment</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.RegisterTreatmentRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.RegisterTreatmentResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            AnimalType animalType = new AnimalType() {Code = 12};
            long diagnosisId = 1199546;
            long animalNumber = 2761202190;

            DiagnosisEntityServiceContractClient proxy = new DiagnosisEntityServiceContractClient("DiagnosisEntityService_Federation_Adfs");
            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID_FARMER;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD_FARMER;


                Collection&lt;Diagnosis&gt; diagnoses = proxy.FindDiagnosisByHerdNumber(animalType,
                                                                                  TestUtil.HERD_NUMBER);

                Diagnosis yverbetændelsebetændelse = diagnoses.FirstOrDefault(d =&gt; d.DiagnosisId == diagnosisId);
                yverbetændelsebetændelse.Should().NotBeNull();

                Treatment expectedTreatment = new Treatment()
                                                  {
                                                      AnimalType = animalType,
                                                      AnimalNumber = animalNumber,
                                                      AutoComplete = false,
                                                      Completed = false,
                                                      HerdDiagnosis = yverbetændelsebetændelse,
                                                      HerdNumber = TestUtil.HERD_NUMBER,
                                                      TreatmentDate = DateTime.Today,
                                                      Weight = 120
                                                  };
                Treatment registeredTreatment = proxy.RegisterTreatment(expectedTreatment.AnimalNumber, expectedTreatment.AnimalType, expectedTreatment.AutoComplete, expectedTreatment.HerdDiagnosis, expectedTreatment.HerdNumber, expectedTreatment.TreatmentDate, null, expectedTreatment.Weight);
                registeredTreatment.Should().NotBeNull();
                registeredTreatment.ShouldHave().Properties(t =&gt; t.AnimalNumber, t =&gt; t.AutoComplete, t =&gt; t.Completed, t =&gt; t.HerdNumber, t =&gt; t.TreatmentDate, t =&gt; t.Weight).EqualTo(expectedTreatment);
                registeredTreatment.AnimalType.Code.Should().Be(animalType.Code);
                registeredTreatment.HerdDiagnosis.DiagnosisId.Should().Be(diagnosisId);

                TreatmentCollection activeTreatments = proxy.FindActiveTreatmentsByHerdNumber(animalType, TestUtil.HERD_NUMBER);
                activeTreatments.Should().NotBeNull().And.NotBeEmpty();

                expectedTreatment.Weight = 130;
                registeredTreatment.Weight = 130;

                proxy.UpdateTreatment(ref registeredTreatment, null);
                registeredTreatment.Should().NotBeNull();
                registeredTreatment.ShouldHave().Properties(t =&gt; t.AnimalNumber, t =&gt; t.AutoComplete, t =&gt; t.Completed, t =&gt; t.HerdNumber, t =&gt; t.TreatmentDate, t =&gt; t.Weight).EqualTo(expectedTreatment);
                registeredTreatment.AnimalType.Code.Should().Be(animalType.Code);
                registeredTreatment.HerdDiagnosis.DiagnosisId.Should().Be(diagnosisId);

                proxy.DeleteTreatment(registeredTreatment, null);

            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.DiagnosisEntityService.UpdateTreatment(DLBR.DCF.KDB.MessageContracts.UpdateTreatmentRequest)">
      <summary>
        <h1>Functional Description</h1>
            Update treatment
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>Treatment</td><td>yes</td><td>&gt;0</td><td>Treatment to update</td></tr><tr><td>WarningFlag</td><td>no</td><td></td><td>List of WarningFlags to force</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>Treatment</td><td>The updated treatment</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.UpdateTreatmentRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.UpdateTreatmentResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            AnimalType animalType = new AnimalType() {Code = 12};
            long diagnosisId = 1199546;
            long animalNumber = 2761202190;

            DiagnosisEntityServiceContractClient proxy = new DiagnosisEntityServiceContractClient("DiagnosisEntityService_Federation_Adfs");
            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID_FARMER;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD_FARMER;


                Collection&lt;Diagnosis&gt; diagnoses = proxy.FindDiagnosisByHerdNumber(animalType,
                                                                                  TestUtil.HERD_NUMBER);

                Diagnosis yverbetændelsebetændelse = diagnoses.FirstOrDefault(d =&gt; d.DiagnosisId == diagnosisId);
                yverbetændelsebetændelse.Should().NotBeNull();

                Treatment expectedTreatment = new Treatment()
                                                  {
                                                      AnimalType = animalType,
                                                      AnimalNumber = animalNumber,
                                                      AutoComplete = false,
                                                      Completed = false,
                                                      HerdDiagnosis = yverbetændelsebetændelse,
                                                      HerdNumber = TestUtil.HERD_NUMBER,
                                                      TreatmentDate = DateTime.Today,
                                                      Weight = 120
                                                  };
                Treatment registeredTreatment = proxy.RegisterTreatment(expectedTreatment.AnimalNumber, expectedTreatment.AnimalType, expectedTreatment.AutoComplete, expectedTreatment.HerdDiagnosis, expectedTreatment.HerdNumber, expectedTreatment.TreatmentDate, null, expectedTreatment.Weight);
                registeredTreatment.Should().NotBeNull();
                registeredTreatment.ShouldHave().Properties(t =&gt; t.AnimalNumber, t =&gt; t.AutoComplete, t =&gt; t.Completed, t =&gt; t.HerdNumber, t =&gt; t.TreatmentDate, t =&gt; t.Weight).EqualTo(expectedTreatment);
                registeredTreatment.AnimalType.Code.Should().Be(animalType.Code);
                registeredTreatment.HerdDiagnosis.DiagnosisId.Should().Be(diagnosisId);

                TreatmentCollection activeTreatments = proxy.FindActiveTreatmentsByHerdNumber(animalType, TestUtil.HERD_NUMBER);
                activeTreatments.Should().NotBeNull().And.NotBeEmpty();

                expectedTreatment.Weight = 130;
                registeredTreatment.Weight = 130;

                proxy.UpdateTreatment(ref registeredTreatment, null);
                registeredTreatment.Should().NotBeNull();
                registeredTreatment.ShouldHave().Properties(t =&gt; t.AnimalNumber, t =&gt; t.AutoComplete, t =&gt; t.Completed, t =&gt; t.HerdNumber, t =&gt; t.TreatmentDate, t =&gt; t.Weight).EqualTo(expectedTreatment);
                registeredTreatment.AnimalType.Code.Should().Be(animalType.Code);
                registeredTreatment.HerdDiagnosis.DiagnosisId.Should().Be(diagnosisId);

                proxy.DeleteTreatment(registeredTreatment, null);

            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.DiagnosisEntityService.DeleteTreatment(DLBR.DCF.KDB.MessageContracts.DeleteTreatmentRequest)">
      <summary>
        <h1>Functional Description</h1>
            Delete treatment
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>Treatment</td><td>yes</td><td>&gt;0</td><td>Treatment to delete</td></tr><tr><td>WarningFlags</td><td>no</td><td></td><td>List of WarningFlags to force</td></tr></table><h1>Output parameters</h1><table></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.DeleteTreatmentRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.DeleteTreatmentResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            AnimalType animalType = new AnimalType() {Code = 12};
            long diagnosisId = 1199546;
            long animalNumber = 2761202190;

            DiagnosisEntityServiceContractClient proxy = new DiagnosisEntityServiceContractClient("DiagnosisEntityService_Federation_Adfs");
            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID_FARMER;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD_FARMER;


                Collection&lt;Diagnosis&gt; diagnoses = proxy.FindDiagnosisByHerdNumber(animalType,
                                                                                  TestUtil.HERD_NUMBER);

                Diagnosis yverbetændelsebetændelse = diagnoses.FirstOrDefault(d =&gt; d.DiagnosisId == diagnosisId);
                yverbetændelsebetændelse.Should().NotBeNull();

                Treatment expectedTreatment = new Treatment()
                                                  {
                                                      AnimalType = animalType,
                                                      AnimalNumber = animalNumber,
                                                      AutoComplete = false,
                                                      Completed = false,
                                                      HerdDiagnosis = yverbetændelsebetændelse,
                                                      HerdNumber = TestUtil.HERD_NUMBER,
                                                      TreatmentDate = DateTime.Today,
                                                      Weight = 120
                                                  };
                Treatment registeredTreatment = proxy.RegisterTreatment(expectedTreatment.AnimalNumber, expectedTreatment.AnimalType, expectedTreatment.AutoComplete, expectedTreatment.HerdDiagnosis, expectedTreatment.HerdNumber, expectedTreatment.TreatmentDate, null, expectedTreatment.Weight);
                registeredTreatment.Should().NotBeNull();
                registeredTreatment.ShouldHave().Properties(t =&gt; t.AnimalNumber, t =&gt; t.AutoComplete, t =&gt; t.Completed, t =&gt; t.HerdNumber, t =&gt; t.TreatmentDate, t =&gt; t.Weight).EqualTo(expectedTreatment);
                registeredTreatment.AnimalType.Code.Should().Be(animalType.Code);
                registeredTreatment.HerdDiagnosis.DiagnosisId.Should().Be(diagnosisId);

                TreatmentCollection activeTreatments = proxy.FindActiveTreatmentsByHerdNumber(animalType, TestUtil.HERD_NUMBER);
                activeTreatments.Should().NotBeNull().And.NotBeEmpty();

                expectedTreatment.Weight = 130;
                registeredTreatment.Weight = 130;

                proxy.UpdateTreatment(ref registeredTreatment, null);
                registeredTreatment.Should().NotBeNull();
                registeredTreatment.ShouldHave().Properties(t =&gt; t.AnimalNumber, t =&gt; t.AutoComplete, t =&gt; t.Completed, t =&gt; t.HerdNumber, t =&gt; t.TreatmentDate, t =&gt; t.Weight).EqualTo(expectedTreatment);
                registeredTreatment.AnimalType.Code.Should().Be(animalType.Code);
                registeredTreatment.HerdDiagnosis.DiagnosisId.Should().Be(diagnosisId);

                proxy.DeleteTreatment(registeredTreatment, null);

            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.DiagnosisEntityService.DeleteTreatmentLine(DLBR.DCF.KDB.MessageContracts.DeleteTreatmentLineRequest)">
      <summary>
        <h1>Functional Description</h1>
            Delete treatment line
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>TreatmentLine</td><td>yes</td><td>&gt;0</td><td>TreatmentLine</td></tr></table><h1>Output parameters</h1><table></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.DeleteTreatmentLineRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.DeleteTreatmentLineResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>Method UpdateTreatmentLine not found in class ..\tests\DLBR.DCF.KDB.IntegrationTests\DiagnosisEntityServiceTest.cs</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.DiagnosisEntityService.UpdateTreatmentLine(DLBR.DCF.KDB.MessageContracts.UpdateTreatmentLineRequest)">
      <summary>
        <h1>Functional Description</h1>
            Update treatment line
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>TreatmentLine</td><td>yes</td><td>&gt;0</td><td>TreatmentLine</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>TreatmentLine</td><td>The updated treatmentLine</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.UpdateTreatmentLineRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.UpdateTreatmentLineResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>Method UpdateTreatmentLine not found in class ..\tests\DLBR.DCF.KDB.IntegrationTests\DiagnosisEntityServiceTest.cs</code></example>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.ReportingServicesAuthorizationEntityServiceBase">
      <summary>
            Service Class - ReportingServicesAuthorizationEntityService
            </summary>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.ReportingServicesAuthorizationEntityService">
      <summary>
        <h1>General</h1>
        <p>
            The following URIs specifies the location of the service in the production- and production test environment. 
            By default services in both the production and the production test environment uses the production data stores. The alternative URIs, which uses the test data stores (Medio), may be used for testing purposes.
            Please note that service versions might differ between the production- and production test environments. Before you begin using the service, please consult the person responsible as described in section 3.7 – Responsibility assignment.
            </p>
        <p>
          <b>Production URL:</b>
          <a href="http://prod.dcf.ws.dlbr.dk/DCFServices/ReportingServicesAuthorizationEntityService.svc">http://prod.dcf.ws.dlbr.dk/DCFServices/ReportingServicesAuthorizationEntityService.svc</a>
        </p>
        <p>
          <b>Accept test URL:</b>
          <a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/ReportingServicesAuthorizationEntityService.svc">http://accepttest.dcf.ws.dlbr.dk/DCFServices/ReportingServicesAuthorizationEntityService.svc</a>
        </p>
        <h1>Web Service Description</h1>
            The machine-readable description in the form of a WSDL document can be obtained by querying the following URI’s.
            <p><b>Production WSDL:</b><a href="http://prod.dcf.ws.dlbr.dk/DCFServices/ReportingServicesAuthorizationEntityService.svc?wsdl">http://prod.dcf.ws.dlbr.dk/DCFServices/ReportingServicesAuthorizationEntityService.svc?wsdl</a></p><p><b>Accept test WSDL:</b><a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/ReportingServicesAuthorizationEntityService.svc?wsdl">http://accepttest.dcf.ws.dlbr.dk/DCFServices/ReportingServicesAuthorizationEntityService.svc?wsdl</a></p><h1>Endpoints</h1>
            For information regarding endpoints, see topic 'Endpoints available in DCF Services'
            </summary>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateAnimalActivity">
      <summary></summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateAnimalActivity.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.AnimalEntityService.AnimalActivityEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.AnimalEntityService.AnimalActivityEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.AnimalActivity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateEarmarkSupplement.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.EarmarkSupplement,System.Boolean)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.EarmarkReplacement" /> to translate.</param>
      <param name="useCache"></param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.GeneratedCode.BusinessEntities.EarmarkSupplementEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateEarmarkSupplement.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.GeneratedCode.BusinessEntities.EarmarkSupplementEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.GeneratedCode.BusinessEntities.EarmarkSupplementEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.EarmarkSupplement" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateFCIKeyfigureEntity.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.GeneratedCode.DataEntities.FCIKeyfigureEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.GeneratedCode.DataEntities.FCIKeyfigureEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.FCIKeyfigureData" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateMUBullSlaughterInformation.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.IMUSlaughterInformationEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.IMUSlaughterInformationEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.MUBullSlaughterInformation" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateOrganic.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.GeneratedCode.BusinessEntities.OrganicEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.GeneratedCode.BusinessEntities.OrganicEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.HerdPensionList" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslatePension.TranslateEntityToDataContract(System.Collections.ObjectModel.Collection{DLBR.DCF.KDB.BusinessEntities.GeneratedCode.BusinessEntities.PensionEntity})">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.GeneratedCode.BusinessEntities.PensionEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.HerdPensionList" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.KPIService">
      <summary>
        <h1>General</h1>
        <p>
            The following URIs specifies the location of the service in the production- and production test environment. 
            By default services in both the production and the production test environment uses the production data stores. The alternative URIs, which uses the test data stores (Medio), may be used for testing purposes.
            Please note that service versions might differ between the production- and production test environments. Before you begin using the service, please consult the person responsible as described in section 3.7 – Responsibility assignment.
            </p>
        <p>
          <b>Production URL:</b>
          <a href="http://prod.dcf.ws.dlbr.dk/DCFServices/KPIService.svc">http://prod.dcf.ws.dlbr.dk/DCFServices/KPIService.svc</a>
        </p>
        <p>
          <b>Accept test URL:</b>
          <a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/KPIService.svc">http://accepttest.dcf.ws.dlbr.dk/DCFServices/KPIService.svc</a>
        </p>
        <h1>Web Service Description</h1>
            The machine-readable description in the form of a WSDL document can be obtained by querying the following URI’s.
            <p><b>Production WSDL:</b><a href="http://prod.dcf.ws.dlbr.dk/DCFServices/KPIService.svc?wsdl">http://prod.dcf.ws.dlbr.dk/DCFServices/KPIService.svc?wsdl</a></p><p><b>Accept test WSDL:</b><a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/KPIService.svc?wsdl">http://accepttest.dcf.ws.dlbr.dk/DCFServices/KPIService.svc?wsdl</a></p><h1>Endpoints</h1>
            For information regarding endpoints, see topic 'Endpoints available in DCF Services'
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.KPIService.GetModules(DLBR.DCF.KDB.MessageContracts.KpiService.GetModulesRequest)">
      <summary>
        <h1>Functional Description</h1>
            This operation returns all the modules defined in the system. 
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>ModuleList</td><td>Collection of modules defined.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.KpiService.GetModulesRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.KpiService.GetModulesResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>Method GetModules not found in class ..\tests\DLBR.DCF.KDB.IntegrationTests\KPIServiceTest.cs</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.KPIService.GetKeyPerformanceIndicators(DLBR.DCF.KDB.MessageContracts.KPIService.GetKeyPerformanceIndicatorsRequest)">
      <summary>
        <h1>Functional Description</h1>
            This operation returns all Key Performance Indicators defined in the system for the specified module. Besides that all obtained values and target information
            for the specified management units are returned.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>ManagementUnitIds</td><td>yes</td><td>&gt;0</td><td>A list of management unit ids for which you want obtained values and target information.</td></tr><tr><td>Module</td><td></td><td></td><td>The module for which you want key performance indicators. If not specified alle KPIs are returned.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>KeyPerformanceIndicators</td><td>The returned KPIs with their associated obtained values and target information for the specified management units.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.KPIService.GetKeyPerformanceIndicatorsRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.KPIService.GetKeyPerformanceIndicatorsResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>Method GetKeyPerformanceIndicators_Page2 not found in class ..\tests\DLBR.DCF.KDB.IntegrationTests\KPIServiceTest.cs</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.KPIService.InsertTargetInformation(DLBR.DCF.KDB.MessageContracts.KPIService.InsertTargetInformationRequest)">
      <summary>
        <h1>Functional Description</h1>
            This operation creates a number of target informations within the given management unit id.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>ManagementUnitId</td><td>yes</td><td>&gt;0</td><td>The management unit id that you wish to create target information for.</td></tr><tr><td>TargetInformation</td><td>yes</td><td>All objects must have same management unit id</td><td>A collection of target information objects to be created for the specified management unit.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>TargetInformation</td><td>The updated target information.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.KPIService.InsertTargetInformationRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.KPIService.InsertTargetInformationResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>Method InsertTargetInformation not found in class ..\tests\DLBR.DCF.KDB.IntegrationTests\KPIServiceTest.cs</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.KPIService.UpdateTargetInformation(DLBR.DCF.KDB.MessageContracts.KPIService.UpdateTargetInformationRequest)">
      <summary>
        <h1>Functional Description</h1>
            This operation updates a number of target informations within the given management unit id.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>ManagementUnitId</td><td>yes</td><td>&gt;0</td><td>The management unit id that you wish to create target information for.</td></tr><tr><td>TargetInformation</td><td>yes</td><td>All objects must have same management unit id</td><td>A collection of target information objects to be updated for the specified management unit.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>TargetInformation</td><td>The updated target information.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.KPIService.UpdateTargetInformationRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.KPIService.UpdateTargetInformationResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>Method UpdateTargetInformation not found in class ..\tests\DLBR.DCF.KDB.IntegrationTests\KPIServiceTest.cs</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.KPIService.DeleteTargetInformation(DLBR.DCF.KDB.MessageContracts.KPIService.DeleteTargetInformationRequest)">
      <summary>
        <h1>Functional Description</h1>
            This operation deletes a number of target informations.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>TargetInformation</td><td>yes</td><td></td><td>A collection of target information objects to be deleted.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>TargetInformation</td><td>The updated target information.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.KPIService.DeleteTargetInformationRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.KPIService.DeleteTargetInformationResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>Method InsertTargetInformation not found in class ..\tests\DLBR.DCF.KDB.IntegrationTests\KPIServiceTest.cs</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.KPIService.FindKPIAlarms(DLBR.DCF.KDB.MessageContracts.KPIService.FindKPIAlarmsRequest)">
      <summary>
        <h1>Functional Description</h1>
            Returns current KPI alarms
            27 Mælk leveret i forhold til prognose
            22 Insemineringer på køer
            18 Døde dyr
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>None</td><td>no</td><td></td><td>No input.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>KPIAlarmList</td><td>List of active <see cref="T:DLBR.DCF.KDB.DataContracts.KPIService.KPIAlarm" /> entities</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.KPIService.FindKPIAlarmsRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.KPIService.FindKPIAlarmsResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            SecurityToken token = AdfsHelper.GetSecurityToken(Settings.Default.ADFS_IdpEndpoint,
                Settings.Default.ADFS_Realm, TestUtil.USER_ID, TestUtil.PASSWORD);
            using (var service = new WcfServiceWrapper&lt;KPIServiceContract&gt;(token,
                String.Format("https://{0}/DCFServices/kpiservice.svc/adfs", Settings.Default.DCF_Hostname)))
            {
                service.ConfigureChannel += factory =&gt;
                                            {
                                                service.Binding.MaxReceivedMessageSize = 200000000;
                                            };

                GetModulesResponse response = service.Channel.GetModules(new GetModulesRequest());
                KpiModuleCollection modules = response.ModuleList;
                var result = service.Channel.FindKPIAlarms(new FindKPIAlarmsRequest());

                result.Should().NotBeNull();
                result.KPIAlarmList.Should().NotBeNull().And.NotBeEmpty();
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.KPIService.FindKMPKPIsByCVRNumber(DLBR.DCF.KDB.MessageContracts.KPIService.FindKMPKPIsByCVRNumberRequest)">
      <summary>
        <h1>Functional Description</h1>
            Returns current KMP KPI list by cvr number
            27 Mælk leveret i forhold til prognose
            22 Insemineringer på køer
            18 Døde dyr
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>None</td><td></td><td></td><td></td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>KMPKPIList</td><td>List of KMP KPI <see cref="T:DLBR.DCF.KDB.DataContracts.KPIService.KPIAlarm" /> entities</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.KPIService.FindKMPKPIsByCVRNumberRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.KPIService.FindKMPKPIsByCVRNumberResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            string cvrClaimtype = "http://claims.dlbr.dk/2013/02/cvrnumber";
            string realm = "https://devtest-www-portalservices.vfltest.dk/DmsKmpPs/";


            GenericXmlSecurityToken
                web62529token = (GenericXmlSecurityToken)AdfsHelper.GetSecurityToken(Settings.Default.ADFS_IdpEndpoint, realm, "dcf14138048", "dcf14138048");
            GenericXmlSecurityToken actAsToken =
                AdfsHelper.GetActAsToken(Settings.Default.ADFS_IdpEndpoint, Settings.Default.ADFS_Realm, "WebDyrSA",
                    "WebDyrSA123", web62529token) as GenericXmlSecurityToken;


            SecurityToken tokenToValidate = FederatedAuthentication.ServiceConfiguration.SecurityTokenHandlers.ReadToken(new XmlTextReader(new StringReader(actAsToken.TokenXml.OuterXml)));
            ClaimsIdentity actAsIdentity = (ClaimsIdentity)FederatedAuthentication.ServiceConfiguration.SecurityTokenHandlers.ValidateToken(tokenToValidate).First();

            Claim cvrClaim = actAsIdentity.Claims.SingleOrDefault(c =&gt; c.ClaimType == cvrClaimtype);
            cvrClaim.Should().NotBeNull();
            long cvrNumber;
            bool cvrvalidated = long.TryParse(cvrClaim.Value, out cvrNumber);
            cvrvalidated.Should().BeTrue("User must be CVR validated");

            using (var service = new WcfServiceWrapper&lt;KPIServiceContract&gt;(actAsToken,
                                                                                    String.Format(
                                                                                        "https://{0}/DCFServices/KPIService.svc/adfs",
                                                                                        Settings.Default.DCF_Hostname)))
            {
                var result = service.Channel.FindKMPKPIsByCVRNumber(new FindKMPKPIsByCVRNumberRequest());

                result.Should().NotBeNull();
                result.KMPKPIList.Should().NotBeNull().And.NotBeEmpty();
                result.KMPKPIList.Should().OnlyContain(kpi =&gt; kpi.CVRNumber == cvrNumber);
            }
</code></example>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.MilkPriceService">
      <summary>
        <h1>General</h1>
        <p>
            The following URIs specifies the location of the service in the production- and production test environment. 
            By default services in both the production and the production test environment uses the production data stores. The alternative URIs, which uses the test data stores (Medio), may be used for testing purposes.
            Please note that service versions might differ between the production- and production test environments. Before you begin using the service, please consult the person responsible as described in section 3.7 – Responsibility assignment.
            </p>
        <p>
          <b>Production URL:</b>
          <a href="http://prod.dcf.ws.dlbr.dk/DCFServices/MilkPriceService.svc">http://prod.dcf.ws.dlbr.dk/DCFServices/MilkPriceService.svc</a>
        </p>
        <p>
          <b>Accept test URL:</b>
          <a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/MilkPriceService.svc">http://accepttest.dcf.ws.dlbr.dk/DCFServices/MilkPriceService.svc</a>
        </p>
        <h1>Web Service Description</h1>
            The machine-readable description in the form of a WSDL document can be obtained by querying the following URI’s.
            <p><b>Production WSDL:</b><a href="http://prod.dcf.ws.dlbr.dk/DCFServices/MilkPriceService.svc?wsdl">http://prod.dcf.ws.dlbr.dk/DCFServices/MilkPriceService.svc?wsdl</a></p><p><b>Accept test WSDL:</b><a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/MilkPriceService.svc?wsdl">http://accepttest.dcf.ws.dlbr.dk/DCFServices/MilkPriceService.svc?wsdl</a></p><h1>Endpoints</h1>
            For information regarding endpoints, see topic 'Endpoints available in DCF Services'
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.MilkPriceService.GetModules(DLBR.DCF.KDB.MessageContracts.MilkPriceService.GetModulesRequest)">
      <summary>
        <h1>Functional Description</h1>
            This operation returns all the modules defined in the system. 
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>ModuleList</td><td>Collection of the <see cref="T:DLBR.DCF.KDB.DataContracts.MilkPriceService.MilkPriceModule" /> modules defined.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.MilkPriceService.GetModulesRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.MilkPriceService.GetModulesResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            GetModules("MilkPriceService_Federation_Adfs");
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.MilkPriceService.GetMultipleMilkPrices(DLBR.DCF.KDB.MessageContracts.MilkPriceService.GetMultipleMilkPricesRequest)">
      <summary>
        <h1>Functional Description</h1>
            This operation calculates milk prices for a number of management units in given periods of time.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>Inquiries</td><td>Yes</td><td></td><td>A collection of <see cref="T:DLBR.DCF.KDB.DataContracts.MilkPriceService.MilkPriceInquiry" /> objects</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>MilkPrices</td><td>A collection of calculated milk price objects. See <see cref="T:DLBR.DCF.KDB.DataContracts.MilkPriceService.MilkPrice" />.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.MilkPriceService.GetMultipleMilkPricesRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.MilkPriceService.GetMultipleMilkPricesResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            GetMultipleMilkPrices("MilkPriceService_Federation_Adfs");
</code></example>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.ReducedAnimalEntityServiceV2">
      <summary>
        <h1>General</h1>
        <p>
            The following URIs specifies the location of the service in the production- and production test environment. 
            By default services in both the production and the production test environment uses the production data stores. The alternative URIs, which uses the test data stores (Medio), may be used for testing purposes.
            Please note that service versions might differ between the production- and production test environments. Before you begin using the service, please consult the person responsible as described in section 3.7 – Responsibility assignment.
            </p>
        <p>
          <b>Production URL:</b>
          <a href="http://prod.dcf.ws.dlbr.dk/DCFServices/ReducedAnimalEntityServiceV2.svc">http://prod.dcf.ws.dlbr.dk/DCFServices/ReducedAnimalEntityServiceV2.svc</a>
        </p>
        <p>
          <b>Accept test URL:</b>
          <a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/ReducedAnimalEntityServiceV2.svc">http://accepttest.dcf.ws.dlbr.dk/DCFServices/ReducedAnimalEntityServiceV2.svc</a>
        </p>
        <h1>Web Service Description</h1>
            The machine-readable description in the form of a WSDL document can be obtained by querying the following URI’s.
            <p><b>Production WSDL:</b><a href="http://prod.dcf.ws.dlbr.dk/DCFServices/ReducedAnimalEntityServiceV2.svc?wsdl">http://prod.dcf.ws.dlbr.dk/DCFServices/ReducedAnimalEntityServiceV2.svc?wsdl</a></p><p><b>Accept test WSDL:</b><a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/ReducedAnimalEntityServiceV2.svc?wsdl">http://accepttest.dcf.ws.dlbr.dk/DCFServices/ReducedAnimalEntityServiceV2.svc?wsdl</a></p><h1>Endpoints</h1>
            For information regarding endpoints, see topic 'Endpoints available in DCF Services'
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateStateEvents.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.StateEvents)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.StateEvents" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.StateEventsEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateStateEvents.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.StateEventsEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.StateEventsEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.StateEvents" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateEvent.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.Event)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.Event" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.EventEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateEvent.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.EventEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.EventEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.Event" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateEventTimeLog.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.EventTimeLog)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.EventTimeLog" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.EventTimeLogEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateEventTimeLog.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.EventTimeLogEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.EventTimeLogEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.EventTimeLog" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateEventInfo.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.EventInfo)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.EventInfo" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.EventInfoEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateEventInfo.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.EventInfoEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.EventInfoEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.EventInfo" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateInseminatorTimeRecordUpdateBatchOperation.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.InseminatorTimeRecordUpdateBatchOperation)">
      <summary>
            Translates the data contract to business entity.
            </summary>
      <param name="from">From.</param>
      <returns>Business entity</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateSubscriberContactInfo.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.SubscriberContactInfo)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.SubscriberContactInfo" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.SubscriberContactInfoEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateSubscriberContactInfo.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.SubscriberContactInfoEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.SubscriberContactInfoEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.SubscriberContactInfo" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateSubscriberInvoiceInfo.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.SubscriberInvoiceInfo)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.SubscriberInvoiceInfo" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.SubscriberInvoiceEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateSubscriberInvoiceInfo.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.SubscriberInvoiceEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.SubscriberInvoiceEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.SubscriberInvoiceInfo" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateInvoiceInfo.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.InvoiceInfo)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.InvoiceInfo" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.InvoiceInfoEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateInvoiceInfo.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.InvoiceInfoEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.InvoiceInfoEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.InvoiceInfo" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateHerdInfo.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.HerdInfo)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.HerdInfo" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.HerdInfoEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateHerdInfo.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.HerdInfoEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.HerdInfoEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.HerdInfo" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.InseminatorInvoiceViewEntityService">
      <summary>
        <h1>General</h1>
        <p>
            The following URIs specifies the location of the service in the production- and production test environment. 
            By default services in both the production and the production test environment uses the production data stores. The alternative URIs, which uses the test data stores (Medio), may be used for testing purposes.
            Please note that service versions might differ between the production- and production test environments. Before you begin using the service, please consult the person responsible as described in section 3.7 – Responsibility assignment.
            </p>
        <p>
          <b>Production URL:</b>
          <a href="http://prod.dcf.ws.dlbr.dk/DCFServices/InseminatorInvoiceViewEntityService.svc">http://prod.dcf.ws.dlbr.dk/DCFServices/InseminatorInvoiceViewEntityService.svc</a>
        </p>
        <p>
          <b>Accept test URL:</b>
          <a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/InseminatorInvoiceViewEntityService.svc">http://accepttest.dcf.ws.dlbr.dk/DCFServices/InseminatorInvoiceViewEntityService.svc</a>
        </p>
        <h1>Web Service Description</h1>
            The machine-readable description in the form of a WSDL document can be obtained by querying the following URI’s.
            <p><b>Production WSDL:</b><a href="http://prod.dcf.ws.dlbr.dk/DCFServices/InseminatorInvoiceViewEntityService.svc?wsdl">http://prod.dcf.ws.dlbr.dk/DCFServices/InseminatorInvoiceViewEntityService.svc?wsdl</a></p><p><b>Accept test WSDL:</b><a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/InseminatorInvoiceViewEntityService.svc?wsdl">http://accepttest.dcf.ws.dlbr.dk/DCFServices/InseminatorInvoiceViewEntityService.svc?wsdl</a></p><h1>Endpoints</h1>
            For information regarding endpoints, see topic 'Endpoints available in DCF Services'
            </summary>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.InseminatorInvoiceViewEntityServiceBase">
      <summary>
            Service Class - InseminatorInvoiceViewEntityService
            </summary>
      <tocexclude />
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.CprInfoEntityService">
      <summary>
        <h1>General</h1>
        <p>
            The following URIs specifies the location of the service in the production- and production test environment. 
            By default services in both the production and the production test environment uses the production data stores. The alternative URIs, which uses the test data stores (Medio), may be used for testing purposes.
            Please note that service versions might differ between the production- and production test environments. Before you begin using the service, please consult the person responsible as described in section 3.7 – Responsibility assignment.
            </p>
        <p>
          <b>Production URL:</b>
          <a href="http://prod.dcf.ws.dlbr.dk/DCFServices/CprInfoEntityService.svc">http://prod.dcf.ws.dlbr.dk/DCFServices/CprInfoEntityService.svc</a>
        </p>
        <p>
          <b>Accept test URL:</b>
          <a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/CprInfoEntityService.svc">http://accepttest.dcf.ws.dlbr.dk/DCFServices/CprInfoEntityService.svc</a>
        </p>
        <h1>Web Service Description</h1>
            The machine-readable description in the form of a WSDL document can be obtained by querying the following URI’s.
            <p><b>Production WSDL:</b><a href="http://prod.dcf.ws.dlbr.dk/DCFServices/CprInfoEntityService.svc?wsdl">http://prod.dcf.ws.dlbr.dk/DCFServices/CprInfoEntityService.svc?wsdl</a></p><p><b>Accept test WSDL:</b><a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/CprInfoEntityService.svc?wsdl">http://accepttest.dcf.ws.dlbr.dk/DCFServices/CprInfoEntityService.svc?wsdl</a></p><h1>Endpoints</h1>
            For information regarding endpoints, see topic 'Endpoints available in DCF Services'
            </summary>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.CprInfoEntityServiceBase">
      <summary>
            Service Class - CprInfoEntityService
            </summary>
      <tocexclude />
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.CprInfoTestEntityServiceBase">
      <summary>
            Service Class - CprInfoTestEntityService
            </summary>
      <tocexclude />
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.CvrInfoEntityService">
      <summary>
        <h1>General</h1>
        <p>
            The following URIs specifies the location of the service in the production- and production test environment. 
            By default services in both the production and the production test environment uses the production data stores. The alternative URIs, which uses the test data stores (Medio), may be used for testing purposes.
            Please note that service versions might differ between the production- and production test environments. Before you begin using the service, please consult the person responsible as described in section 3.7 – Responsibility assignment.
            </p>
        <p>
          <b>Production URL:</b>
          <a href="http://prod.dcf.ws.dlbr.dk/DCFServices/CvrInfoEntityService.svc">http://prod.dcf.ws.dlbr.dk/DCFServices/CvrInfoEntityService.svc</a>
        </p>
        <p>
          <b>Accept test URL:</b>
          <a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/CvrInfoEntityService.svc">http://accepttest.dcf.ws.dlbr.dk/DCFServices/CvrInfoEntityService.svc</a>
        </p>
        <h1>Web Service Description</h1>
            The machine-readable description in the form of a WSDL document can be obtained by querying the following URI’s.
            <p><b>Production WSDL:</b><a href="http://prod.dcf.ws.dlbr.dk/DCFServices/CvrInfoEntityService.svc?wsdl">http://prod.dcf.ws.dlbr.dk/DCFServices/CvrInfoEntityService.svc?wsdl</a></p><p><b>Accept test WSDL:</b><a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/CvrInfoEntityService.svc?wsdl">http://accepttest.dcf.ws.dlbr.dk/DCFServices/CvrInfoEntityService.svc?wsdl</a></p><h1>Endpoints</h1>
            For information regarding endpoints, see topic 'Endpoints available in DCF Services'
            </summary>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.CvrInfoEntityServiceBase">
      <summary>
            Service Class - CvrInfoEntityService
            </summary>
      <tocexclude />
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.CvrInfoTestEntityServiceBase">
      <summary>
            Service Class - CvrInfoTestEntityService
            </summary>
      <tocexclude />
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.EarmarkEntityService">
      <summary>
        <h1>General</h1>
        <p>
            The following URIs specifies the location of the service in the production- and production test environment. 
            By default services in both the production and the production test environment uses the production data stores. The alternative URIs, which uses the test data stores (Medio), may be used for testing purposes.
            Please note that service versions might differ between the production- and production test environments. Before you begin using the service, please consult the person responsible as described in section 3.7 – Responsibility assignment.
            </p>
        <p>
          <b>Production URL:</b>
          <a href="http://prod.dcf.ws.dlbr.dk/DCFServices/EarmarkEntityService.svc">http://prod.dcf.ws.dlbr.dk/DCFServices/EarmarkEntityService.svc</a>
        </p>
        <p>
          <b>Accept test URL:</b>
          <a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/EarmarkEntityService.svc">http://accepttest.dcf.ws.dlbr.dk/DCFServices/EarmarkEntityService.svc</a>
        </p>
        <h1>Web Service Description</h1>
            The machine-readable description in the form of a WSDL document can be obtained by querying the following URI’s.
            <p><b>Production WSDL:</b><a href="http://prod.dcf.ws.dlbr.dk/DCFServices/EarmarkEntityService.svc?wsdl">http://prod.dcf.ws.dlbr.dk/DCFServices/EarmarkEntityService.svc?wsdl</a></p><p><b>Accept test WSDL:</b><a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/EarmarkEntityService.svc?wsdl">http://accepttest.dcf.ws.dlbr.dk/DCFServices/EarmarkEntityService.svc?wsdl</a></p><h1>Endpoints</h1>
            For information regarding endpoints, see topic 'Endpoints available in DCF Services'
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.EarmarkEntityService.RegisterEarmarkOrder(DLBR.DCF.KDB.MessageContracts.RegisterEarmarkOrderRequest)">
      <summary>
        <h1>Functional Description</h1>
            Register a Earmark order of type Series, Replacement, Supplement or Article
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>CHRNumber</td><td>yes</td><td>&gt;0</td><td>The danish central husbandry registration number of the property, to which the order is to be registrated to.</td></tr><tr><td>AnimalType</td><td>conditional</td><td>Code&gt;0</td><td>The type of animal(e.g. cattle) in the herd defined by the ShipToHerdNumber member.If ShipToHerdNumber is set, AnimalType is required.</td></tr><tr><td>ExpressDelivery</td><td></td><td></td><td>Can only be used when ordering Earmark Replacements. When set the order is higher priotered by the Earmark manufacturer.</td></tr><tr><td>ShipToHerdNumber</td><td></td><td></td><td>If set, the order is shipped to the choosen herd number , otherwise the order is shipped to herd number equal to the  CHRNumber.</td></tr><tr><td>EarmarkSeriesRegistration</td><td></td><td></td><td>If set the order is a Series Order. Cannot be set in combination with other order types, e.g. EarmarkReplacmentRegistration or EarmarkArticleRegistration.</td></tr><tr><td>EarmarkReplacementRegistration</td><td></td><td></td><td>If set the order is a Replacement Order. Cannot be set in combination with other order types, e.g. EarmarkSeriesRegistration or EarmarkArticleRegistration.</td></tr><tr><td>EarmarkArticleRegistration</td><td></td><td></td><td>If set the order is a Article Order. Cannot be set in combination with other order types, e.g. EarmarkSeriesRegistration or EarmarkReplacementRegistration.</td></tr><tr><td>EarmarkSupplementRegistration</td><td></td><td></td><td>If set the order is a supplemental Order. Cannot be set in combination with other order types, e.g. EarmarkReplacementRegistration.</td></tr><tr><td>WarningFlags</td><td></td><td></td><td>Add warning flags to ignore warnings</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>EarmarkOrder</td><td>The newly created Earmark order</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.RegisterEarmarkOrderRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.RegisterEarmarkOrderResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            EarmarkEntityServiceContractClient proxy = new EarmarkEntityServiceContractClient("EarmarkEntityService");

            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID_FARMER;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD_FARMER;

                AnimalType animalType = new AnimalType { Code = 12 };
                EarmarkColorType earmarkColorType = new EarmarkColorType { Code = 1 };
                EarmarkManufacturerType earmarkManufacturerType = new EarmarkManufacturerType { Code = 2 }; //AllFlex
                const int quantity = 5;
                const int updateQuantity = 6;

                EarmarkSeriesCombinationCollection seriesCombinations = proxy.FindEarmarkSeriesCombinations(animalType, earmarkColorType, earmarkManufacturerType, null);

                EarmarkSeriesRegistration earmarkSeriesRegistration = new EarmarkSeriesRegistration()
                                                  {
                                                      EarmarkSeriesCombination = seriesCombinations[0],
                                                      Quantity = quantity,
                                                  };

                // Create
                EarmarkOrder earmarkOrder = proxy.RegisterEarmarkOrder(null, TestUtil.CHR_NUMBER, null, null, earmarkSeriesRegistration, null, true, null, null);
                Assert.IsNotNull(earmarkOrder);
                Assert.IsTrue(earmarkOrder.EarmarkSeries.NumberFrom &gt; 0);
                Assert.IsTrue(earmarkOrder.EarmarkSeries.NumberTo &gt; 0);
                Assert.AreEqual(earmarkOrder.EarmarkSeries.Quantity, quantity);

                // Update
                earmarkOrder.EarmarkSeries.Quantity = updateQuantity;
                proxy.UpdateEarmarkOrder(ref earmarkOrder);
                Assert.IsNotNull(earmarkOrder);
                Assert.IsTrue(earmarkOrder.EarmarkSeries.NumberFrom &gt; 0);
                Assert.IsTrue(earmarkOrder.EarmarkSeries.NumberTo &gt; 0);
                Assert.AreEqual(earmarkOrder.EarmarkSeries.Quantity, updateQuantity);

                // Delete
                proxy.DeleteEarmarkOrder(earmarkOrder);

            }
            catch (FaultException&lt;InvalidArgument&gt; ex)
            {
                Debug.WriteLine(ex.Message, "TestCUD1");
                throw;
            }

            catch (FaultException ex)
            {
                Debug.WriteLine(ex.Message, "TestCUD1");
                throw;
            }

            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.EarmarkEntityService.RegisterEarmarkOrders(DLBR.DCF.KDB.MessageContracts.RegisterEarmarkOrdersRequest)">
      <summary>
        <h1>Functional Description</h1>
            Batch operation for registering several earmark orders at a time (batch version of RegisterEarmarkOrder)
            An exception thrown will contain the order number (line number) as part of the text in the format Ordernumber: xx
            <h1>Nested Input parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>EarmarkOrders</td><td>yes</td><td>not null</td><td>The collection of order registrations</td></tr><tr><td>DLIUsername</td><td></td><td></td><td>If called from “landmand.dk” this parameter will specify the user creating the order. For other clients this parameter will be ignored.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.RegisterEarmarkOrdersRequest" /></param>
      <returns>No description See <see cref="T:DLBR.DCF.KDB.MessageContracts.RegisterEarmarkOrdersResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example:
            <code>            EarmarkEntityServiceContractClient proxy = new EarmarkEntityServiceContractClient("EarmarkEntityService");

            try
            {
                Assert.IsNotNull(proxy.ClientCredentials);
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                AnimalType animalType = new AnimalType { Code = 12 };
                EarmarkColorType earmarkColorType = new EarmarkColorType { Code = 1 };
                EarmarkManufacturerType earmarkManufacturerType = new EarmarkManufacturerType { Code = 2 }; //AllFlex

                // Find combinations
                EarmarkSeriesCombinationCollection seriesCombinations = proxy.FindEarmarkSeriesCombinations(animalType, earmarkColorType, earmarkManufacturerType, null);
                Assert.IsNotNull(seriesCombinations);
                Assert.IsTrue(seriesCombinations.Count &gt; 0);

                EarmarkCombinationCollection replacementCombinations = proxy.FindEarmarkCombinations(animalType, earmarkColorType, earmarkManufacturerType, null, null, null);
                Assert.IsNotNull(replacementCombinations);
                Assert.IsTrue(replacementCombinations.Count &gt; 0);

                EarmarkArticleType earmarkArticleType = new EarmarkArticleType() { AnimalType = animalType, Code = 12, EarmarkManufacturerType = earmarkManufacturerType }; //Tang, Allflex Total Tagger

                EarmarkSeriesRegistration element1 = new EarmarkSeriesRegistration()
                {
                    EarmarkSeriesCombination = seriesCombinations.First(),
                    Quantity = 150
                };
                EarmarkArticleRegistration element2 = new EarmarkArticleRegistration() { ArticleType = earmarkArticleType, Quantity = 5 };
                EarmarkReplacementRegistration element3 = new EarmarkReplacementRegistration()
                {
                    EarmarkCombination = replacementCombinations.Where(c =&gt; c.Id == 12).First(),
                    EarmarkNumber = 2761202396,
                };

                EarmarkOrderRegistrationCollection earmarkOrders = new EarmarkOrderRegistrationCollection();
                earmarkOrders.Add(new EarmarkOrderRegistration() { AnimalType = animalType, CHRNumber = TestUtil.CHR_NUMBER, EarmarkSeriesRegistration = element1 });
                earmarkOrders.Add(new EarmarkOrderRegistration() { AnimalType = animalType, CHRNumber = TestUtil.CHR_NUMBER, EarmarkArticleRegistration = element2 });
                earmarkOrders.Add(new EarmarkOrderRegistration() { AnimalType = animalType, CHRNumber = TestUtil.CHR_NUMBER, EarmarkReplacementRegistration = element3, ExpressDelivery = false });

                EarmarkOrderCollection registeredOrders = proxy.RegisterEarmarkOrders(null, earmarkOrders);

                registeredOrders.Should().NotBeNull().And.HaveCount(3);

                EarmarkOrder order = registeredOrders[0];
                order.EarmarkSeries.NumberFrom.Should().BeGreaterThan(0);
                order.EarmarkSeries.NumberTo.Should().BeGreaterThan(0);

                // Clean up...)
                foreach (EarmarkOrder earmarkOrder in registeredOrders)
                {
                    proxy.DeleteEarmarkOrder(earmarkOrder);
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message, "Exception");
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.EarmarkEntityService.UpdateEarmarkOrder(DLBR.DCF.KDB.MessageContracts.UpdateEarmarkOrderRequest)">
      <summary>
        <h1>Functional Description</h1>
            Updates a existing Earmark order
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>EarmarkOrder</td><td>yes</td><td></td><td>The Earmark order to update</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>EarmarkOrder</td><td>The updated Earmark order</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.UpdateEarmarkOrderRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.UpdateEarmarkOrderResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example:
            <code>            EarmarkEntityServiceContractClient proxy = new EarmarkEntityServiceContractClient("EarmarkEntityService");

            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID_FARMER;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD_FARMER;

                EarmarkOrder earmarkOrder = new EarmarkOrder();

                proxy.UpdateEarmarkOrder(ref earmarkOrder);
            }

            catch (FaultException ex)
            {
                Debug.WriteLine(ex.Message, "UpdateEarmarkOrderFaultContract");
                Assert.IsTrue(ex.Message != String.Empty);
            }

            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message, "UpdateEarmarkOrderFaultContract");
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                    proxy.Close();
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.EarmarkEntityService.DeleteEarmarkOrder(DLBR.DCF.KDB.MessageContracts.DeleteEarmarkOrderRequest)">
      <summary>
        <h1>Functional Description</h1>
            Deletes a existing Earmark order
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>EarmarkOrder</td><td>yes</td><td></td><td>The Earmark order to delete</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>None</td><td>If deletion is unsuccessful an exception is thrown, otherwise there is no output.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.DeleteEarmarkOrderRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.DeleteEarmarkOrderResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example:
            <code>            EarmarkEntityServiceContractClient proxy = new EarmarkEntityServiceContractClient("EarmarkEntityService");

            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID_FARMER;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD_FARMER;

                AnimalType animalType = new AnimalType { Code = 12 };
                EarmarkColorType earmarkColorType = new EarmarkColorType { Code = 1 };
                EarmarkManufacturerType earmarkManufacturerType = new EarmarkManufacturerType { Code = 2 }; //AllFlex
                const int quantity = 5;
                const int updateQuantity = 6;

                EarmarkSeriesCombinationCollection seriesCombinations = proxy.FindEarmarkSeriesCombinations(animalType, earmarkColorType, earmarkManufacturerType, null);

                EarmarkSeriesRegistration earmarkSeriesRegistration = new EarmarkSeriesRegistration()
                                                  {
                                                      EarmarkSeriesCombination = seriesCombinations[0],
                                                      Quantity = quantity,
                                                  };

                // Create
                EarmarkOrder earmarkOrder = proxy.RegisterEarmarkOrder(null, TestUtil.CHR_NUMBER, null, null, earmarkSeriesRegistration, null, true, null, null);
                Assert.IsNotNull(earmarkOrder);
                Assert.IsTrue(earmarkOrder.EarmarkSeries.NumberFrom &gt; 0);
                Assert.IsTrue(earmarkOrder.EarmarkSeries.NumberTo &gt; 0);
                Assert.AreEqual(earmarkOrder.EarmarkSeries.Quantity, quantity);

                // Update
                earmarkOrder.EarmarkSeries.Quantity = updateQuantity;
                proxy.UpdateEarmarkOrder(ref earmarkOrder);
                Assert.IsNotNull(earmarkOrder);
                Assert.IsTrue(earmarkOrder.EarmarkSeries.NumberFrom &gt; 0);
                Assert.IsTrue(earmarkOrder.EarmarkSeries.NumberTo &gt; 0);
                Assert.AreEqual(earmarkOrder.EarmarkSeries.Quantity, updateQuantity);

                // Delete
                proxy.DeleteEarmarkOrder(earmarkOrder);

            }
            catch (FaultException&lt;InvalidArgument&gt; ex)
            {
                Debug.WriteLine(ex.Message, "TestCUD1");
                throw;
            }

            catch (FaultException ex)
            {
                Debug.WriteLine(ex.Message, "TestCUD1");
                throw;
            }

            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.EarmarkEntityService.FindEarmarkOrdersByCHRNumber(DLBR.DCF.KDB.MessageContracts.FindEarmarkOrdersByCHRNumberRequest)">
      <summary>
        <h1>Functional Description</h1>
            Find Earmark orders by CHR number
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>CHRNumber</td><td>yes</td><td>&gt;0</td><td>CHR number to find Earmark orders by</td></tr><tr><td>AnimalType</td><td></td><td>Code&gt;0 </td><td>The animal type to find Orders by, e.g. cattle. If set the validation rules applies.</td></tr><tr><td>FromDate</td><td>conditional</td><td></td><td>If specified only Earmark order  after the specified date is returned.If not specified all Earmark orders matching the other criteria’s is returned.If this parameter is set also the “ToDate” must be set.</td></tr><tr><td>ToDate</td><td>conditional</td><td></td><td> If specified only Earmark orders before the specified date is returned.This parameter is required if “FromDate” is specified.</td></tr><tr><td>IsSeriesOrder</td><td></td><td></td><td>If set, Earmark Series orders is returned</td></tr><tr><td>IsReplacementOrder</td><td></td><td></td><td>If set, Earmark Replacement orders is returned</td></tr><tr><td>IsArticleOrder</td><td></td><td></td><td>If set, Earmark Article orders is returned</td></tr><tr><td>RequestedCount</td><td></td><td></td><td>If set determines the maximum number of entities returned per type of order. The orders are ordered by CHRNumber ascending and OrderDate descending.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>EarmarkOrderCollection</td><td>A collection of Earmark orders</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindEarmarkOrdersByCHRNumberRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindEarmarkOrdersByCHRNumberResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            EarmarkEntityServiceContractClient proxy = new EarmarkEntityServiceContractClient("EarmarkEntityService");

            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID_FARMER;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD_FARMER;

                AnimalType animalType = new AnimalType { Code = 12 };

                // Series, replacements and articles
                EarmarkOrderCollection result = proxy.FindEarmarkOrdersByCHRNumber(animalType, TestUtil.CHR_NUMBER, null, true, true, true, true, null, null);

                Assert.IsNotNull(result);
                Assert.IsTrue(result.Count &gt; 0);
                Assert.AreEqual(TestUtil.CHR_NUMBER, result[0].CHRNumber);

                // Series
                result = proxy.FindEarmarkOrdersByCHRNumber(animalType, TestUtil.CHR_NUMBER, null, false, false, true, false, null, null);
                Assert.IsNotNull(result);
                Assert.IsTrue(result.Count &gt; 0);
                Assert.AreEqual(TestUtil.CHR_NUMBER, result[0].CHRNumber);

                // Replacements
                result = proxy.FindEarmarkOrdersByCHRNumber(animalType, TestUtil.CHR_NUMBER, null, false, true, false, false, null, null);
                Assert.IsNotNull(result);
                Assert.IsTrue(result.Count &gt; 0);
                Assert.AreEqual(TestUtil.CHR_NUMBER, result[0].CHRNumber);

                // Articles
                result = proxy.FindEarmarkOrdersByCHRNumber(animalType, TestUtil.CHR_NUMBER, null, true, false, false, false, null, null);
                Assert.IsNotNull(result);
                Assert.IsTrue(result.Count &gt; 0);
                Assert.AreEqual(TestUtil.CHR_NUMBER, result[0].CHRNumber);

                // Supplement
                result = proxy.FindEarmarkOrdersByCHRNumber(animalType, TestUtil.CHR_NUMBER, null, false, false, false, true, null, null);
                Assert.IsNotNull(result);
                Assert.AreEqual(0, result.Count);

                // None
                result = proxy.FindEarmarkOrdersByCHRNumber(animalType, TestUtil.CHR_NUMBER, null, false, false, false, false, null, null);
                Assert.IsNotNull(result);
                Assert.IsTrue(result.Count == 0);
            }

            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message, "Exception");
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.EarmarkEntityService.FindEarmarkOrderReplacementByAnimalNumber(DLBR.DCF.KDB.MessageContracts.FindEarmarkOrderReplacementByAnimalNumberRequest)">
      <summary>
        <h1>Functional Description</h1>
            Find Earmark orders by animal number that contains an earmark replacement entity.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>CHRNumber</td><td>yes</td><td>&gt;0</td><td>CHR number to find Earmark orders by</td></tr><tr><td>AnimalNumber</td><td>yes</td><td>&gt;0</td><td>The animal number to find replacement orders by.</td></tr><tr><td>FromDate</td><td>conditional</td><td></td><td>If specified only Earmark order  after the specified date is returned.If not specified all Earmark orders matching the other criteria’s is returned.If this parameter is set also the “ToDate” must be set.</td></tr><tr><td>ToDate</td><td>conditional</td><td></td><td>If specified only Earmark orders before the specified date is returned. This parameter is required if “FromDate” is specified.</td></tr><tr><td>RequestedCount</td><td></td><td></td><td>If set determines the maximum number of entities returned. The orders are ordered by CHRNumber ascending and OrderDate descending.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>EarmarkOrderCollection</td><td>A collection of Earmark orders</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindEarmarkOrderReplacementByAnimalNumberRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindEarmarkOrderReplacementByAnimalNumberResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            Int64 animalNumber = 2761201456;

            EarmarkEntityServiceContractClient proxy = new EarmarkEntityServiceContractClient("EarmarkEntityService");

            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID_FARMER;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD_FARMER;

                // Find results for replacements.
                EarmarkOrderCollection result = proxy.FindEarmarkOrderReplacementByAnimalNumber(animalNumber, TestUtil.CHR_NUMBER, null, null, null);

                Assert.IsNotNull(result);
                Assert.AreEqual(animalNumber, result[0].EarmarkReplacement.EarmarkNumber);
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message, "Exception");
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.EarmarkEntityService.FindEarmarkSeriesCombinations(DLBR.DCF.KDB.MessageContracts.FindEarmarkSeriesCombinationsRequest)">
      <summary>
        <h1>Functional Description</h1>
            Finds valid Earmark series combinations by animaltype, manufacturer and color
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>AnimalType</td><td></td><td>Code&gt;0</td><td>The Animal type to find Earmark series combinations by, e.g. Cattle. If set only EarmarkSeriesCombinations matching the specified AnimalType and other specified parameters are returned.</td></tr><tr><td>EarmarkManufacturerType</td><td></td><td>Code&gt;0 </td><td>The Earmark manufacturerType to find Earmark series combinations by, e.g. Allflex. If set only EarmarkSeriesCombinations matching the specified EarmarkManufacturerType and other specified parameters are returned.</td></tr><tr><td>EarmarkColorType</td><td></td><td>Code&gt;0</td><td>The Earmark color type to find Earmark series combinations by, e.g. Yellow. If set only EarmarkSeriesCombinations matching the specified EarmarkColorType and other specified parameters are returned</td></tr><tr><td>IncludeBreedingEarmarks</td><td></td><td>Code&gt;0</td><td>If you wish to see breeding earmarks this parameter should be set to TRUE.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindEarmarkSeriesCombinationsRequest" /></param>
      <returns>A collection of Earmark series combinations. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindEarmarkSeriesCombinationsResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example:
            <code>            EarmarkEntityServiceContractClient proxy = new EarmarkEntityServiceContractClient("EarmarkEntityService");

            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID_FARMER;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD_FARMER;

                EarmarkSeriesCombinationCollection result = proxy.FindEarmarkSeriesCombinations(null, null, null, null);

                Assert.IsNotNull(result);
                Assert.IsTrue(result.Count &gt; 0);

                //Verify that all returned combinations are valid
                Assert.AreEqual(result.Count, result.Where(s =&gt; s.IsValid).Count());

                //Verify that no duplicates were found (this error has been seen previously)
                var duplicateQuery = from earmarkSeriesCombination in result
                                     group earmarkSeriesCombination by earmarkSeriesCombination.Id
                                     into groupResult
                                     select groupResult;
                Assert.AreEqual(result.Count, duplicateQuery.Count());

                //Verify that result contains combinations to different animaltypes.
                var animalTypeQuery = from earmarkSeriesCombination in result
                                      group earmarkSeriesCombination by
                                          earmarkSeriesCombination.EarmarkCombination1.AnimalType.Code
                                          into groupResult
                                          where groupResult.Count() &gt; 1
                                          select groupResult;

                Assert.IsTrue(animalTypeQuery.Count() &gt; 0);

                //Verify that result contains combinations to different manufacturerType.
                var manufacturerTypeQuery = from earmarkSeriesCombination in result
                                            group earmarkSeriesCombination by
                                                earmarkSeriesCombination.EarmarkCombination1.EarmarkManufacturerType.Code
                                                into groupResult
                                                where groupResult.Count() &gt; 1
                                                select groupResult;

                Assert.IsTrue(manufacturerTypeQuery.Count() &gt; 0);

                //Verify that result contains combinations to different colorType.
                var colorTypeQuery = from earmarkSeriesCombination in result
                                     group earmarkSeriesCombination by
                                         earmarkSeriesCombination.EarmarkCombination1.EarmarkColorType.Code
                                         into groupResult
                                         where groupResult.Count() &gt; 1
                                         select groupResult;

                Assert.IsTrue(colorTypeQuery.Count() &gt; 0);


            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message, "Exception");
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.EarmarkEntityService.GetEarmarkSeriesCombinationById(DLBR.DCF.KDB.MessageContracts.GetEarmarkSeriesCombinationByIdRequest)">
      <summary>
        <h1>Functional Description</h1>
            Finds valid Earmark series combination by id
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>Id</td><td>yes</td><td>Code&gt;0</td><td>The unique id of the EarmarkSeriesCombination.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindEarmarkSeriesCombinationsRequest" /></param>
      <returns>An Earmark series combinations. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindEarmarkSeriesCombinationsResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example:
            <code>Method FindEarmarkSeriesCombinationById not found in class ..\tests\DLBR.DCF.KDB.IntegrationTests\EarmarkEntityServiceTest.cs</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.EarmarkEntityService.FindEarmarkCombinations(DLBR.DCF.KDB.MessageContracts.FindEarmarkCombinationsRequest)">
      <summary>
        <h1>Functional Description</h1>
            Finds valid Earmark combinations by animaltype, manufacturer and color
            <h1>Nested Input parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>AnimalType</td><td></td><td>Code&gt;0</td><td>The Animal type to find Earmark combinations by, e.g. Cattle. If set only EarmarkCombinations matching the specified AnimalType and other specified parameters are returned.</td></tr><tr><td>EarmarkManufacturerType</td><td></td><td>Code&gt;0</td><td>The Earmark manufacturerType to find Earmark combinations by, e.g. Allflex. If set only EarmarkSeriesCombinations matching the specified EarmarkManufacturerType and other specified parameters are returned.</td></tr><tr><td>EarmarkColorType</td><td></td><td>Code&gt;0</td><td>The Earmark color type to find Earmark combinations by, e.g. Yellow. If set only EarmarkSeriesCombinations matching the specified EarmarkColorType and other specified parameters are returned. </td></tr><tr><td>IncludeBreedingEarmarks</td><td></td><td></td><td>If you wish to see breeding earmarks this parameter should be set to TRUE.</td></tr><tr><td>FilterReplacementEarmarks</td><td></td><td></td><td>If you wish to filter on replacement earmarks this parameter can be set to TRUE or FALSE.</td></tr><tr><td>FilterSupplementEarmarks</td><td></td><td></td><td>If you wish to filter on supplement earmarks this parameter can be set to TRUE or FALSE.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindEarmarkCombinationsRequest" /></param>
      <returns>description See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindEarmarkCombinationsResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example:
            <code>            EarmarkEntityServiceContractClient proxy = new EarmarkEntityServiceContractClient("EarmarkEntityService");

            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID_FARMER;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD_FARMER;

                EarmarkCombinationCollection result = proxy.FindEarmarkCombinations(null, null, null, null, null, null);

                Assert.IsNotNull(result);
                Assert.IsTrue(result.Count &gt; 0);

                //Verify that all returned combinations are valid
                Assert.AreEqual(result.Count, result.Where(s =&gt; s.IsValid).Count());

                //Verify new field Description
                EarmarkCombination combination = result.Where(comb =&gt; comb.Id == 12).First();
                combination.Description.Should().NotBeBlank();

                //Verify that result contains combinations to different animaltypes.
                var animalTypeQuery = from earmarkCombination in result
                                      group earmarkCombination by
                                          earmarkCombination.AnimalType.Code
                                          into groupResult
                                          where groupResult.Count() &gt; 1
                                          select groupResult;

                Assert.IsTrue(animalTypeQuery.Count() &gt; 0);

                //Verify that earmarks contains price.
                var priceQuery = from earmarkCombination in result
                                 where earmarkCombination.Price &gt; 0
                                 select earmarkCombination;
                Assert.IsTrue(priceQuery.Count() &gt; 0);

                //Verify that result contains combinations to different manufacturerType.
                var manufacturerTypeQuery = from earmarkCombination in result
                                            group earmarkCombination by
                                                earmarkCombination.EarmarkManufacturerType.Code
                                                into groupResult
                                                where groupResult.Count() &gt; 1
                                                select groupResult;

                Assert.IsTrue(manufacturerTypeQuery.Count() &gt; 0);

                //Verify that result contains combinations to different colorType.
                var colorTypeQuery = from earmarkCombination in result
                                     group earmarkCombination by
                                         earmarkCombination.EarmarkColorType.Code
                                         into groupResult
                                         where groupResult.Count() &gt; 1
                                         select groupResult;

                Assert.IsTrue(colorTypeQuery.Count() &gt; 0);


            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message, "Exception");
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.EarmarkEntityService.FindEarmarkMaxQuantityByCHRNumber(DLBR.DCF.KDB.MessageContracts.FindEarmarkMaxQuantityByCHRNumberRequest)">
      <summary>
        <h1>Functional Description</h1>
            Finds the maximum number of Earmark quantity that can be ordered for the specified CHR number. Returns the result sorted  by CHRNumber and Animal type.
            <h1>Nested Input parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>CHRNumber</td><td>yes</td><td>&gt;0</td><td>The CHR number to find maximum quantity by</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindEarmarkMaxQuantityByCHRNumberRequest" /></param>
      <returns>A collection of EarmarkMaxQuantity. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindEarmarkMaxQuantityByCHRNumberResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example:
            <code>            EarmarkEntityServiceContractClient proxy = new EarmarkEntityServiceContractClient("EarmarkEntityService");

            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID_FARMER;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD_FARMER;

                EarmarkMaxQuantityCollection result = proxy.FindEarmarkMaxQuantityByCHRNumber(TestUtil.HERD_NUMBER);
                Assert.IsNotNull(result);
                Assert.IsTrue(result.Count &gt; 0);

                Debug.WriteLine("Number of returned Max Quantity rows: " + result.Count, "Result");
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message, "Exception");
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.EarmarkEntityService.SetEarmarkCashOnDelivery(DLBR.DCF.KDB.MessageContracts.SetEarmarkCashOnDeliveryRequest)">
      <summary>
        <h1>Functional Description</h1>
            Specifies whether or not to deliver the ordered Earmarks or Articles as “Cash on delivery”
            <h1>Nested Input parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>CHRNumber</td><td>yes</td><td>&gt;0</td><td>The CHRNumber</td></tr><tr><td>CashOnDelivery</td><td>yes</td><td></td><td>If true, the order is send as “Cash on delivery”, otherwise the order is send normal. The value is current until changed.</td></tr><tr><td>Date</td><td></td><td></td><td>If set, the “CashOnDelivery” state is effected from that date. If date is null, current date is set as effected date.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.SetEarmarkCashOnDeliveryRequest" /></param>
      <returns>A EarmarkCashOnDelivery data contract. See <see cref="T:DLBR.DCF.KDB.MessageContracts.SetEarmarkCashOnDeliveryResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example:
            <code>            EarmarkEntityServiceContractClient proxy = new EarmarkEntityServiceContractClient("EarmarkEntityService");

            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                EarmarkCashOnDelivery result = proxy.SetEarmarkCashOnDelivery(TestUtil.HERD_NUMBER, true, null);

                Assert.IsNotNull(result);
                Assert.IsTrue(result.CashOnDelivery);
                Assert.AreEqual(DateTime.Today, result.Date);

            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message, "Exception");
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.EarmarkEntityService.GetEarmarkCashOnDeliveryByCHRNumber(DLBR.DCF.KDB.MessageContracts.GetEarmarkCashOnDeliveryByCHRNumberRequest)">
      <summary>
        <h1>Functional Description</h1>
            Gets information about delivering  Earmarks or Articles as “Cash on delivery”
            <h1>Nested Input parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>CHRNumber</td><td>yes</td><td>&gt;0</td><td>The CHRNumber to get Cash on delivery information by</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetEarmarkCashOnDeliveryByCHRNumberRequest" /></param>
      <returns>A EarmarkCashOnDelivery data contract. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetEarmarkCashOnDeliveryByCHRNumberResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example:
            <code>            EarmarkEntityServiceContractClient proxy = new EarmarkEntityServiceContractClient("EarmarkEntityService");

            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                EarmarkCashOnDelivery result = proxy.GetEarmarkCashOnDeliveryByCHRNumber(TestUtil.HERD_NUMBER);

                Assert.IsNotNull(result);
                Assert.AreEqual(result.CHRNumber, TestUtil.HERD_NUMBER);
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message, "Exception");
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.EarmarkEntityService.FindEarmarkOrderCosts(DLBR.DCF.KDB.MessageContracts.FindEarmarkOrderCostsRequest)">
      <summary>
        <h1>Functional Description</h1>
            Get the total order costs for the collection of orders provided to the operation
            <h1>Nested Input parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>EarmarkOrders</td><td>yes</td><td>not null</td><td>The collection of orders for which you want to calculate order costs</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindEarmarkOrderCostsRequest" /></param>
      <returns>A collection of order cost lines specifying the total order costs. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindEarmarkOrderCostsResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example:
            <code>            EarmarkEntityServiceContractClient proxy = new EarmarkEntityServiceContractClient("EarmarkEntityService");

            try
            {
                Assert.IsNotNull(proxy.ClientCredentials);
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                AnimalType animalType = new AnimalType { Code = 12 };
                EarmarkColorType earmarkColorType = new EarmarkColorType { Code = 1 };
                EarmarkManufacturerType earmarkManufacturerType = new EarmarkManufacturerType { Code = 2 }; //AllFlex

                // Find combinations
                EarmarkSeriesCombinationCollection seriesCombinations = proxy.FindEarmarkSeriesCombinations(animalType, earmarkColorType, earmarkManufacturerType, null);
                Assert.IsNotNull(seriesCombinations);
                Assert.IsTrue(seriesCombinations.Count &gt; 0);

                EarmarkCombinationCollection replacementCombinations = proxy.FindEarmarkCombinations(animalType, earmarkColorType, earmarkManufacturerType, null, null, null);
                Assert.IsNotNull(replacementCombinations);
                Assert.IsTrue(replacementCombinations.Count &gt; 0);

                EarmarkArticleType earmarkArticleType = new EarmarkArticleType() { AnimalType = animalType, Code = 12, EarmarkManufacturerType = earmarkManufacturerType }; //Tang, Allflex Total Tagger

                EarmarkSeriesRegistration element1 = new EarmarkSeriesRegistration()
                {
                    EarmarkSeriesCombination = seriesCombinations.First(), 
                    Email = new EarmarkEmail() { CprNumber = 1011701112, EmailAddress = "test@vfl.dk" }, Quantity = 150 };
                EarmarkArticleRegistration element2 = new EarmarkArticleRegistration() { ArticleType = earmarkArticleType, Quantity = 5 };
                EarmarkReplacementRegistration element3 = new EarmarkReplacementRegistration() { EarmarkCombination = replacementCombinations.First(), EarmarkNumber = 2761201384 };

                EarmarkOrderRegistrationCollection earmarkOrders = new EarmarkOrderRegistrationCollection();
                earmarkOrders.Add(new EarmarkOrderRegistration() { AnimalType = animalType, CHRNumber = TestUtil.CHR_NUMBER, EarmarkSeriesRegistration = element1 });
                earmarkOrders.Add(new EarmarkOrderRegistration() { AnimalType = animalType, CHRNumber = TestUtil.CHR_NUMBER, EarmarkArticleRegistration = element2 });
                earmarkOrders.Add(new EarmarkOrderRegistration() { AnimalType = animalType, CHRNumber = TestUtil.CHR_NUMBER, EarmarkReplacementRegistration = element3 });

                EarmarkOrderCostCollection costs = proxy.FindEarmarkOrderCosts(earmarkOrders);

                Assert.IsNotNull(costs);
                Assert.AreEqual(6, costs.Count);
                Assert.AreEqual(1, costs.Where(c =&gt; c.Description == "Varebeløb").Count());
                Assert.AreEqual(1, costs.Where(c =&gt; c.Description == "Rabat").Count());
                Assert.AreEqual(1, costs.Where(c =&gt; c.Description == "Hastegebyr").Count());
                Assert.AreEqual(1, costs.Where(c =&gt; c.Description == "Forsendelsesomk.").Count());
                Assert.AreEqual(1, costs.Where(c =&gt; c.Description == "Administrationsomk.").Count());
                Assert.AreEqual(1, costs.Where(c =&gt; c.Description == "Moms").Count());
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message, "Exception");
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
        }

        #endregion FindEarmarkOrderCosts

        #region FindEarmarkOrderLineCosts

        [Test]
        [Category(TestCategory.WebServiceTest)]
        public void FindEarmarkOrderLineCostsTest()
        {
            EarmarkEntityServiceContractClient proxy = new EarmarkEntityServiceContractClient("EarmarkEntityService");

            try
            {
                Assert.IsNotNull(proxy.ClientCredentials);
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                AnimalType animalType = new AnimalType { Code = 12 };
                EarmarkColorType earmarkColorType = new EarmarkColorType { Code = 1 };
                EarmarkManufacturerType earmarkManufacturerType = new EarmarkManufacturerType { Code = 2 }; //AllFlex

                // Find combinations
                EarmarkSeriesCombinationCollection seriesCombinations = proxy.FindEarmarkSeriesCombinations(animalType, earmarkColorType, earmarkManufacturerType, null);
                Assert.IsNotNull(seriesCombinations);
                Assert.IsTrue(seriesCombinations.Count &gt; 0);

                EarmarkCombinationCollection replacementCombinations = proxy.FindEarmarkCombinations(animalType, earmarkColorType, earmarkManufacturerType, null, null, null);
                Assert.IsNotNull(replacementCombinations);
                Assert.IsTrue(replacementCombinations.Count &gt; 0);

                EarmarkArticleType earmarkArticleType = new EarmarkArticleType() { AnimalType = animalType, Code = 12, EarmarkManufacturerType = earmarkManufacturerType }; //Tang, Allflex Total Tagger

                EarmarkSeriesRegistration element1 = new EarmarkSeriesRegistration()
                {
                    EarmarkSeriesCombination = seriesCombinations.First(),
                    Email = new EarmarkEmail() { CprNumber = 1011701112, EmailAddress = "test@vfl.dk" },
                    Quantity = 150
                };
                EarmarkArticleRegistration element2 = new EarmarkArticleRegistration() { ArticleType = earmarkArticleType, Quantity = 5 };
                EarmarkReplacementRegistration element3 = new EarmarkReplacementRegistration() { EarmarkCombination = replacementCombinations.First(), EarmarkNumber = 2761201384 };

                EarmarkOrderRegistrationCollection earmarkOrders = new EarmarkOrderRegistrationCollection();
                earmarkOrders.Add(new EarmarkOrderRegistration() { AnimalType = animalType, CHRNumber = TestUtil.CHR_NUMBER, EarmarkSeriesRegistration = element1 });
                earmarkOrders.Add(new EarmarkOrderRegistration() { AnimalType = animalType, CHRNumber = TestUtil.CHR_NUMBER, EarmarkArticleRegistration = element2 });
                earmarkOrders.Add(new EarmarkOrderRegistration() { AnimalType = animalType, CHRNumber = TestUtil.CHR_NUMBER, EarmarkReplacementRegistration = element3, ExpressDelivery = false });

                proxy.FindEarmarkOrderLineCosts(ref earmarkOrders);

                Assert.IsNotNull(earmarkOrders);
                Assert.AreEqual(3, earmarkOrders.Count);
                Assert.IsTrue(earmarkOrders.Any(o =&gt; o.Amount &gt; 0));
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message, "Exception");
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
        }

        #endregion FindEarmarkOrderLineCosts

        #region GetEarmarkEmail

        [Test]
        [Category(TestCategory.WebServiceTest)]
        public void GetEarmarkEmailTest()
        {
            EarmarkEntityServiceContractClient proxy = new EarmarkEntityServiceContractClient("EarmarkEntityService");

            try
            {
                Assert.IsNotNull(proxy.ClientCredentials);
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                string email = proxy.GetEarmarkEmail(TestUtil.CHR_NUMBER, null, 10370094);

                Assert.IsNotNull(email);
                Assert.AreEqual("hbhojgaard@gmail.com", email);
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message, "Exception");
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
        }

        #endregion GetEarmarkEmail

        #region RegisterEarmarkOrders

        /// &lt;summary&gt;
        /// To fix after MEDIO-load: find row on H6601.MAERKER (where BES_ID=2761212), and take value from MAERKENR and put it in "EarmarkNumber" in element3 below.
        /// &lt;/summary&gt;
        [Test]
        [Category(TestCategory.WebServiceTest)]
        public void RegisterEarmarkOrdersTest()
        {
            EarmarkEntityServiceContractClient proxy = new EarmarkEntityServiceContractClient("EarmarkEntityService");

            try
            {
                Assert.IsNotNull(proxy.ClientCredentials);
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                AnimalType animalType = new AnimalType { Code = 12 };
                EarmarkColorType earmarkColorType = new EarmarkColorType { Code = 1 };
                EarmarkManufacturerType earmarkManufacturerType = new EarmarkManufacturerType { Code = 2 }; //AllFlex

                // Find combinations
                EarmarkSeriesCombinationCollection seriesCombinations = proxy.FindEarmarkSeriesCombinations(animalType, earmarkColorType, earmarkManufacturerType, null);
                Assert.IsNotNull(seriesCombinations);
                Assert.IsTrue(seriesCombinations.Count &gt; 0);

                EarmarkCombinationCollection replacementCombinations = proxy.FindEarmarkCombinations(animalType, earmarkColorType, earmarkManufacturerType, null, null, null);
                Assert.IsNotNull(replacementCombinations);
                Assert.IsTrue(replacementCombinations.Count &gt; 0);

                EarmarkArticleType earmarkArticleType = new EarmarkArticleType() { AnimalType = animalType, Code = 12, EarmarkManufacturerType = earmarkManufacturerType }; //Tang, Allflex Total Tagger

                EarmarkSeriesRegistration element1 = new EarmarkSeriesRegistration()
                {
                    EarmarkSeriesCombination = seriesCombinations.First(),
                    Quantity = 150
                };
                EarmarkArticleRegistration element2 = new EarmarkArticleRegistration() { ArticleType = earmarkArticleType, Quantity = 5 };
                EarmarkReplacementRegistration element3 = new EarmarkReplacementRegistration()
                {
                    EarmarkCombination = replacementCombinations.Where(c =&gt; c.Id == 12).First(),
                    EarmarkNumber = 2761202396,
                };

                EarmarkOrderRegistrationCollection earmarkOrders = new EarmarkOrderRegistrationCollection();
                earmarkOrders.Add(new EarmarkOrderRegistration() { AnimalType = animalType, CHRNumber = TestUtil.CHR_NUMBER, EarmarkSeriesRegistration = element1 });
                earmarkOrders.Add(new EarmarkOrderRegistration() { AnimalType = animalType, CHRNumber = TestUtil.CHR_NUMBER, EarmarkArticleRegistration = element2 });
                earmarkOrders.Add(new EarmarkOrderRegistration() { AnimalType = animalType, CHRNumber = TestUtil.CHR_NUMBER, EarmarkReplacementRegistration = element3, ExpressDelivery = false });

                EarmarkOrderCollection registeredOrders = proxy.RegisterEarmarkOrders(null, earmarkOrders);

                registeredOrders.Should().NotBeNull().And.HaveCount(3);

                EarmarkOrder order = registeredOrders[0];
                order.EarmarkSeries.NumberFrom.Should().BeGreaterThan(0);
                order.EarmarkSeries.NumberTo.Should().BeGreaterThan(0);

                // Clean up...)
                foreach (EarmarkOrder earmarkOrder in registeredOrders)
                {
                    proxy.DeleteEarmarkOrder(earmarkOrder);
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message, "Exception");
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
        }

        [Test]
        [Category(TestCategory.WebServiceTest)]
        public void RegisterEarmarkOrdersWithOptionalTextTest()
        {
            EarmarkEntityServiceContractClient proxy = new EarmarkEntityServiceContractClient("EarmarkEntityService");

            try
            {
                Assert.IsNotNull(proxy.ClientCredentials);
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                AnimalType animalType = new AnimalType { Code = 12 };
                EarmarkColorType earmarkColorType = new EarmarkColorType { Code = 1 };
                EarmarkManufacturerType earmarkManufacturerType = new EarmarkManufacturerType { Code = 2 }; //AllFlex

                // Find combinations
                EarmarkSeriesCombinationCollection seriesCombinations = proxy.FindEarmarkSeriesCombinations(animalType, earmarkColorType, earmarkManufacturerType, null);
                Assert.IsNotNull(seriesCombinations);
                Assert.IsTrue(seriesCombinations.Count &gt; 0);

                EarmarkSeriesCombination seriesCombination = seriesCombinations.Where(s =&gt; s.EarmarkCombination1.OptionalTextAllowed || 
                    s.EarmarkCombination2.OptionalTextAllowed).First();

                // OptionalText.
                Collection&lt;EarmarkOptionalText&gt; optionalText = new Collection&lt;EarmarkOptionalText&gt;();
                EarmarkOptionalText optionalTextLine1 = new EarmarkOptionalText()
                {
                    LineNumber = 1,
                    TextType = new EarmarkOptionalTextType() { Code = 1 },    // type for optional text
                    Text = "RegisterText"
                };
                optionalText.Add(optionalTextLine1);

                EarmarkSeriesRegistration element1 = new EarmarkSeriesRegistration()
                {
                    EarmarkSeriesCombination = seriesCombination,
                    Quantity = 150,
                    OptionalText = optionalText
                };

                EarmarkOrderRegistrationCollection earmarkOrders = new EarmarkOrderRegistrationCollection();
                earmarkOrders.Add(new EarmarkOrderRegistration() { AnimalType = animalType, CHRNumber = TestUtil.CHR_NUMBER, EarmarkSeriesRegistration = element1 });

                EarmarkOrderCollection registeredOrders = proxy.RegisterEarmarkOrders(null, earmarkOrders);

                registeredOrders.Should().NotBeNull().And.HaveCount(1);

                // Clean up...
                foreach (EarmarkOrder earmarkOrder in registeredOrders)
                {
                    proxy.DeleteEarmarkOrder(earmarkOrder);
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message, "Exception");
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
        }

        [Test]
        [Category(TestCategory.WebServiceTest)]
        public void RegisterEarmarkOrdersValidationFailureTest()
        {
            EarmarkEntityServiceContractClient proxy = new EarmarkEntityServiceContractClient("EarmarkEntityService");

            try
            {
                Assert.IsNotNull(proxy.ClientCredentials);
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                AnimalType animalType = new AnimalType { Code = 12 };
                EarmarkColorType earmarkColorType = new EarmarkColorType { Code = 1 };
                EarmarkManufacturerType earmarkManufacturerType = new EarmarkManufacturerType { Code = 2 }; //AllFlex

                // Find combinations
                EarmarkSeriesCombinationCollection seriesCombinations = proxy.FindEarmarkSeriesCombinations(animalType, earmarkColorType, earmarkManufacturerType, null);
                Assert.IsNotNull(seriesCombinations);
                Assert.IsTrue(seriesCombinations.Count &gt; 0);

                EarmarkCombinationCollection replacementCombinations = proxy.FindEarmarkCombinations(animalType, earmarkColorType, earmarkManufacturerType, null, null, null);
                Assert.IsNotNull(replacementCombinations);
                Assert.IsTrue(replacementCombinations.Count &gt; 0);

                EarmarkArticleType earmarkArticleType = new EarmarkArticleType() { AnimalType = animalType, Code = 12, EarmarkManufacturerType = earmarkManufacturerType }; //Tang, Allflex Total Tagger

                EarmarkArticleRegistration order = new EarmarkArticleRegistration() { ArticleType = earmarkArticleType, Quantity = 5 };

                EarmarkOrderRegistrationCollection earmarkOrders = new EarmarkOrderRegistrationCollection();
                earmarkOrders.Add(new EarmarkOrderRegistration() { AnimalType = animalType, CHRNumber = TestUtil.CHR_NUMBER, ShipToHerdNumber = 0, EarmarkArticleRegistration = order });

                Action action = () =&gt; proxy.RegisterEarmarkOrders(null, earmarkOrders);

                action.ShouldThrow&lt;Exception&gt;().WithMessage("Ordernumber: 0", ComparisonMode.Substring);
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
        }

        [Test]
        [Category(TestCategory.WebServiceTest)]
        public void RegisterEarmarkOrdersRepositoryFailureTest()
        {
            EarmarkEntityServiceContractClient proxy = new EarmarkEntityServiceContractClient("EarmarkEntityService");

            try
            {
                Assert.IsNotNull(proxy.ClientCredentials);
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                AnimalType animalType = new AnimalType { Code = 12 };
                EarmarkColorType earmarkColorType = new EarmarkColorType { Code = 1 };
                EarmarkManufacturerType earmarkManufacturerType = new EarmarkManufacturerType { Code = 2 }; //AllFlex

                // Find combinations
                EarmarkSeriesCombinationCollection seriesCombinations = proxy.FindEarmarkSeriesCombinations(animalType, earmarkColorType, earmarkManufacturerType, null);
                Assert.IsNotNull(seriesCombinations);
                Assert.IsTrue(seriesCombinations.Count &gt; 0);

                EarmarkCombinationCollection replacementCombinations = proxy.FindEarmarkCombinations(animalType, earmarkColorType, earmarkManufacturerType, null, null, null);
                Assert.IsNotNull(replacementCombinations);
                Assert.IsTrue(replacementCombinations.Count &gt; 0);

                EarmarkSeriesRegistration order = new EarmarkSeriesRegistration()
                {
                    EarmarkSeriesCombination = new EarmarkSeriesCombination() { Id = 190 },
                    Quantity = 150
                };

                EarmarkOrderRegistrationCollection earmarkOrders = new EarmarkOrderRegistrationCollection();
                earmarkOrders.Add(new EarmarkOrderRegistration() { AnimalType = animalType, CHRNumber = TestUtil.CHR_NUMBER, EarmarkSeriesRegistration = order });

                Action action = () =&gt; proxy.RegisterEarmarkOrders(null, earmarkOrders);

                action.ShouldThrow&lt;Exception&gt;().WithMessage("Ordernumber: 0", ComparisonMode.Substring);
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
        }

        #endregion RegisterEarmarkOrders

        #region FindEarmarkSeriesPrices

        [Test]
        [Category(TestCategory.WebServiceTest)]
        public void FindEarmarkSeriesPricesTest()
        {
            EarmarkEntityServiceContractClient proxy = new EarmarkEntityServiceContractClient("EarmarkEntityService");

            try
            {
                Assert.IsNotNull(proxy.ClientCredentials);
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                AnimalType animalType = new AnimalType { Code = 12 };
                EarmarkColorType earmarkColorType = new EarmarkColorType { Code = 1 };
                EarmarkManufacturerType earmarkManufacturerType = new EarmarkManufacturerType { Code = 2 }; //AllFlex

                // Find combinations
                EarmarkSeriesCombinationCollection seriesCombinations = proxy.FindEarmarkSeriesCombinations(animalType, earmarkColorType, earmarkManufacturerType, null);
                Assert.IsNotNull(seriesCombinations);
                Assert.IsTrue(seriesCombinations.Count &gt; 0);

                var seriesCombGrouped = seriesCombinations.GroupBy(s =&gt; s.Id).ToList();

                Collection&lt;long&gt; ids = new Collection&lt;long&gt;();
                foreach (IGrouping&lt;long, EarmarkSeriesCombination&gt; combGroup in seriesCombGrouped)
                {
                    ids.Add(combGroup.Key);
                }
                EarmarkSeriesPriceCollection prices = proxy.FindEarmarkSeriesPrices(TestUtil.CHR_NUMBER, ids);

                Assert.IsNotNull(prices);
                Assert.AreEqual(ids.Count, prices.Count);
                // Several price-intervals declared for at least one series:
                Assert.IsTrue(prices.Where(p =&gt; p.EarmarkPrices.Count &gt; 0).Count() &gt; 0);
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message, "Exception");
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
        }

        #endregion FindEarmarkSeriesPrices

        #region FindEarmarkArticlesPrices

        [Test]
        [Category(TestCategory.WebServiceTest)]
        public void FindEarmarkArticlesPricesTest()
        {
            EarmarkEntityServiceContractClient proxy = new EarmarkEntityServiceContractClient("EarmarkEntityService");

            try
            {
                Assert.IsNotNull(proxy.ClientCredentials);
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                AnimalType animalType = new AnimalType { Code = 12 };
                EarmarkColorType earmarkColorType = new EarmarkColorType { Code = 1 };
                EarmarkManufacturerType earmarkManufacturerType = new EarmarkManufacturerType { Code = 2 }; //AllFlex

                Collection&lt;long&gt; ids = new Collection&lt;long&gt;() { 12, 13 };
                EarmarkArticlePriceCollection prices = proxy.FindEarmarkArticlesPrices(ids);

                Assert.IsNotNull(prices);
                Assert.AreEqual(ids.Count, prices.Count);
                Assert.IsTrue(prices.All(p =&gt; p.EarmarkPrices.Count &gt; 0));
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message, "Exception");
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
        }

        #endregion FindEarmarkArticlesPrices

        #region CheckEarmarkNumber

        [Test]
        [Category(TestCategory.WebServiceTest)]
        public void CheckEarmarkNumber_NonExistingEarmark_ShouldReturnFalse()
        {
            EarmarkEntityServiceContractClient proxy = new EarmarkEntityServiceContractClient("EarmarkEntityService");

            try
            {
                Assert.IsNotNull(proxy.ClientCredentials);
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                AnimalType animalType = new AnimalType { Code = 12 };

                EarmarkNumberStatus status = proxy.CheckEarmarkNumber(animalType, TestUtil.CHR_NUMBER, 2902600301);

                status.Should().NotBeNull();
                status.IsRegistered.Should().BeFalse();
                status.ErrorCode.Should().Be(6195);
                status.ErrorText.Should().Match("Der kan ikke bestilles*");
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message, "Exception");
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
        }

        /// &lt;summary&gt;
        /// To fix after MEDIO-load: find row on H6601.MAERKER (where BES_ID=2761212), and take value from MAERKENR and put it in "animalNumber" below.
        /// &lt;/summary&gt;
        [Test]
        [Category(TestCategory.WebServiceTest)]
        public void CheckEarmarkNumber_ExistingEarmark_ShouldReturnTrue()
        {
            const long animalNumber = 2761202382;
            EarmarkEntityServiceContractClient proxy = new EarmarkEntityServiceContractClient("EarmarkEntityService");

            try
            {
                Assert.IsNotNull(proxy.ClientCredentials);
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                AnimalType animalType = new AnimalType { Code = 12 };

                EarmarkNumberStatus status = proxy.CheckEarmarkNumber(animalType, TestUtil.CHR_NUMBER, animalNumber);

                status.Should().NotBeNull();
                status.IsRegistered.Should().BeTrue();
                status.ErrorCode.Should().Be(0);
                status.ErrorText.Should().BeBlank();
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message, "Exception");
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
        }

        [Test]
        [Category(TestCategory.WebServiceTest)]
        public void CheckEarmarkNumber_ExistingEarmarkOptionalParametersOmitted_ShouldReturnTrue()
        {
            const long animalNumber = 2761202038;
            EarmarkEntityServiceContractClient proxy = new EarmarkEntityServiceContractClient("EarmarkEntityService");

            try
            {
                Assert.IsNotNull(proxy.ClientCredentials);
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                EarmarkNumberStatus status = proxy.CheckEarmarkNumber(null, null, animalNumber);

                status.Should().NotBeNull();
                status.IsRegistered.Should().BeTrue();
                status.ErrorCode.Should().Be(0);
                status.ErrorText.Should().BeBlank();
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message, "Exception");
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
        }
        #endregion CheckEarmarkNumber

        #region CheckEarmarkColor

        [Test]
        [Category(TestCategory.WebServiceTest)]
        [Category(TestCategory.ReadTest)]
        public void CheckEarmarkColor()
        {
            const long animalNumber = 2761201997;
            using (var service = new WcfServiceWrapper&lt;EarmarkEntityServiceContract&gt;(Settings.Default.ADFS_IdpEndpoint,
                Settings.Default.ADFS_Realm,
                TestUtil.USER_ID_FARMER, TestUtil.PASSWORD_FARMER,
                String.Format("https://{0}/DCFServices/EarmarkEntityService.svc/adfs", Settings.Default.DCF_Hostname),
                false))
            {
                CheckEarmarkColorRequest request = new CheckEarmarkColorRequest
                {
                    EarmarkNumber = animalNumber,
                };
                CheckEarmarkColorResponse response = service.Channel.CheckEarmarkColor(request);
                response.Should().NotBeNull();
                response.EarmarkColorType.Should().NotBeNull();
            }
        }

        #endregion CheckEarmarkColor
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.EarmarkEntityService.FindEarmarkOrderLineCosts(DLBR.DCF.KDB.MessageContracts.FindEarmarkOrderLineCostsRequest)">
      <summary>
        <h1>Functional Description</h1>
            Get the order costs for each of the orders contained in the collection of orders provided to the operation
            <h1>Nested Input parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>EarmarkOrders</td><td>yes</td><td>not null</td><td>The collection of orders for which you want to calculate order costs</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindEarmarkOrderLineCostsRequest" /></param>
      <returns>The collection of orders with the two fields DiscountRate and Amount filled in. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindEarmarkOrderLineCostsResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example:
            <code>            EarmarkEntityServiceContractClient proxy = new EarmarkEntityServiceContractClient("EarmarkEntityService");

            try
            {
                Assert.IsNotNull(proxy.ClientCredentials);
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                AnimalType animalType = new AnimalType { Code = 12 };
                EarmarkColorType earmarkColorType = new EarmarkColorType { Code = 1 };
                EarmarkManufacturerType earmarkManufacturerType = new EarmarkManufacturerType { Code = 2 }; //AllFlex

                // Find combinations
                EarmarkSeriesCombinationCollection seriesCombinations = proxy.FindEarmarkSeriesCombinations(animalType, earmarkColorType, earmarkManufacturerType, null);
                Assert.IsNotNull(seriesCombinations);
                Assert.IsTrue(seriesCombinations.Count &gt; 0);

                EarmarkCombinationCollection replacementCombinations = proxy.FindEarmarkCombinations(animalType, earmarkColorType, earmarkManufacturerType, null, null, null);
                Assert.IsNotNull(replacementCombinations);
                Assert.IsTrue(replacementCombinations.Count &gt; 0);

                EarmarkArticleType earmarkArticleType = new EarmarkArticleType() { AnimalType = animalType, Code = 12, EarmarkManufacturerType = earmarkManufacturerType }; //Tang, Allflex Total Tagger

                EarmarkSeriesRegistration element1 = new EarmarkSeriesRegistration()
                {
                    EarmarkSeriesCombination = seriesCombinations.First(),
                    Email = new EarmarkEmail() { CprNumber = 1011701112, EmailAddress = "test@vfl.dk" },
                    Quantity = 150
                };
                EarmarkArticleRegistration element2 = new EarmarkArticleRegistration() { ArticleType = earmarkArticleType, Quantity = 5 };
                EarmarkReplacementRegistration element3 = new EarmarkReplacementRegistration() { EarmarkCombination = replacementCombinations.First(), EarmarkNumber = 2761201384 };

                EarmarkOrderRegistrationCollection earmarkOrders = new EarmarkOrderRegistrationCollection();
                earmarkOrders.Add(new EarmarkOrderRegistration() { AnimalType = animalType, CHRNumber = TestUtil.CHR_NUMBER, EarmarkSeriesRegistration = element1 });
                earmarkOrders.Add(new EarmarkOrderRegistration() { AnimalType = animalType, CHRNumber = TestUtil.CHR_NUMBER, EarmarkArticleRegistration = element2 });
                earmarkOrders.Add(new EarmarkOrderRegistration() { AnimalType = animalType, CHRNumber = TestUtil.CHR_NUMBER, EarmarkReplacementRegistration = element3, ExpressDelivery = false });

                proxy.FindEarmarkOrderLineCosts(ref earmarkOrders);

                Assert.IsNotNull(earmarkOrders);
                Assert.AreEqual(3, earmarkOrders.Count);
                Assert.IsTrue(earmarkOrders.Any(o =&gt; o.Amount &gt; 0));
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message, "Exception");
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.EarmarkEntityService.GetEarmarkEmail(DLBR.DCF.KDB.MessageContracts.GetEarmarkEmailRequest)">
      <summary>
        <h1>Functional Description</h1>
            Operation to obtain any email address specified for an earmark order
            <h1>Nested Input parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>CHRNumber</td><td>yes</td><td>not null</td><td>The CHR number</td></tr><tr><td>CVRNumber</td><td></td><td></td><td>The CVR number (if any)</td></tr><tr><td>CPRNumber</td><td></td><td></td><td>The CPR number (if any) </td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetEarmarkEmailRequest" /></param>
      <returns>The email address specified. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetEarmarkEmailResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example:
            <code>            EarmarkEntityServiceContractClient proxy = new EarmarkEntityServiceContractClient("EarmarkEntityService");

            try
            {
                Assert.IsNotNull(proxy.ClientCredentials);
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                string email = proxy.GetEarmarkEmail(TestUtil.CHR_NUMBER, null, 10370094);

                Assert.IsNotNull(email);
                Assert.AreEqual("hbhojgaard@gmail.com", email);
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message, "Exception");
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.EarmarkEntityService.FindEarmarkSeriesPrices(DLBR.DCF.KDB.MessageContracts.FindEarmarkSeriesPricesRequest)">
      <summary>
        <h1>Functional Description</h1>
            Finds the prices for the specified earmark series – may be several intervals with varying prices
            <h1>Nested Input parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>EarmarkSeriesIds</td><td>yes</td><td>not null</td><td>The ids of the earmark series combinations you wish prices for</td></tr><tr><td>CHRNumber</td><td></td><td></td><td>The CHR Number </td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindEarmarkSeriesPricesRequest" /></param>
      <returns>The collection of price objects containing the price intervals for the specified earmark series combinations.. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindEarmarkSeriesPricesResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example:
            <code>            EarmarkEntityServiceContractClient proxy = new EarmarkEntityServiceContractClient("EarmarkEntityService");

            try
            {
                Assert.IsNotNull(proxy.ClientCredentials);
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                AnimalType animalType = new AnimalType { Code = 12 };
                EarmarkColorType earmarkColorType = new EarmarkColorType { Code = 1 };
                EarmarkManufacturerType earmarkManufacturerType = new EarmarkManufacturerType { Code = 2 }; //AllFlex

                // Find combinations
                EarmarkSeriesCombinationCollection seriesCombinations = proxy.FindEarmarkSeriesCombinations(animalType, earmarkColorType, earmarkManufacturerType, null);
                Assert.IsNotNull(seriesCombinations);
                Assert.IsTrue(seriesCombinations.Count &gt; 0);

                var seriesCombGrouped = seriesCombinations.GroupBy(s =&gt; s.Id).ToList();

                Collection&lt;long&gt; ids = new Collection&lt;long&gt;();
                foreach (IGrouping&lt;long, EarmarkSeriesCombination&gt; combGroup in seriesCombGrouped)
                {
                    ids.Add(combGroup.Key);
                }
                EarmarkSeriesPriceCollection prices = proxy.FindEarmarkSeriesPrices(TestUtil.CHR_NUMBER, ids);

                Assert.IsNotNull(prices);
                Assert.AreEqual(ids.Count, prices.Count);
                // Several price-intervals declared for at least one series:
                Assert.IsTrue(prices.Where(p =&gt; p.EarmarkPrices.Count &gt; 0).Count() &gt; 0);
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message, "Exception");
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.EarmarkEntityService.FindEarmarkArticlesPrices(DLBR.DCF.KDB.MessageContracts.FindEarmarkArticlesPricesRequest)">
      <summary>
        <h1>Functional Description</h1>
            Finds the prices for the specified earmark articles – may be several intervals with varying prices
            <h1>Nested Input parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>EarmarkArticleIds</td><td>yes</td><td>not null</td><td>The ids of the earmark articles you wish prices for</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindEarmarkArticlesPricesRequest" /></param>
      <returns>The collection of price objects containing the price intervals for the specified earmark articles.. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindEarmarkArticlesPricesResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example:
            <code>            EarmarkEntityServiceContractClient proxy = new EarmarkEntityServiceContractClient("EarmarkEntityService");

            try
            {
                Assert.IsNotNull(proxy.ClientCredentials);
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                AnimalType animalType = new AnimalType { Code = 12 };
                EarmarkColorType earmarkColorType = new EarmarkColorType { Code = 1 };
                EarmarkManufacturerType earmarkManufacturerType = new EarmarkManufacturerType { Code = 2 }; //AllFlex

                Collection&lt;long&gt; ids = new Collection&lt;long&gt;() { 12, 13 };
                EarmarkArticlePriceCollection prices = proxy.FindEarmarkArticlesPrices(ids);

                Assert.IsNotNull(prices);
                Assert.AreEqual(ids.Count, prices.Count);
                Assert.IsTrue(prices.All(p =&gt; p.EarmarkPrices.Count &gt; 0));
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message, "Exception");
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.EarmarkEntityService.CheckEarmarkNumber(DLBR.DCF.KDB.MessageContracts.CheckEarmarkNumberRequest)">
      <summary>
        <h1>Functional Description</h1>
            This method check if an earmark with a specified number has been ordered.
            <h1>Nested Input parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>EarmarkNumber</td><td>yes</td><td>&gt;0</td><td>The earmark number you wish to check.</td></tr><tr><td>CHRNumber</td><td>yes</td><td>&gt;0</td><td>The CHR number of the property.</td></tr><tr><td>AnimalType</td><td>yes</td><td>Code &gt; 0</td><td>The animal type.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>EarmarkNumberStatus</td><td>An object containing the status on the specified earmark number.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.CheckEarmarkNumberRequest" /></param>
      <returns>The status of the specified earmark number. See <see cref="T:DLBR.DCF.KDB.MessageContracts.CheckEarmarkNumberResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example:
            <code>            const long animalNumber = 2761202382;
            EarmarkEntityServiceContractClient proxy = new EarmarkEntityServiceContractClient("EarmarkEntityService");

            try
            {
                Assert.IsNotNull(proxy.ClientCredentials);
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                AnimalType animalType = new AnimalType { Code = 12 };

                EarmarkNumberStatus status = proxy.CheckEarmarkNumber(animalType, TestUtil.CHR_NUMBER, animalNumber);

                status.Should().NotBeNull();
                status.IsRegistered.Should().BeTrue();
                status.ErrorCode.Should().Be(0);
                status.ErrorText.Should().BeBlank();
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message, "Exception");
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.EarmarkEntityService.CheckEarmarkColor(DLBR.DCF.KDB.MessageContracts.CheckEarmarkColorRequest)">
      <summary>
        <h1>Functional Description</h1>
            Get the earmarkColorType to order for this earmark number
            <h1>Nested Input parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>EarmarkNumber</td><td>yes</td><td>&gt;0</td><td>The earmark number you want get the earmarkColorType for</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>EarmarkColorType</td><td>The EarmarkColorType to order for this earmark number.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.CheckEarmarkColorRequest" /></param>
      <returns>The status of the specified earmark number. See <see cref="T:DLBR.DCF.KDB.MessageContracts.CheckEarmarkColorResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example:
            <code>            const long animalNumber = 2761201997;
            using (var service = new WcfServiceWrapper&lt;EarmarkEntityServiceContract&gt;(Settings.Default.ADFS_IdpEndpoint,
                Settings.Default.ADFS_Realm,
                TestUtil.USER_ID_FARMER, TestUtil.PASSWORD_FARMER,
                String.Format("https://{0}/DCFServices/EarmarkEntityService.svc/adfs", Settings.Default.DCF_Hostname),
                false))
            {
                CheckEarmarkColorRequest request = new CheckEarmarkColorRequest
                {
                    EarmarkNumber = animalNumber,
                };
                CheckEarmarkColorResponse response = service.Channel.CheckEarmarkColor(request);
                response.Should().NotBeNull();
                response.EarmarkColorType.Should().NotBeNull();
            }
</code></example>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.EarmarkManufactorEntityService">
      <summary>
        <h1>General</h1>
        <p>The following URIs specifies the location of the service in the production- and production test environment. 
            By default services in both the production and the production test environment uses the production data stores. The alternative URIs, which uses the test data stores (Medio), may be used for testing purposes.
            Please note that service versions might differ between the production- and production test environments. Before you begin using the service, please consult the person responsible</p>
        <p>
          <b>Production URL:</b>
          <a href="http://prod.dcf.ws.dlbr.dk/DCFServices/EarmarkManufactorEntityService.svc">http://prod.dcf.ws.dlbr.dk/DCFServices/EarmarkManufactorEntityService.svc</a>
        </p>
        <p>
          <b>Accept test URL:</b>
          <a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/EarmarkManufactorEntityService.svc">http://accepttest.dcf.ws.dlbr.dk/DCFServices/EarmarkManufactorEntityService.svc</a>
        </p>
        <h1>Web Service Description</h1>
            The machine-readable description in the form of a WSDL document can be obtained by querying the following URI’s.
            <p><b>Production WSDL:</b><a href="http://prod.dcf.ws.dlbr.dk/DCFServices/EarmarkManufactorEntityService.svc?wsdl">http://prod.dcf.ws.dlbr.dk/DCFServices/EarmarkManufactorEntityService.svc?wsdl</a></p><p><b>Accept test WSDL:</b><a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/EarmarkManufactorEntityService.svc?wsdl">http://accepttest.dcf.ws.dlbr.dk/DCFServices/EarmarkManufactorEntityService.svc?wsdl</a></p><h1>Endpoints</h1>
            For information regarding endpoints, see topic 'Endpoints available in DCF Services'
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.EarmarkManufactorEntityService.RegisterEarmarkOrder(DLBR.DCF.KDB.MessageContracts.RegisterEarmarkOrderRequest)">
      <summary>
        <h1>Functional Description</h1>
            Register a Earmark order of type Series, Replacement, Supplement or Article
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>CHRNumber</td><td>yes</td><td>&gt;0</td><td>The danish central husbandry registration number of the property, to which the order is to be registrated to.</td></tr><tr><td>AnimalType</td><td>conditional</td><td>Code&gt;0</td><td>The type of animal(e.g. cattle) in the herd defined by the ShipToHerdNumber member.If ShipToHerdNumber is set, AnimalType is required.</td></tr><tr><td>ExpressDelivery</td><td></td><td></td><td>Can only be used when ordering Earmark Replacements. When set the order is higher priotered by the Earmark manufacturer.</td></tr><tr><td>ShipToHerdNumber</td><td></td><td></td><td>If set, the order is shipped to the choosen herd number , otherwise the order is shipped to herd number equal to the  CHRNumber.</td></tr><tr><td>EarmarkSeriesRegistration</td><td></td><td></td><td>If set the order is a Series Order. Cannot be set in combination with other order types, e.g. EarmarkReplacmentRegistration or EarmarkArticleRegistration.</td></tr><tr><td>EarmarkReplacementRegistration</td><td></td><td></td><td>If set the order is a Replacement Order. Cannot be set in combination with other order types, e.g. EarmarkSeriesRegistration or EarmarkArticleRegistration.</td></tr><tr><td>EarmarkArticleRegistration</td><td></td><td></td><td>If set the order is a Article Order. Cannot be set in combination with other order types, e.g. EarmarkSeriesRegistration or EarmarkReplacementRegistration.</td></tr><tr><td>EarmarkSupplementRegistration</td><td></td><td></td><td>If set the order is a supplemental Order. Cannot be set in combination with other order types, e.g. EarmarkReplacementRegistration.</td></tr><tr><td>WarningFlags</td><td></td><td></td><td>Add warning flags to ignore warnings</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>EarmarkOrder</td><td>The newly created Earmark order</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.RegisterEarmarkOrderRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.RegisterEarmarkOrderResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            EarmarkManufactorEntityServiceContractClient proxy = new EarmarkManufactorEntityServiceContractClient("EarmarkManufactorEntityService");

            try
            {
                Assert.IsNotNull(proxy.ClientCredentials);
                proxy.ClientCredentials.UserName.UserName = "schippers";
                proxy.ClientCredentials.UserName.Password = "schippers";

                AnimalType animalType = new AnimalType { Code = 13 }; //Sheep
                EarmarkColorType earmarkColorType = new EarmarkColorType { Code = 1 };
                EarmarkManufacturerType earmarkManufacturerType = new EarmarkManufacturerType { Code = 10 }; //"Schippers"
                const int quantity = 5;
                const int updateQuantity = 6;

                EarmarkSeriesCombinationCollection seriesCombinations = proxy.FindEarmarkSeriesCombinations(animalType, earmarkColorType, earmarkManufacturerType, null);

                EarmarkSeriesRegistration earmarkSeriesRegistration = new EarmarkSeriesRegistration()
                {
                    EarmarkSeriesCombination = seriesCombinations[0],
                    Quantity = quantity
                };

                // Create
                EarmarkOrder earmarkOrder = proxy.RegisterEarmarkOrder(null, TestUtil.CHR_NUMBER_SHEEP, null, null, earmarkSeriesRegistration, null, null, null);
                Assert.IsNotNull(earmarkOrder);
                Assert.IsTrue(earmarkOrder.EarmarkSeries.NumberFrom &gt; 0);
                Assert.IsTrue(earmarkOrder.EarmarkSeries.NumberTo &gt; 0);
                Assert.AreEqual(earmarkOrder.EarmarkSeries.Quantity, quantity);

                // Update
                earmarkOrder.EarmarkSeries.Quantity = updateQuantity;
                proxy.UpdateEarmarkOrder(ref earmarkOrder);
                Assert.IsNotNull(earmarkOrder);
                Assert.IsTrue(earmarkOrder.EarmarkSeries.NumberFrom &gt; 0);
                Assert.IsTrue(earmarkOrder.EarmarkSeries.NumberTo &gt; 0);
                Assert.AreEqual(earmarkOrder.EarmarkSeries.Quantity, updateQuantity);

                // Delete
                proxy.DeleteEarmarkOrder(earmarkOrder);

            }
            catch (FaultException&lt;InvalidArgument&gt; ex)
            {
                Debug.WriteLine(ex.Message, "RegisterEarmarkOrderByManufactor");
                throw;
            }

            catch (FaultException ex)
            {
                Debug.WriteLine(ex.Message, "RegisterEarmarkOrderByManufactor");
                throw;
            }

            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.EarmarkManufactorEntityService.UpdateEarmarkOrder(DLBR.DCF.KDB.MessageContracts.UpdateEarmarkOrderRequest)">
      <summary>
        <h1>Functional Description</h1>
            Updates a existing Earmark order
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>EarmarkOrder</td><td>yes</td><td></td><td>The Earmark order to update</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>EarmarkOrder</td><td>The updated Earmark order</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.UpdateEarmarkOrderRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.UpdateEarmarkOrderResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example:
            <code>            EarmarkManufactorEntityServiceContractClient proxy = new EarmarkManufactorEntityServiceContractClient("EarmarkManufactorEntityService");

            try
            {
                Assert.IsNotNull(proxy.ClientCredentials);
                proxy.ClientCredentials.UserName.UserName = "schippers";
                proxy.ClientCredentials.UserName.Password = "schippers";

                AnimalType animalType = new AnimalType { Code = 13 }; //Sheep
                EarmarkColorType earmarkColorType = new EarmarkColorType { Code = 1 };
                EarmarkManufacturerType earmarkManufacturerType = new EarmarkManufacturerType { Code = 10 }; //"Schippers"
                const int quantity = 5;
                const int updateQuantity = 6;

                EarmarkSeriesCombinationCollection seriesCombinations = proxy.FindEarmarkSeriesCombinations(animalType, earmarkColorType, earmarkManufacturerType, null);

                EarmarkSeriesRegistration earmarkSeriesRegistration = new EarmarkSeriesRegistration()
                {
                    EarmarkSeriesCombination = seriesCombinations[0],
                    Quantity = quantity
                };

                // Create
                EarmarkOrder earmarkOrder = proxy.RegisterEarmarkOrder(null, TestUtil.CHR_NUMBER_SHEEP, null, null, earmarkSeriesRegistration, null, null, null);
                Assert.IsNotNull(earmarkOrder);
                Assert.IsTrue(earmarkOrder.EarmarkSeries.NumberFrom &gt; 0);
                Assert.IsTrue(earmarkOrder.EarmarkSeries.NumberTo &gt; 0);
                Assert.AreEqual(earmarkOrder.EarmarkSeries.Quantity, quantity);

                // Update
                earmarkOrder.EarmarkSeries.Quantity = updateQuantity;
                proxy.UpdateEarmarkOrder(ref earmarkOrder);
                Assert.IsNotNull(earmarkOrder);
                Assert.IsTrue(earmarkOrder.EarmarkSeries.NumberFrom &gt; 0);
                Assert.IsTrue(earmarkOrder.EarmarkSeries.NumberTo &gt; 0);
                Assert.AreEqual(earmarkOrder.EarmarkSeries.Quantity, updateQuantity);

                // Delete
                proxy.DeleteEarmarkOrder(earmarkOrder);

            }
            catch (FaultException&lt;InvalidArgument&gt; ex)
            {
                Debug.WriteLine(ex.Message, "RegisterEarmarkOrderByManufactor");
                throw;
            }

            catch (FaultException ex)
            {
                Debug.WriteLine(ex.Message, "RegisterEarmarkOrderByManufactor");
                throw;
            }

            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.EarmarkManufactorEntityService.DeleteEarmarkOrder(DLBR.DCF.KDB.MessageContracts.DeleteEarmarkOrderRequest)">
      <summary>
        <h1>Functional Description</h1>
            Deletes a existing Earmark order
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>EarmarkOrder</td><td>yes</td><td></td><td>The Earmark order to delete</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>None</td><td>If deletion is unsuccessful an exception is thrown, otherwise there is no output.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.DeleteEarmarkOrderRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.DeleteEarmarkOrderResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example:
            <code>            EarmarkManufactorEntityServiceContractClient proxy = new EarmarkManufactorEntityServiceContractClient("EarmarkManufactorEntityService");

            try
            {
                Assert.IsNotNull(proxy.ClientCredentials);
                proxy.ClientCredentials.UserName.UserName = "schippers";
                proxy.ClientCredentials.UserName.Password = "schippers";

                AnimalType animalType = new AnimalType { Code = 13 }; //Sheep
                EarmarkColorType earmarkColorType = new EarmarkColorType { Code = 1 };
                EarmarkManufacturerType earmarkManufacturerType = new EarmarkManufacturerType { Code = 10 }; //"Schippers"
                const int quantity = 5;
                const int updateQuantity = 6;

                EarmarkSeriesCombinationCollection seriesCombinations = proxy.FindEarmarkSeriesCombinations(animalType, earmarkColorType, earmarkManufacturerType, null);

                EarmarkSeriesRegistration earmarkSeriesRegistration = new EarmarkSeriesRegistration()
                {
                    EarmarkSeriesCombination = seriesCombinations[0],
                    Quantity = quantity
                };

                // Create
                EarmarkOrder earmarkOrder = proxy.RegisterEarmarkOrder(null, TestUtil.CHR_NUMBER_SHEEP, null, null, earmarkSeriesRegistration, null, null, null);
                Assert.IsNotNull(earmarkOrder);
                Assert.IsTrue(earmarkOrder.EarmarkSeries.NumberFrom &gt; 0);
                Assert.IsTrue(earmarkOrder.EarmarkSeries.NumberTo &gt; 0);
                Assert.AreEqual(earmarkOrder.EarmarkSeries.Quantity, quantity);

                // Update
                earmarkOrder.EarmarkSeries.Quantity = updateQuantity;
                proxy.UpdateEarmarkOrder(ref earmarkOrder);
                Assert.IsNotNull(earmarkOrder);
                Assert.IsTrue(earmarkOrder.EarmarkSeries.NumberFrom &gt; 0);
                Assert.IsTrue(earmarkOrder.EarmarkSeries.NumberTo &gt; 0);
                Assert.AreEqual(earmarkOrder.EarmarkSeries.Quantity, updateQuantity);

                // Delete
                proxy.DeleteEarmarkOrder(earmarkOrder);

            }
            catch (FaultException&lt;InvalidArgument&gt; ex)
            {
                Debug.WriteLine(ex.Message, "RegisterEarmarkOrderByManufactor");
                throw;
            }

            catch (FaultException ex)
            {
                Debug.WriteLine(ex.Message, "RegisterEarmarkOrderByManufactor");
                throw;
            }

            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.EarmarkManufactorEntityService.FindEarmarkSeriesCombinations(DLBR.DCF.KDB.MessageContracts.FindEarmarkSeriesCombinationsRequest)">
      <summary>
        <h1>Functional Description</h1>
            Finds valid Earmark series combinations by animaltype, manufacturer and color
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>AnimalType</td><td></td><td>Code&gt;0</td><td>The Animal type to find Earmark series combinations by, e.g. Cattle. If set only EarmarkSeriesCombinations matching the specified AnimalType and other specified parameters are returned.</td></tr><tr><td>EarmarkManufacturerType</td><td></td><td>Code&gt;0 </td><td>The Earmark manufacturerType to find Earmark series combinations by, e.g. Allflex. If set only EarmarkSeriesCombinations matching the specified EarmarkManufacturerType and other specified parameters are returned.</td></tr><tr><td>EarmarkColorType</td><td></td><td>Code&gt;0</td><td>The Earmark color type to find Earmark series combinations by, e.g. Yellow. If set only EarmarkSeriesCombinations matching the specified EarmarkColorType and other specified parameters are returned</td></tr><tr><td>IncludeBreedingEarmarks</td><td></td><td>Code&gt;0</td><td>If you wish to see breeding earmarks this parameter should be set to TRUE.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindEarmarkSeriesCombinationsRequest" /></param>
      <returns>A collection of Earmark series combinations. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindEarmarkSeriesCombinationsResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example:
            <code>            using (var service = new WcfServiceWrapper&lt;EarmarkManufactorEntityServiceContract&gt;(Settings.Default.ADFS_IdpEndpoint,
                       Settings.Default.ADFS_Realm,
                       "schippers", "schippers",
                       String.Format("https://{0}/DCFServices/EarmarkManufactorEntityService.svc/adfs", Settings.Default.DCF_Hostname),
                       false))
            {
                AnimalType animalType = new AnimalType { Code = 13 }; //Sheep
                EarmarkColorType earmarkColorType = new EarmarkColorType { Code = 1 };
                EarmarkManufacturerType earmarkManufacturerType = new EarmarkManufacturerType { Code = 10 }; //"Schippers"

                FindEarmarkSeriesCombinationsRequest request = new FindEarmarkSeriesCombinationsRequest(animalType, earmarkColorType, earmarkManufacturerType, true);
                FindEarmarkSeriesCombinationsResponse response = service.Channel.FindEarmarkSeriesCombinations(request);

                EarmarkSeriesCombinationCollection result = response.EarmarkSeriesCombinationCollection;
                result.Should().NotBeNull();
                EarmarkSeriesCombination series = result.FirstOrDefault(sc =&gt; sc.Id == 452);
                series.Should().NotBeNull();
                series.EarmarkCombination1.Should().NotBeNull();
                series.EarmarkCombination2.Should().NotBeNull();
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.EarmarkManufactorEntityService.FindEarmarkCombinations(DLBR.DCF.KDB.MessageContracts.FindEarmarkCombinationsRequest)">
      <summary>
        <h1>Functional Description</h1>
            Finds valid Earmark combinations by animaltype, manufacturer and color
            <h1>Nested Input parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>AnimalType</td><td></td><td>Code&gt;0</td><td>The Animal type to find Earmark combinations by, e.g. Cattle. If set only EarmarkCombinations matching the specified AnimalType and other specified parameters are returned.</td></tr><tr><td>EarmarkManufacturerType</td><td></td><td>Code&gt;0</td><td>The Earmark manufacturerType to find Earmark combinations by, e.g. Allflex. If set only EarmarkSeriesCombinations matching the specified EarmarkManufacturerType and other specified parameters are returned.</td></tr><tr><td>EarmarkColorType</td><td></td><td>Code&gt;0</td><td>The Earmark color type to find Earmark combinations by, e.g. Yellow. If set only EarmarkSeriesCombinations matching the specified EarmarkColorType and other specified parameters are returned. </td></tr><tr><td>IncludeBreedingEarmarks</td><td></td><td>Code&gt;0</td><td>If you wish to see breeding earmarks this parameter should be set to TRUE.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindEarmarkCombinationsRequest" /></param>
      <returns>description See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindEarmarkCombinationsResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example:
            <code>            EarmarkManufactorEntityServiceContractClient proxy = new EarmarkManufactorEntityServiceContractClient("EarmarkManufactorEntityService");
            try
            {
                Assert.IsNotNull(proxy.ClientCredentials);
                proxy.ClientCredentials.UserName.UserName = "schippers";
                proxy.ClientCredentials.UserName.Password = "schippers";

                AnimalType animalType = new AnimalType { Code = 13 }; //Sheep
                EarmarkColorType earmarkColorType = new EarmarkColorType { Code = 1 };
                EarmarkManufacturerType earmarkManufacturerType = new EarmarkManufacturerType { Code = 10 }; //"Schippers"

                EarmarkCombinationCollection result = proxy.FindEarmarkCombinations(animalType, earmarkColorType, earmarkManufacturerType);
                Assert.IsNotNull(result);
                EarmarkCombination combination = result.Where(c =&gt; c.Id == 331).First();
                combination.Should().NotBeNull();
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.CullingEntityService">
      <summary>
        <h1>General</h1>
        <p>
            The following URIs specifies the location of the service in the production- and production test environment. 
            By default services in both the production and the production test environment uses the production data stores. The alternative URIs, which uses the test data stores (Medio), may be used for testing purposes.
            Please note that service versions might differ between the production- and production test environments. Before you begin using the service, please consult the person responsible as described in section 3.7 – Responsibility assignment.
            </p>
        <p>
          <b>Production URL:</b>
          <a href="http://prod.dcf.ws.dlbr.dk/DCFServices/CullingEntityService.svc">http://prod.dcf.ws.dlbr.dk/DCFServices/CullingEntityService.svc</a>
        </p>
        <p>
          <b>Accept test URL:</b>
          <a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/CullingEntityService.svc">http://accepttest.dcf.ws.dlbr.dk/DCFServices/CullingEntityService.svc</a>
        </p>
        <h1>Web Service Description</h1>
            The machine-readable description in the form of a WSDL document can be obtained by querying the following URI’s.
            <p><b>Production WSDL:</b><a href="http://prod.dcf.ws.dlbr.dk/DCFServices/CullingEntityService.svc?wsdl">http://prod.dcf.ws.dlbr.dk/DCFServices/CullingEntityService.svc?wsdl</a></p><p><b>Accept test WSDL:</b><a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/CullingEntityService.svc?wsdl">http://accepttest.dcf.ws.dlbr.dk/DCFServices/CullingEntityService.svc?wsdl</a></p><h1>Endpoints</h1>
            For information regarding endpoints, see topic 'Endpoints available in DCF Services'
            </summary>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.CullingEntityServiceBase">
      <summary>
            Service Class - CullingEntityService
            </summary>
      <tocexclude />
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.CullingEntityService.GetCullingById(DLBR.DCF.KDB.MessageContracts.GetCullingByIdRequest)">
      <summary>
        <h1>Functional Description</h1>
            Find a <see cref="T:DLBR.DCF.KDB.DataContracts.Culling" /> entity by Id
            <h1>Notes</h1><h1>Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>CullingId</td><td>yes</td><td>&gt;0</td><td>The Id of the wanted culling.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>Culling</td><td>The returning <see cref="T:DLBR.DCF.KDB.DataContracts.Culling" /> entity. If the entity is not found, this value is null.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetCullingByIdRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetCullingByIdResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            CullingEntityServiceContractClient client = new CullingEntityServiceContractClient("CullingEntityService");

            try
            {
                client.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                client.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                Culling result = client.GetCullingById(m_cullingId);

                Assert.IsNotNull(result);
                Assert.AreEqual(m_cullingAnimalNumber, result.AnimalNumber);

                Debug.WriteLine("Returned Culling Id: " + result.Id, "Result");

            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
                throw;
            }
            finally
            {
                if (client.State != CommunicationState.Faulted)
                {
                    client.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.CullingEntityService.FindCullingsByAnimalNumber(DLBR.DCF.KDB.MessageContracts.FindCullingsByAnimalNumberRequest)">
      <summary>
        <h1>Functional Description</h1>
            Find a number of <see cref="T:DLBR.DCF.KDB.DataContracts.Culling" /> entities by AnimalNumber
            <h1>Notes</h1><h1>Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>AnimalNumber</td><td>yes</td><td>&gt;0</td><td>The animal number</td></tr><tr><td>CullingType</td><td>yes</td><td>Code&gt;0</td><td>The type of culling, e.g. Code=61. To be reinstated</td></tr><tr><td>RequestedCount</td><td>no</td><td></td><td>If specified only the specified number of cullings are returned. The cullings are sorted by date, newest first. If not specified all cullings on the specified animal are returned.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>CullingCollection</td><td>The returning collection of <see cref="T:DLBR.DCF.KDB.DataContracts.Culling" /> entities. If no entities are found, this collection is empty.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindCullingsByAnimalNumberRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindCullingsByAnimalNumberResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            CullingEntityServiceContractClient client = new CullingEntityServiceContractClient("CullingEntityService");

            try
            {
                client.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                client.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                //Get results
                CullingEntityService.CullingCollection result = client.FindCullingsByAnimalNumber(m_cullingAnimalNumber, null, null);

                Assert.IsNotNull(result);
                Assert.IsTrue(result.Count &gt; 0);
                Assert.AreEqual(m_cullingAnimalNumber, result[0].AnimalNumber);

                Debug.WriteLine("Number of returned Cullings: " + result.Count.ToString(), "Result");
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message, "Exception");
                throw;
            }
            finally
            {
                if (client.State != CommunicationState.Faulted)
                {
                    client.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.CullingEntityService.FindCullingsByHerdNumber(DLBR.DCF.KDB.MessageContracts.FindCullingsByHerdNumberRequest)">
      <summary>
        <h1>Functional Description</h1>
            Find a number of <see cref="T:DLBR.DCF.KDB.DataContracts.Culling" /> entities by HerdNumber
            <h1>Notes</h1><h1>Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>HerdNumber</td><td>yes</td><td>&gt;0</td><td>The herd number where the culling animal belong to</td></tr><tr><td>AnimalType</td><td>yes</td><td>Code&gt;0</td><td>The type of animal, e.g. Cattle.</td></tr><tr><td>CullingType</td><td>yes</td><td>Code&gt;0</td><td>The type of culling, e.g. Code=61. To be reinstated</td></tr><tr><td>FromDate</td><td>no</td><td></td><td>If specified only cullings after the specified date is returned. If not specified all cullings matching the other criteria’s is returned and only for active animals in the herd. If this parameter is set also the “ToDate” must be set.</td></tr><tr><td>ToDate</td><td>no</td><td></td><td>If specified only cullings before the specified date is returned. This parameter is required if “FromDate” is specified.</td></tr><tr><td>RequestedCount</td><td>no</td><td></td><td>If specified only the specified number of cullings are returned. The cullings are sorted by date, newest first. If not specified all cullings on the specified herd are returned.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>CullingCollection</td><td>The returning collection of <see cref="T:DLBR.DCF.KDB.DataContracts.Culling" /> entities. If no entities are found, this collection is empty.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindCullingsByHerdNumberRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindCullingsByHerdNumberResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            CullingEntityServiceContractClient client = new CullingEntityServiceContractClient("CullingEntityService");

            try
            {
                client.ClientCredentials.UserName.UserName = TestUtil.USER_ID_FARMER;
                client.ClientCredentials.UserName.Password = TestUtil.PASSWORD_FARMER;

                // Classifications
                AnimalType animalType = new AnimalType { Code = 12 };
                DateTime fromDate = new DateTime(2005, 1, 1);
                DateTime toDate = new DateTime(2008, 5, 1);

                //Get cullings
                CullingEntityService.CullingCollection result = client.FindCullingsByHerdNumber(animalType, null, fromDate, TestUtil.HERD_NUMBER, null, toDate);

                Assert.IsNotNull(result);
                Assert.IsTrue(result.Count &gt; 0);
                Assert.AreEqual(TestUtil.HERD_NUMBER, result[0].HerdNumber);

                Debug.WriteLine("Number of returned Cullings: " + result.Count.ToString(), "Result");
            }

            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message, "Exception");
                throw;
            }
            finally
            {
                if (client.State != CommunicationState.Faulted)
                {
                    client.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.CullingEntityService.RegisterCulling(DLBR.DCF.KDB.MessageContracts.RegisterCullingRequest)">
      <summary>
        <h1>Functional Description</h1>
            Register a new Culling
            <h1>Notes</h1><h1>Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>HerdNumber</td><td>yes</td><td>&gt;0</td><td>The herd number where the culling animal belong to</td></tr><tr><td>AnimalType</td><td>yes</td><td>Code&gt;0</td><td>The type of animal, e.g. Cattle.</td></tr><tr><td>AnimalNumber</td><td>yes</td><td>&gt;0</td><td>The animal number</td></tr><tr><td>Date</td><td>yes</td><td></td><td>The date of culling</td></tr><tr><td>CullingType</td><td>yes</td><td>Code&gt;0</td><td>The type of culling, e.g. Code=61. To be reinstated</td></tr><tr><td>CauseCollection</td><td>no</td><td></td><td>The cause(s) of culling. The number of causes can for now be 2</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>Culling</td><td>The newly registered <see cref="T:DLBR.DCF.KDB.DataContracts.Culling" /> entity</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.RegisterCullingRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.RegisterCullingResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            CullingEntityServiceContractClient client = new CullingEntityServiceContractClient("CullingEntityService");

            try
            {
                client.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                client.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                // classifications
                AnimalType animalType = new AnimalType { Code = 12 };
                TransferCause cause = new TransferCause { Code = 1 };//For lav mælkeydelse
                TransferCauseCollection causeCollection = new TransferCauseCollection { cause };
                CullingType cullingType = new CullingType { Code = 60 };//Ønskes udsat

                // The following values of the parameters forces the database to throw an exception.
                Culling result = client.RegisterCulling(TestUtil.ANIMAL_NUMBER_FOR_TESTHERD, animalType, causeCollection,
                                                        cullingType, DateTime.MaxValue, TestUtil.HERD_NUMBER);

            }

            catch (FaultException&lt;OperationFailed&gt; ex)
            {
                Debug.WriteLine(ex.Message, "RegisterCullingTest");

                Assert.IsNotNull(ex.Detail);
                Assert.IsNotNull(ex.Detail.FaultDescription);

                Assert.AreEqual("4047", ex.Detail.FaultCode);
                Assert.AreEqual("Dyret findes ikke i besætningen på indberetningsdatoen.", ex.Detail.FaultDescription);
            }

            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message, "RegisterCullingTest");
                throw;
            }
            finally
            {
                if (client.State != CommunicationState.Faulted)
                    client.Close();
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.CullingEntityService.UpdateCulling(DLBR.DCF.KDB.MessageContracts.UpdateCullingRequest)">
      <summary>
        <h1>Functional Description</h1>
            Updates an existing Culling
            <h1>Notes</h1><h1>Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>Culling</td><td>yes</td><td>&gt;0</td><td>The <see cref="T:DLBR.DCF.KDB.DataContracts.Culling" /> entity to update</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>Culling</td><td>The updated <see cref="T:DLBR.DCF.KDB.DataContracts.Culling" /> entity</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.UpdateCullingRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.UpdateCullingResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            CullingEntityServiceContractClient client = new CullingEntityServiceContractClient("CullingEntityService");

            try
            {
                client.ClientCredentials.UserName.UserName = TestUtil.USER_ID; // not priviliged to update a Culling
                client.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                // classifications
                AnimalType animalType = new AnimalType { Code = 12 };
                TransferCause cause = new TransferCause { Code = 1 };//For lav mælkeydelse
                TransferCauseCollection causeCollection = new TransferCauseCollection { cause };

                CullingType cullingType = new CullingType { Code = 60 };//Ønskes udsat

                // The following values of the parameters forces the database to throw an exception.
                Culling culling = new Culling();
                culling.Id = 1;
                culling.HerdNumber = TestUtil.HERD_NUMBER;
                culling.AnimalType = animalType;
                culling.AnimalNumber = TestUtil.ANIMAL_NUMBER_FOR_TESTHERD;
                culling.CullingType = cullingType;
                culling.CauseCollection = causeCollection;
                culling.Date = DateTime.MaxValue;
                culling.LastUpdate = DateTime.MaxValue;

                client.UpdateCulling(ref culling);
            }

            catch (FaultException&lt;OperationFailed&gt; ex)
            {
                Debug.WriteLine(ex.Message, "UpdateCullingTest");

                Assert.IsNotNull(ex.Detail);
                Assert.IsNotNull(ex.Detail.FaultDescription);

                Assert.AreEqual("4182", ex.Detail.FaultCode);
                Assert.AreEqual("Data som skal opdateres/slettes i UDSAETNING kan ikke findes.", ex.Detail.FaultDescription);
            }

            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message, "UpdateCullingTest");
                throw;
            }
            finally
            {
                if (client.State != CommunicationState.Faulted)
                    client.Close();
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.CullingEntityService.DeleteCulling(DLBR.DCF.KDB.MessageContracts.DeleteCullingRequest)">
      <summary>
        <h1>Functional Description</h1>
            Delete an existing Culling
            <h1>Notes</h1><h1>Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>Culling</td><td>yes</td><td>&gt;0</td><td>The <see cref="T:DLBR.DCF.KDB.DataContracts.Culling" /> entity to delete</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.DeleteCullingRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.DeleteCullingResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            CullingEntityServiceContractClient client = new CullingEntityServiceContractClient("CullingEntityService");

            try
            {
                client.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                client.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                // Classifications
                AnimalType animalType = new AnimalType { Code = 12 };
                TransferCause cause = new TransferCause { Code = 1 };//For lav mælkeydelse
                TransferCauseCollection causeCollection = new TransferCauseCollection { cause };
                CullingType cullingType = new CullingType { Code = 60 };//Ønskes udsat

                // The following values of the parameters forces the database to throw an exception.
                Culling culling = new Culling();
                culling.Id = 1;
                culling.HerdNumber = TestUtil.HERD_NUMBER;
                culling.AnimalType = animalType;
                culling.AnimalNumber = TestUtil.ANIMAL_NUMBER_FOR_TESTHERD;
                culling.CullingType = cullingType;
                culling.CauseCollection = causeCollection;
                culling.Date = DateTime.MaxValue;
                culling.LastUpdate = DateTime.MaxValue;

                client.DeleteCulling(culling);
            }

            catch (FaultException&lt;OperationFailed&gt; ex)
            {
                Debug.WriteLine(ex.Message, "DeleteCullingTest");

                Assert.IsNotNull(ex.Detail);
                Assert.IsNotNull(ex.Detail.FaultDescription);

                Assert.AreEqual("4182", ex.Detail.FaultCode);
                Assert.AreEqual("Data som skal opdateres/slettes i UDSAETNING kan ikke findes.", ex.Detail.FaultDescription);
            }

            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message, "DeleteCullingTest");
                throw;
            }
            finally
            {
                if (client.State != CommunicationState.Faulted)
                    client.Close();
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.CullingEntityService.GetTransferCauseEntityCollection(DLBR.DCF.KDB.DataContracts.TransferCauseCollection)">
      <summary>
            Method to translate a DataContracts.TransferCauseCollection to a collection of <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.TransferCauseEntity" />.
            </summary>
      <param name="transferCauseCollection"></param>
      <returns> Null if <paramref name="transferCauseCollection" /> is null or empty. Otherwise a collection of <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.TransferCauseEntity" /> is returned. </returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.GeneticsEntityServiceBase">
      <summary>
            Service Class - GeneticsEntityService
            </summary>
      <tocexclude />
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.GeneticsEntityService">
      <summary>
        <h1>General</h1>
        <p>
            The following URIs specifies the location of the service in the production- and production test environment. 
            By default services in both the production and the production test environment uses the production data stores. The alternative URIs, which uses the test data stores (Medio), may be used for testing purposes.
            Please note that service versions might differ between the production- and production test environments. Before you begin using the service, please consult the person responsible as described in section 3.7 – Responsibility assignment.
            </p>
        <p>
          <b>Production URL:</b>
          <a href="http://prod.dcf.ws.dlbr.dk/DCFServices/GeneticsEntityService.svc">http://prod.dcf.ws.dlbr.dk/DCFServices/GeneticsEntityService.svc</a>
        </p>
        <p>
          <b>Accept test URL:</b>
          <a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/GeneticsEntityService.svc">http://accepttest.dcf.ws.dlbr.dk/DCFServices/GeneticsEntityService.svc</a>
        </p>
        <h1>Web Service Description</h1>
            The machine-readable description in the form of a WSDL document can be obtained by querying the following URI’s.
            <p><b>Production WSDL:</b><a href="http://prod.dcf.ws.dlbr.dk/DCFServices/GeneticsEntityService.svc?wsdl">http://prod.dcf.ws.dlbr.dk/DCFServices/GeneticsEntityService.svc?wsdl</a></p><p><b>Accept test WSDL:</b><a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/GeneticsEntityService.svc?wsdl">http://accepttest.dcf.ws.dlbr.dk/DCFServices/GeneticsEntityService.svc?wsdl</a></p><h1>Endpoints</h1>
            For information regarding endpoints, see topic 'Endpoints available in DCF Services'
            </summary>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.InseminatorTimeRecordEntityServiceBase">
      <summary>
            Service Class - InseminatorTimeRecordEntityService
            </summary>
      <tocexclude />
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.InseminatorTimeRecordEntityService">
      <summary>
        <h1>General</h1>
        <p>
            The following URIs specifies the location of the service in the production- and production test environment. 
            By default services in both the production and the production test environment uses the production data stores. The alternative URIs, which uses the test data stores (Medio), may be used for testing purposes.
            Please note that service versions might differ between the production- and production test environments. Before you begin using the service, please consult the person responsible as described in section 3.7 – Responsibility assignment.
            </p>
        <p>
          <b>Production URL:</b>
          <a href="http://prod.dcf.ws.dlbr.dk/DCFServices/InseminatorTimeRecordEntityService.svc">http://prod.dcf.ws.dlbr.dk/DCFServices/InseminatorTimeRecordEntityService.svc</a>
        </p>
        <p>
          <b>Accept test URL:</b>
          <a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/InseminatorTimeRecordEntityService.svc">http://accepttest.dcf.ws.dlbr.dk/DCFServices/InseminatorTimeRecordEntityService.svc</a>
        </p>
        <h1>Web Service Description</h1>
            The machine-readable description in the form of a WSDL document can be obtained by querying the following URI’s.
            <p><b>Production WSDL:</b><a href="http://prod.dcf.ws.dlbr.dk/DCFServices/InseminatorTimeRecordEntityService.svc?wsdl">http://prod.dcf.ws.dlbr.dk/DCFServices/InseminatorTimeRecordEntityService.svc?wsdl</a></p><p><b>Accept test WSDL:</b><a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/InseminatorTimeRecordEntityService.svc?wsdl">http://accepttest.dcf.ws.dlbr.dk/DCFServices/InseminatorTimeRecordEntityService.svc?wsdl</a></p><h1>Endpoints</h1>
            For information regarding endpoints, see topic 'Endpoints available in DCF Services'
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.InseminatorTimeRecordEntityService.FindInseminatorTimeRecordByInseminator(DLBR.DCF.KDB.MessageContracts.FindInseminatorTimeRecordByInseminatorRequest)">
      <summary>
            Finds the inseminator time record by inseminator.
            </summary>
      <param name="request">The request.</param>
      <returns>A response object containing a collection of InseminatorTimeRecord's.
            </returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.InseminatorTimeRecordEntityService.RegisterInseminatorTimeRecord(DLBR.DCF.KDB.MessageContracts.RegisterInseminatorTimeRecordRequest)">
      <summary>
            Registers a new inseminator time record.
            </summary>
      <param name="request">The request object with the new inseminator time record.</param>
      <returns>Returns a response object with the newly created time record.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.InseminatorTimeRecordEntityService.UpdateInseminatorTimeRecord(DLBR.DCF.KDB.MessageContracts.UpdateInseminatorTimeRecordRequest)">
      <summary>
            Updates an existing time record with a correction.
            </summary>
      <param name="request">The request, containing the time record id to update, and the time span to update.</param>
      <returns>Method returns a response object containing the newly updated time record
            with the new correction added to it. The correction will be added to the correction collection
            ont he time record.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.InseminatorTimeRecordEntityService.BatchCommitTimeRecord(DLBR.DCF.KDB.MessageContracts.BatchCommitTimeRecordRequest)">
      <summary>
            Method for committing multiple inserts/updates within a single transaction
            </summary>
      <param name="request">The request with multiple inserts/updates</param>
      <returns>
            Returns a collection of InseminatoTimeRecords which have been affected by the update.
            </returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.InseminatorTourplanEntityServiceBase">
      <summary>
            Service Class - InseminatorTourplanEntityService
            </summary>
      <tocexclude />
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.InseminatorTourplanEntityService">
      <summary>
        <h1>General</h1>
        <p>
            The following URIs specifies the location of the service in the production- and production test environment. 
            By default services in both the production and the production test environment uses the production data stores. The alternative URIs, which uses the test data stores (Medio), may be used for testing purposes.
            Please note that service versions might differ between the production- and production test environments. Before you begin using the service, please consult the person responsible as described in section 3.7 – Responsibility assignment.
            </p>
        <p>
          <b>Production URL:</b>
          <a href="http://prod.dcf.ws.dlbr.dk/DCFServices/InseminatorTourplanEntityService.svc">http://prod.dcf.ws.dlbr.dk/DCFServices/InseminatorTourplanEntityService.svc</a>
        </p>
        <p>
          <b>Accept test URL:</b>
          <a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/InseminatorTourplanEntityService.svc">http://accepttest.dcf.ws.dlbr.dk/DCFServices/InseminatorTourplanEntityService.svc</a>
        </p>
        <h1>Web Service Description</h1>
            The machine-readable description in the form of a WSDL document can be obtained by querying the following URI’s.
            <p><b>Production WSDL:</b><a href="http://prod.dcf.ws.dlbr.dk/DCFServices/InseminatorTourplanEntityService.svc?wsdl">http://prod.dcf.ws.dlbr.dk/DCFServices/InseminatorTourplanEntityService.svc?wsdl</a></p><p><b>Accept test WSDL:</b><a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/InseminatorTourplanEntityService.svc?wsdl">http://accepttest.dcf.ws.dlbr.dk/DCFServices/InseminatorTourplanEntityService.svc?wsdl</a></p><h1>Endpoints</h1>
            For information regarding endpoints, see topic 'Endpoints available in DCF Services'
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.InseminatorTourplanEntityService.GetInseminatorRoundEntityCollection(DLBR.DCF.KDB.DataContracts.InseminatorRoundCollection)">
      <summary>
            Method to translate a DataContracts.InseminatorRoundCollection to a collection of <see cref="T:DLBR.DCF.KDB.BusinessEntities.InseminatorRoundEntity" /></summary>
      <param name="inseminatorRoundCollection"></param>
      <returns> Null if <paramref name="inseminatorRoundCollection" /> is null or empty. Otherwise a collection of <see cref="T:DLBR.DCF.KDB.BusinessEntities.InseminatorRoundEntity" /> is returned. </returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.MatingSchemeEntityServiceBase">
      <summary>
            Service Class - MatingSchemeEntityService
            </summary>
      <tocexclude />
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.MatingSchemeEntityService">
      <summary>
        <h1>General</h1>
        <p>
            The following URIs specifies the location of the service in the production- and production test environment. 
            By default services in both the production and the production test environment uses the production data stores. The alternative URIs, which uses the test data stores (Medio), may be used for testing purposes.
            Please note that service versions might differ between the production- and production test environments. Before you begin using the service, please consult the person responsible as described in section 3.7 – Responsibility assignment.
            </p>
        <p>
          <b>Production URL:</b>
          <a href="http://prod.dcf.ws.dlbr.dk/DCFServices/MatingSchemeEntityService.svc">http://prod.dcf.ws.dlbr.dk/DCFServices/MatingSchemeEntityService.svc</a>
        </p>
        <p>
          <b>Accept test URL:</b>
          <a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/MatingSchemeEntityService.svc">http://accepttest.dcf.ws.dlbr.dk/DCFServices/MatingSchemeEntityService.svc</a>
        </p>
        <h1>Web Service Description</h1>
            The machine-readable description in the form of a WSDL document can be obtained by querying the following URI’s.
            <p><b>Production WSDL:</b><a href="http://prod.dcf.ws.dlbr.dk/DCFServices/MatingSchemeEntityService.svc?wsdl">http://prod.dcf.ws.dlbr.dk/DCFServices/MatingSchemeEntityService.svc?wsdl</a></p><p><b>Accept test WSDL:</b><a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/MatingSchemeEntityService.svc?wsdl">http://accepttest.dcf.ws.dlbr.dk/DCFServices/MatingSchemeEntityService.svc?wsdl</a></p><h1>Endpoints</h1>
            For information regarding endpoints, see topic 'Endpoints available in DCF Services'
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.MatingSchemeEntityService.GetMatingSchemeByAnimalNumber(DLBR.DCF.KDB.MessageContracts.GetMatingSchemeByAnimalNumberRequest)">
      <summary>
        <h1>Functional Description</h1>
            Gets an existing mating scheme for an animal.
            
            The mating scheme are not calculated on the fly. So depending on the time of the last calculation (“LastUpDate”) this operation returns a mating 
            scheme for the animal even if it has exited the herd after “LastUpdate” and it does not return a mating scheme for the animal if it has entered the 
            herd after the “LastUpdate”.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>HerdNumber</td><td>yes</td><td>&gt;0</td><td>The herd number for which the animal belongs to.</td></tr><tr><td>AnimalNumber</td><td>yes</td><td>&gt;0</td><td>The animal number for which to find mating scheme.</td></tr><tr><td>RequestedCount</td><td></td><td></td><td>If specified only the specified number of bull selections in the mating scheme are returned. The bull selections are sorted by number, highest priority first.
            If not specified all bull selections for the specified animal is returned.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>MatingScheme</td><td>The returned MatingScheme.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetMatingSchemeByAnimalNumberRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetMatingSchemeByAnimalNumberResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            MatingSchemeEntityServiceContractClient proxy = new MatingSchemeEntityServiceContractClient("MatingSchemeEntityService");

            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                MatingScheme result = proxy.GetMatingSchemeByAnimalNumber( m_cowAnimalNumber, m_herdNumber, null );

                Assert.IsNotNull( result );
            }
            catch( Exception ex )
            {
                Debug.WriteLine( ex.Message );
                throw;
            }
            finally
            {
                if( proxy.State != CommunicationState.Faulted )
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.MatingSchemeEntityService.FindMatingSchemesByHerdNumber(DLBR.DCF.KDB.MessageContracts.FindMatingSchemesByHerdNumberRequest)">
      <summary>
        <h1>Functional Description</h1>
            Finds existing mating schemes for animals in herd.
            
            The mating schemes are not calculated on the fly. So depending on the time of the last calculation (“LastUpDate”) this operation returns mating 
            schemes for animals that have exited the herd after “LastUpdate” and it does not return mating schemes for animals that have entered the herd 
            after the “LastUpdate”.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>HerdNumber</td><td>yes</td><td>&gt;0</td><td>The herd number for which to find mating schemes.</td></tr><tr><td>AnimalType</td><td>yes</td><td></td><td>The type of animal in the herd, e.g. cattle.</td></tr><tr><td>RequestedCount</td><td></td><td></td><td>If specified only the specified number of bull selections in the mating scheme are returned per animal. The bull selections are sorted by number, highest priority first.
            If not specified all bull selections per animal within the herd is returned.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>MatingSchemeCollection</td><td>A collection of MatingSchemes, The collection is empty if no entities where found.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindMatingSchemesByHerdNumberRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindMatingSchemesByHerdNumberResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            MatingSchemeEntityServiceContractClient proxy = new MatingSchemeEntityServiceContractClient("MatingSchemeEntityService");

            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                MatingSchemeCollection result = proxy.FindMatingSchemesByHerdNumber( m_animalType, m_herdNumber, null );

                Assert.IsNotNull( result );
            }
            catch( Exception ex )
            {
                Debug.WriteLine( ex.Message );
                throw;
            }
            finally
            {
                if( proxy.State != CommunicationState.Faulted )
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.MedicationEntityServiceBase">
      <summary>
            Service Class - MedicationEntityService
            </summary>
      <tocexclude />
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.MedicationEntityService">
      <summary>
        <h1>General</h1>
        <p>
            The following URIs specifies the location of the service in the production- and production test environment. 
            By default services in both the production and the production test environment uses the production data stores. The alternative URIs, which uses the test data stores (Medio), may be used for testing purposes.
            Please note that service versions might differ between the production- and production test environments. Before you begin using the service, please consult the person responsible as described in section 3.7 – Responsibility assignment.
            </p>
        <p>
          <b>Production URL:</b>
          <a href="http://prod.dcf.ws.dlbr.dk/DCFServices/MedicationEntityService.svc">http://prod.dcf.ws.dlbr.dk/DCFServices/MedicationEntityService.svc</a>
        </p>
        <p>
          <b>Accept test URL:</b>
          <a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/MedicationEntityService.svc">http://accepttest.dcf.ws.dlbr.dk/DCFServices/MedicationEntityService.svc</a>
        </p>
        <h1>Web Service Description</h1>
            The machine-readable description in the form of a WSDL document can be obtained by querying the following URI’s.
            <p><b>Production WSDL:</b><a href="http://prod.dcf.ws.dlbr.dk/DCFServices/MedicationEntityService.svc?wsdl">http://prod.dcf.ws.dlbr.dk/DCFServices/MedicationEntityService.svc?wsdl</a></p><p><b>Accept test WSDL:</b><a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/MedicationEntityService.svc?wsdl">http://accepttest.dcf.ws.dlbr.dk/DCFServices/MedicationEntityService.svc?wsdl</a></p><h1>Endpoints</h1>
            For information regarding endpoints, see topic 'Endpoints available in DCF Services'
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.MedicationEntityService.FindMedicationById(DLBR.DCF.KDB.MessageContracts.FindMedicationByIdRequest)">
      <summary>
        <h1>Functional Description</h1>
            Finds a number of Medications by the technical MedicationId.
            <h1>Notes</h1>
            Due to the present structure of medications in the datastorage this operation might return either a medication on animal level or on animal group level or both. 
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>MedicationId</td><td>yes</td><td>&gt;0</td><td>The id of the Medication to read.</td></tr><tr><td>HerdNumber</td><td>yes</td><td>&gt;0</td><td>The herd number to which the medication belongs.</td></tr><tr><td>AnimalType</td><td>yes</td><td></td><td>The type of animal the medication covers.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>MedicationCollection</td><td>A collection of the <see cref="T:DLBR.DCF.KDB.DataContracts.Medication" /> objects found.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindMedicationByIdRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindMedicationByIdResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            int MedicationId = 17249186; // Id of a animal level medication.

            MedicationEntityServiceContractClient proxy = new MedicationEntityServiceContractClient("MedicationEntityService");
            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID_FARMER;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD_FARMER;

                MedicationCollection result = proxy.FindMedicationById( new AnimalType() { Code = 12 }, TestUtil.HERD_NUMBER, MedicationId );

                Assert.IsNotNull( result );
            }
            catch( Exception ex )
            {
                Debug.WriteLine( ex.Message );
                throw;
            }
            finally
            {
                if( proxy.State != CommunicationState.Faulted )
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.MedicationEntityService.FindMedicationByAnimalNumber(DLBR.DCF.KDB.MessageContracts.FindMedicationByAnimalNumberRequest)">
      <summary>
        <h1>Functional Description</h1>
            Finds a number of Medications by animal number.
            <h1>Notes</h1>
            This operation only returns medications on animal level, meaning that the AnimalHealth property of the Medication is not null.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>AnimalNumber</td><td>yes</td><td>&gt;0</td><td>The animal number from which to find Medications.</td></tr><tr><td>Advisor</td><td>no</td><td></td><td>If specified the operation only returns Medications with the Advisor specified for each animal in the herd. 
            If not specified all Medications matching the other criteria’s is returned.</td></tr><tr><td>DiseaseType</td><td>no</td><td></td><td>If specified the operation only returns Medications with the DiseaseType specified. 
            If not specified all Medications matching the other criteria´s is returned.</td></tr><tr><td>FromDate</td><td>(yes)</td><td></td><td>If specified only Medications performed after the specified date is returned.
            If not specified all Medications matching the other criteria’s is returned.
            If this parameter is set also the “ToDate” must be set. </td></tr><tr><td>ToDate</td><td>(yes)</td><td></td><td>If specified only Medications performed before the specified date is returned.
            This parameter is required if “FromDate” is specified.
            If not specified all Medications matching the other criteria’s is returned for each animal.</td></tr><tr><td>DrugProductNumber</td><td>no</td><td>&gt;0</td><td>If specified the operation only returns Medications with the drug specified. 
            If not specified all Medications matching the other criteria´s is returned.</td></tr><tr><td>RequestedCount</td><td>no</td><td>&gt;0</td><td>If specified the operation only returns the specified number of Medications, sorted by date. 
            If not specified all Medications matching the other criteria’s is returned for each animal.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>MedicationCollection</td><td>A collection of the <see cref="T:DLBR.DCF.KDB.DataContracts.Medication" /> objects found.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindMedicationByAnimalNumberRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindMedicationByAnimalNumberResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            MedicationEntityServiceContractClient proxy = new MedicationEntityServiceContractClient("MedicationEntityService");

            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID_FARMER;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD_FARMER;

                MedicationCollection result = proxy.FindMedicationByAnimalNumber( null, m_cowAnimalNumberWithMedication, null, null, null, null, null );

                Assert.IsNotNull( result );
            }
            catch( Exception ex )
            {
                Debug.WriteLine( ex.Message );
                throw;
            }
            finally
            {
                if( proxy.State != CommunicationState.Faulted )
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.MedicationEntityService.FindMedicationByHerdNumber(DLBR.DCF.KDB.MessageContracts.FindMedicationByHerdNumberRequest)">
      <summary>
        <h1>Functional Description</h1>
            Finds a number of Medications by herd number. 
            <h1>Notes</h1>
            This operation returns medications on animal level and on animal group level, meaning that either the AnimalHealth or AnimalGroupHealth property of the Medication is not null.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>HerdNumber</td><td>yes</td><td>&gt;0</td><td>The herd number from which to find Medications.</td></tr><tr><td>AnimalType</td><td>yes</td><td></td><td>The type of animal, e.g. Cattle.</td></tr><tr><td>Advisor</td><td>no</td><td></td><td>If specified the operation only returns Medications with the Advisor specified. 
            If not specified all Medications matching the other criteria’s is returned for the herd specified.</td></tr><tr><td>DiseaseType</td><td>no</td><td></td><td>If specified the operation only returns Medications with the DiseaseType specified.
            If not specified all Medications matching the other criteria’s is returned for the herd specified.</td></tr><tr><td>FromDate</td><td>(yes)</td><td></td><td>If specified only Medications performed after the specified date is returned.
            If not specified all Medications matching the other criteria’s is returned for the herd specified.
            If this parameter is set also the “ToDate” must be set</td></tr><tr><td>ToDate</td><td>(yes)</td><td></td><td>If specified only Medications performed before the specified date is returned.
            This parameter is required if “FromDate” is specified.</td></tr><tr><td>DrugProductNumber</td><td>no</td><td>&gt;0</td><td>If specified the operation only returns Medications with the drug specified. 
            If not specified all Medications matching the other criteria´s is returned for the herd specified.</td></tr><tr><td>RequestedCount</td><td>no</td><td>&gt;0</td><td>If specified the operation only returns the specified number of Medications, sorted by date. 
            If not specified all Medications matching the other criteria’s is returned for the herd specified.</td></tr><tr><td>LastUpdate</td><td>no</td><td></td><td>Returns all medication updated after LastUpdate</td></tr><tr><td>ActiveOSR</td><td>no</td><td></td><td>If true only medications from the current active OSR are returned</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>MedicationCollection</td><td>A collection of the <see cref="T:DLBR.DCF.KDB.DataContracts.Medication" /> objects found.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindMedicationByHerdNumberRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindMedicationByHerdNumberResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            MedicationEntityServiceContractClient proxy = new MedicationEntityServiceContractClient("MedicationEntityService");
            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID_FARMER;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD_FARMER;

                AnimalType animalType = new AnimalType() { Code = 12 };

                MedicationCollection result = proxy.FindMedicationByHerdNumber( null, null, animalType, null, null, null, TestUtil.HERD_NUMBER, null, null, null );

                Assert.IsNotNull( result );
            }
            catch( Exception ex )
            {
                Debug.WriteLine( ex.Message );
                throw;
            }
            finally
            {
                if( proxy.State != CommunicationState.Faulted )
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.MedicationEntityService.RegisterMedication(DLBR.DCF.KDB.MessageContracts.RegisterMedicationRequest)">
      <summary>
        <h1>Functional Description</h1>
            Registers a new Medication.
            <h1>Notes</h1>
            This operation supports registration of a medication either on animal level or animal group level (herd level). 
            The AnimalHealth entity  must be supplied if the medication is related to an animal. Use the AnimalHealthEntityService to get an existing AnimalHealth or to register a new AnimalHealth that the medication should relate to.
            The AnimalGroupHealth entity must be supplied if the medication is related to an animalGroup.
            The advisor responsible of the medication is supplied by either the AnimalHealth or the AnimalGroupHealth object. 
            The operation is restricted by the following authorization policies:
            Registering medication on animal group level is only possible if the user is a veterinian.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>AnimalHealth</td><td>(yes)</td><td></td><td>An exisiting <see cref="T:DLBR.DCF.KDB.DataContracts.AnimalHealth" /> that describes the animal and the illness  the medication is related to. If set then AnimalGroupHealth must be null.</td></tr><tr><td>AnimalGroupHealth</td><td>(yes)</td><td></td><td>The animal group and the illness the medication is related to. If set then AnimalHealth must be null.<see cref="T:DLBR.DCF.KDB.DataContracts.AnimalGroupHealth" /></td></tr><tr><td>DrugUsage</td><td>yes</td><td></td><td>The type of usage, e.g. 1 for “Spent”<see cref="T:DLBR.DCF.KDB.DataContracts.DrugUsage" /></td></tr><tr><td>DrugProductNumber</td><td>yes</td><td></td><td>The product number of the drug the medication covers.</td></tr><tr><td>Dosage</td><td>yes</td><td>&gt;0</td><td>The amount of the drug the medication covers.</td></tr><tr><td>DrugUnit</td><td>yes</td><td>&gt;0</td><td>The unit of the dosage value.<see cref="T:DLBR.DCF.KDB.DataContracts.DrugUnit" /></td></tr><tr><td>DrugDispensing</td><td>no</td><td>between 0 and 99</td><td>The number of days the medication covers. Set this value to null if it is higher than 99</td></tr><tr><td>PrescriptionGroup</td><td>no</td><td></td><td>The type og prescription group the medication relates to.<see cref="T:DLBR.DCF.KDB.DataContracts.PrescriptionGroup" /></td></tr><tr><td>MeatRetention</td><td>no</td><td>&gt;0</td><td>The meat retention value.</td></tr><tr><td>MeatRetentionUnit</td><td>no</td><td></td><td>The unit of the meat retention value, e.g. “Number of days”<see cref="T:DLBR.DCF.KDB.DataContracts.MeatRetentionUnit" /></td></tr><tr><td>MilkRetention</td><td>no</td><td>&gt;0</td><td>The milk retention value.</td></tr><tr><td>MilkRetentionUnit</td><td>no</td><td></td><td>The unit of the milk retention value, e.g. “Number of days”<see cref="T:DLBR.DCF.KDB.DataContracts.MilkRetentionUnit"></see></td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>Medication</td><td>The newly registered <see cref="T:DLBR.DCF.KDB.DataContracts.Medication" /> entity.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.RegisterMedicationRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.RegisterMedicationResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            MedicationEntityServiceContractClient proxy = new MedicationEntityServiceContractClient("MedicationEntityService");
            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID_FARMER;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD_FARMER;

                //Get an existing AnimalHealth
                IntegrationTests.MedicationEntityService.AnimalHealth animalHealth = GetAnimalHealth();

                float dosage = 4.5f;
                DrugUnit drugUnit = new DrugUnit() { Code = 4 };
                DrugUsage drugUsage = new DrugUsage() { Code = 1 };

                //Register
                Medication medication = proxy.RegisterMedication(
                    null,
                    animalHealth,
                    dosage,
                    null, m_DrugProductNumber,
                    drugUnit,
                    drugUsage,
                    null, null, null, null, null );

                Assert.IsNotNull( medication );

                //Update
                float updatedDosage = 5.5f;
                medication.Dosage = updatedDosage;

                proxy.UpdateMedication( ref medication );

                Assert.IsNotNull( medication );
                Assert.AreEqual( updatedDosage, medication.Dosage );

                //Delete
                proxy.DeleteMedication( medication );

            }
            catch( FaultException&lt;InvalidArgument&gt; ex )
            {
                Debug.WriteLine( ex.Message, "MedicationEntityServiceTest.TestCRUD_1" );
                throw;
            }
            catch( Exception ex )
            {
                Debug.WriteLine( ex.Message );
                throw;
            }
            finally
            {
                if( proxy.State != CommunicationState.Faulted )
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.MedicationEntityService.UpdateMedication(DLBR.DCF.KDB.MessageContracts.UpdateMedicationRequest)">
      <summary>
        <h1>Functional Description</h1>
            Updates an existing Medication.
            <h1>Notes</h1>
            If the medication is on animal group level the AnimalGroupHealth entity is also updated.
            If the medication is on animal level the AnimalHealth entity is not updated. The AnimalHealthEntityService should be used  to do this.
            The operation is restricted by the following authorization policies:
            Updating a medication on animal group level is only possible if the user is a veterinian.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>Medication</td><td>yes</td><td></td><td>The <see cref="T:DLBR.DCF.KDB.DataContracts.Medication" /> entity to update.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>Medication</td><td>The newly updated <see cref="T:DLBR.DCF.KDB.DataContracts.Medication" /> entity.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.UpdateMedicationRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.UpdateMedicationResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            MedicationEntityServiceContractClient proxy = new MedicationEntityServiceContractClient("MedicationEntityService");
            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID_FARMER;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD_FARMER;

                //Get an existing AnimalHealth
                IntegrationTests.MedicationEntityService.AnimalHealth animalHealth = GetAnimalHealth();

                float dosage = 4.5f;
                DrugUnit drugUnit = new DrugUnit() { Code = 4 };
                DrugUsage drugUsage = new DrugUsage() { Code = 1 };

                //Register
                Medication medication = proxy.RegisterMedication(
                    null,
                    animalHealth,
                    dosage,
                    null, m_DrugProductNumber,
                    drugUnit,
                    drugUsage,
                    null, null, null, null, null );

                Assert.IsNotNull( medication );

                //Update
                float updatedDosage = 5.5f;
                medication.Dosage = updatedDosage;

                proxy.UpdateMedication( ref medication );

                Assert.IsNotNull( medication );
                Assert.AreEqual( updatedDosage, medication.Dosage );

                //Delete
                proxy.DeleteMedication( medication );

            }
            catch( FaultException&lt;InvalidArgument&gt; ex )
            {
                Debug.WriteLine( ex.Message, "MedicationEntityServiceTest.TestCRUD_1" );
                throw;
            }
            catch( Exception ex )
            {
                Debug.WriteLine( ex.Message );
                throw;
            }
            finally
            {
                if( proxy.State != CommunicationState.Faulted )
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.MedicationEntityService.DeleteMedication(DLBR.DCF.KDB.MessageContracts.DeleteMedicationRequest)">
      <summary>
        <h1>Functional Description</h1>
            Deletes an existing Medication.
            <h1>Notes</h1>
            If the medication is on animal group level the AnimalGroupHealth entity is also deleted.
            If the medication is on animal level the AnimalHealth entity is not deleted. The AnimalHealthEntityService should be used  to do this.
            The operation is restricted by the following authorization policies:
            Deleting a medication on animal group level is only possible if the user is a veterinian.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>Medication</td><td>yes</td><td></td><td>The <see cref="T:DLBR.DCF.KDB.DataContracts.Medication" /> entity to delete.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.DeleteMedicationRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.DeleteMedicationResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            MedicationEntityServiceContractClient proxy = new MedicationEntityServiceContractClient("MedicationEntityService");
            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID_FARMER;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD_FARMER;

                //Get an existing AnimalHealth
                IntegrationTests.MedicationEntityService.AnimalHealth animalHealth = GetAnimalHealth();

                float dosage = 4.5f;
                DrugUnit drugUnit = new DrugUnit() { Code = 4 };
                DrugUsage drugUsage = new DrugUsage() { Code = 1 };

                //Register
                Medication medication = proxy.RegisterMedication(
                    null,
                    animalHealth,
                    dosage,
                    null, m_DrugProductNumber,
                    drugUnit,
                    drugUsage,
                    null, null, null, null, null );

                Assert.IsNotNull( medication );

                //Update
                float updatedDosage = 5.5f;
                medication.Dosage = updatedDosage;

                proxy.UpdateMedication( ref medication );

                Assert.IsNotNull( medication );
                Assert.AreEqual( updatedDosage, medication.Dosage );

                //Delete
                proxy.DeleteMedication( medication );

            }
            catch( FaultException&lt;InvalidArgument&gt; ex )
            {
                Debug.WriteLine( ex.Message, "MedicationEntityServiceTest.TestCRUD_1" );
                throw;
            }
            catch( Exception ex )
            {
                Debug.WriteLine( ex.Message );
                throw;
            }
            finally
            {
                if( proxy.State != CommunicationState.Faulted )
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.NordicClassificationServiceBase">
      <summary>
            Service Class - NordicClassificationService
            </summary>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.NordicClassificationService">
      <summary>
        <h1>General</h1>
        <p>
            The following URIs specifies the location of the service in the production- and production test environment. 
            By default services in both the production and the production test environment uses the production data stores. The alternative URIs, which uses the test data stores (Medio), may be used for testing purposes.
            Please note that service versions might differ between the production- and production test environments. Before you begin using the service, please consult the person responsible as described in section 3.7 – Responsibility assignment.
            </p>
        <p>
          <b>Production URL:</b>
          <a href="http://prod.dcf.ws.dlbr.dk/DCFServices/NordicClassificationService.svc">http://prod.dcf.ws.dlbr.dk/DCFServices/NordicClassificationService.svc</a>
        </p>
        <p>
          <b>Accept test URL:</b>
          <a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/NordicClassificationService.svc">http://accepttest.dcf.ws.dlbr.dk/DCFServices/NordicClassificationService.svc</a>
        </p>
        <h1>Web Service Description</h1>
            The machine-readable description in the form of a WSDL document can be obtained by querying the following URI’s.
            <p><b>Production WSDL:</b><a href="http://prod.dcf.ws.dlbr.dk/DCFServices/NordicClassificationService.svc?wsdl">http://prod.dcf.ws.dlbr.dk/DCFServices/NordicClassificationService.svc?wsdl</a></p><p><b>Accept test WSDL:</b><a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/NordicClassificationService.svc?wsdl">http://accepttest.dcf.ws.dlbr.dk/DCFServices/NordicClassificationService.svc?wsdl</a></p><h1>Endpoints</h1>
            For information regarding endpoints, see topic 'Endpoints available in DCF Services'
            </summary>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.PostingEntityServiceBase">
      <summary>
            Service Class - PostingEntityService
            </summary>
      <tocexclude />
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.PostingEntityService">
      <summary>
        <h1>General</h1>
        <p>
            The following URIs specifies the location of the service in the production- and production test environment. 
            By default services in both the production and the production test environment uses the production data stores. The alternative URIs, which uses the test data stores (Medio), may be used for testing purposes.
            Please note that service versions might differ between the production- and production test environments. Before you begin using the service, please consult the person responsible as described in section 3.7 – Responsibility assignment.
            </p>
        <p>
          <b>Production URL:</b>
          <a href="http://prod.dcf.ws.dlbr.dk/DCFServices/PostingEntityService.svc">http://prod.dcf.ws.dlbr.dk/DCFServices/PostingEntityService.svc</a>
        </p>
        <p>
          <b>Accept test URL:</b>
          <a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/PostingEntityService.svc">http://accepttest.dcf.ws.dlbr.dk/DCFServices/PostingEntityService.svc</a>
        </p>
        <h1>Web Service Description</h1>
            The machine-readable description in the form of a WSDL document can be obtained by querying the following URI’s.
            <p><b>Production WSDL:</b><a href="http://prod.dcf.ws.dlbr.dk/DCFServices/PostingEntityService.svc?wsdl">http://prod.dcf.ws.dlbr.dk/DCFServices/PostingEntityService.svc?wsdl</a></p><p><b>Accept test WSDL:</b><a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/PostingEntityService.svc?wsdl">http://accepttest.dcf.ws.dlbr.dk/DCFServices/PostingEntityService.svc?wsdl</a></p><h1>Endpoints</h1>
            For information regarding endpoints, see topic 'Endpoints available in DCF Services'
            </summary>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.ReportFileEntityServiceBase">
      <summary>
            Service Class - ReportFileEntityService
            </summary>
      <tocexclude />
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.ReportFileEntityService">
      <summary>
        <h1>General</h1>
        <p>
            The following URIs specifies the location of the service in the production- and production test environment. 
            By default services in both the production and the production test environment uses the production data stores. The alternative URIs, which uses the test data stores (Medio), may be used for testing purposes.
            Please note that service versions might differ between the production- and production test environments. Before you begin using the service, please consult the person responsible as described in section 3.7 – Responsibility assignment.
            </p>
        <p>
          <b>Production URL:</b>
          <a href="http://prod.dcf.ws.dlbr.dk/DCFServices/ReportFileEntityService.svc">http://prod.dcf.ws.dlbr.dk/DCFServices/ReportFileEntityService.svc</a>
        </p>
        <p>
          <b>Accept test URL:</b>
          <a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/ReportFileEntityService.svc">http://accepttest.dcf.ws.dlbr.dk/DCFServices/ReportFileEntityService.svc</a>
        </p>
        <h1>Web Service Description</h1>
            The machine-readable description in the form of a WSDL document can be obtained by querying the following URI’s.
            <p><b>Production WSDL:</b><a href="http://prod.dcf.ws.dlbr.dk/DCFServices/ReportFileEntityService.svc?wsdl">http://prod.dcf.ws.dlbr.dk/DCFServices/ReportFileEntityService.svc?wsdl</a></p><p><b>Accept test WSDL:</b><a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/ReportFileEntityService.svc?wsdl">http://accepttest.dcf.ws.dlbr.dk/DCFServices/ReportFileEntityService.svc?wsdl</a></p><h1>Endpoints</h1>
            For information regarding endpoints, see topic 'Endpoints available in DCF Services'
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.ReportFileEntityService.GenerateReportFile(DLBR.DCF.KDB.MessageContracts.GenerateReportFileRequest)">
      <summary>
        <h1>Functional Description</h1>
            Generates the report file from an existing report file definition.
            The generation of the report file is done asynchronously, so this operation returns after the generation of the specified report file is launched. The report file can be read as a byte array via the GetReportFile operation. The report file can also be displayed in a web browser with the appropriate browser plug-in installed via the operation GetReportFileLink.   
            <h1>Notes</h1>
            Available report file definitions can be read via the operation FindReportFileDefinitions. 
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>ReportFileDefinition</td><td>yes</td><td></td><td>The definition of the report file to generate.</td></tr><tr><td>HerdNumber</td><td>yes</td><td>&gt;0</td><td>A herd number specifying which herd to generate the report file for.</td></tr><tr><td>AnimalType</td><td></td><td>&gt;0</td><td>The type of animals in the herd, e.g. Cattle.</td></tr><tr><td>FromDate</td><td></td><td>&gt;0</td><td>From date to generate the report file for. Required for some reports.</td></tr><tr><td>ToDate</td><td></td><td>&gt;0</td><td>To date to generate the report file for. Required for some reports.</td></tr><tr><td>AnimalNumber</td><td></td><td>&gt;0</td><td>Animal number to generate the report file for. Required for some reports.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>ReportFileOrderId</td><td>Id of the report  file order. To be used in subsequent request for status, link or the actual report  file.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GenerateReportFileRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GenerateReportFileResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            ReportFileEntityServiceContractClient client = new ReportFileEntityServiceContractClient("ReportFileEntityService");

            try
            {
                client.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                client.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                // Classifications
                AnimalType animalType = new AnimalType { Code = 12 };
                HerdType herdType = new HerdType() { Code = 2 };

                //Get report file def.
                var result = client.FindReportFileDefinitions(animalType, herdType);

                Assert.IsNotNull(result);

                var reportFileDefinition = result.First(s =&gt; s.Id.Equals(15834));

                Assert.IsNotNull(reportFileDefinition);

                //Generate report file.
                var reportFileOrderId = client.GenerateReportFile(null, animalType, DateTime.Today.AddMonths(-2), 904049, reportFileDefinition, null);

                Assert.IsTrue(reportFileOrderId &gt; 0);
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message, "Exception");
                throw;
            }
            finally
            {
                if (client.State != CommunicationState.Faulted)
                {
                    client.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.ReportFileEntityService.GetReportFileStatus(DLBR.DCF.KDB.MessageContracts.GetReportFileStatusRequest)">
      <summary>
        <h1>Functional Description</h1>
            Gets the status of the generation of the report file of the specified order id.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>ReportFileOrderId</td><td>yes</td><td>&gt;0</td><td>Id of the report  file order. </td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>ReportFileStatus</td><td>An enum representing the status of the report file generation.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetReportFileStatusRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetReportFileStatusResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            ReportFileEntityServiceContractClient client = new ReportFileEntityServiceContractClient("ReportFileEntityService");

            try
            {
                client.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                client.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                //Get report file status.
                var reportFileStatus = client.GetReportFileStatus( m_ReportFileOrderId );

                Assert.IsNotNull( reportFileStatus );
                Assert.AreEqual( ReportFileStatusEnum.Completed, reportFileStatus.ReportFileStatusEnum );
            }
            catch( Exception ex )
            {
                Debug.WriteLine( ex.Message, "Exception" );
                throw;
            }
            finally
            {
                if( client.State != CommunicationState.Faulted )
                {
                    client.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.ReportFileEntityService.GetReportFileLink(DLBR.DCF.KDB.MessageContracts.GetReportFileLinkRequest)">
      <summary>
        <h1>Functional Description</h1>
            Gets a link (URI) to an asp.net handler that will return the report file of the specified order id as a HTTP response.
            Suitable for web clients where native file reader controls, e.g. pdf reader is not available. The returned link can be used to open a new instance of a web browser window, the report file will be displayed in the browser if required plug-in, e.g. Acrobat Reader is installed.
            <h1>Notes</h1>
            The returned link expires after 60 minutes.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>ReportFileOrderId</td><td>yes</td><td>&gt;0</td><td>Id of the report  file order. </td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>ReportFileLink</td><td>An URI to an asp.net handler returning the report file for the specified order id.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetReportFileLinkRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetReportFileLinkResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            ReportFileEntityServiceContractClient client = new ReportFileEntityServiceContractClient("ReportFileEntityService");

            try
            {
                client.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                client.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                //Get report file status.
                var reportFileStatus = client.GetReportFileStatus( m_ReportFileOrderId );

                Assert.IsNotNull( reportFileStatus );
                Assert.AreEqual( ReportFileStatusEnum.Completed, reportFileStatus.ReportFileStatusEnum );
            }
            catch( Exception ex )
            {
                Debug.WriteLine( ex.Message, "Exception" );
                throw;
            }
            finally
            {
                if( client.State != CommunicationState.Faulted )
                {
                    client.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.ReportFileEntityService.GetReportFile(DLBR.DCF.KDB.MessageContracts.GetReportFileRequest)">
      <summary>
        <h1>Functional Description</h1>
            Gets a ReportFile entity by the order id of the report. 
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>ReportFileOrderId</td><td>yes</td><td>&gt;0</td><td>Id of the report  file order. </td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>ReportFile</td><td>A <see cref="T:DLBR.DCF.KDB.DataContracts.ReportFile" />object describing the report file with a property containing the bytes the report file consists of.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetReportFileRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetReportFileResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            ReportFileEntityServiceContractClient client = new ReportFileEntityServiceContractClient("ReportFileEntityService");

            try
            {
                client.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                client.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                //Get report file status.
                var reportFile = client.GetReportFile( m_ReportFileOrderId );

                Assert.IsNotNull( reportFile );
                Assert.IsTrue( reportFile.Bytes.Length &gt; 0 );
                Assert.AreEqual( ReportFileTypeEnum.Pdf, reportFile.ReportFileTypeEnum );
            }
            catch( Exception ex )
            {
                Debug.WriteLine( ex.Message, "Exception" );
                throw;
            }
            finally
            {
                if( client.State != CommunicationState.Faulted )
                {
                    client.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.ReportFileEntityService.FindReportFileDefinitions(DLBR.DCF.KDB.MessageContracts.FindReportFileDefinitionsRequest)">
      <summary>
        <h1>Functional Description</h1>
            Find available report files to order.
            <h1>Notes</h1>
            At present time the output of this operation is restricted to the report files required by the Webdyr application.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>HerdType</td><td></td><td>Code&gt;0</td><td>The type of herd, e.g. 1 for milk recordings.</td></tr><tr><td>AnimalType</td><td></td><td>Code&gt;0</td><td>The type of animals in the herd, e.g. Cattle.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>ReportFileDefinitions</td><td>A collection of <see cref="T:DLBR.DCF.KDB.DataContracts.ReportFileDefinition" /> objects</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindReportFileDefinitionsRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindReportFileDefinitionsResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            ReportFileEntityServiceContractClient client = new ReportFileEntityServiceContractClient("ReportFileEntityService_Federation_Adfs");

            try
            {
                client.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                client.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                // Classifications
                AnimalType animalType = new AnimalType { Code = 12 };
                HerdType herdType = new HerdType() { Code = 1 };

                //Get results
                var result = client.FindReportFileDefinitions(animalType, herdType);

                Assert.IsNotNull(result);
                Assert.AreEqual(4, result.Count);
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message, "Exception");
                throw;
            }
            finally
            {
                if (client.State != CommunicationState.Faulted)
                {
                    client.Close();
                }
            }
</code></example>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.SecurityServiceBase">
      <summary>
            Service Class - SecurityService
            </summary>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.SecurityService">
      <summary>
        <h1>General</h1>
        <p>
            The following URIs specifies the location of the service in the production- and production test environment. 
            By default services in both the production and the production test environment uses the production data stores. The alternative URIs, which uses the test data stores (Medio), may be used for testing purposes.
            Please note that service versions might differ between the production- and production test environments. Before you begin using the service, please consult the person responsible as described in section 3.7 – Responsibility assignment.
            </p>
        <p>
          <b>Production URL:</b>
          <a href="http://prod.dcf.ws.dlbr.dk/DCFServices/SecurityService.svc">http://prod.dcf.ws.dlbr.dk/DCFServices/SecurityService.svc</a>
        </p>
        <p>
          <b>Accept test URL:</b>
          <a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/SecurityService.svc">http://accepttest.dcf.ws.dlbr.dk/DCFServices/SecurityService.svc</a>
        </p>
        <h1>Web Service Description</h1>
            The machine-readable description in the form of a WSDL document can be obtained by querying the following URI’s.
            <p><b>Production WSDL:</b><a href="http://prod.dcf.ws.dlbr.dk/DCFServices/SecurityService.svc?wsdl">http://prod.dcf.ws.dlbr.dk/DCFServices/SecurityService.svc?wsdl</a></p><p><b>Accept test WSDL:</b><a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/SecurityService.svc?wsdl">http://accepttest.dcf.ws.dlbr.dk/DCFServices/SecurityService.svc?wsdl</a></p><h1>Endpoints</h1>
            For information regarding endpoints, see topic 'Endpoints available in DCF Services'
            </summary>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.SireEntityServiceBase">
      <summary>
            Service Class - SireEntityService
            </summary>
      <tocexclude />
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.SireEntityService">
      <summary>
        <h1>General</h1>
        <p>
            The following URIs specifies the location of the service in the production- and production test environment. 
            By default services in both the production and the production test environment uses the production data stores. The alternative URIs, which uses the test data stores (Medio), may be used for testing purposes.
            Please note that service versions might differ between the production- and production test environments. Before you begin using the service, please consult the person responsible as described in section 3.7 – Responsibility assignment.
            </p>
        <p>
          <b>Production URL:</b>
          <a href="http://prod.dcf.ws.dlbr.dk/DCFServices/SireEntityService.svc">http://prod.dcf.ws.dlbr.dk/DCFServices/SireEntityService.svc</a>
        </p>
        <p>
          <b>Accept test URL:</b>
          <a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/SireEntityService.svc">http://accepttest.dcf.ws.dlbr.dk/DCFServices/SireEntityService.svc</a>
        </p>
        <h1>Web Service Description</h1>
            The machine-readable description in the form of a WSDL document can be obtained by querying the following URI’s.
            <p><b>Production WSDL:</b><a href="http://prod.dcf.ws.dlbr.dk/DCFServices/SireEntityService.svc?wsdl">http://prod.dcf.ws.dlbr.dk/DCFServices/SireEntityService.svc?wsdl</a></p><p><b>Accept test WSDL:</b><a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/SireEntityService.svc?wsdl">http://accepttest.dcf.ws.dlbr.dk/DCFServices/SireEntityService.svc?wsdl</a></p><h1>Endpoints</h1>
            For information regarding endpoints, see topic 'Endpoints available in DCF Services'
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.SireEntityService.GetSireByHerdBookNumber(DLBR.DCF.KDB.MessageContracts.GetSireByHerdBookNumberRequest)">
      <summary>
        <h1>Functional Description</h1>
            Gets a single sire by a herd book number.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>HerdBookNumber</td><td>yes</td><td>&gt; 0</td><td>The herd book number of the sire to read.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>Sire</td><td>The <see cref="T:DLBR.DCF.KDB.DataContracts.Sire" /> found by the specified herd book number. If a sire cannot be found with the specified herd book number, the return value is null.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetSireByHerdBookNumberRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetSireByHerdBookNumberResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            SireEntityServiceContractClient client = new SireEntityServiceContractClient("SireEntityService_Federation_Adfs");

            try
            {
                const long herdBookNumber = 301592; // Q IMPULS
                const bool isStationBull = true;

                client.ClientCredentials.UserName.UserName = TestUtil.USER_ID_INSEMINATOR;
                client.ClientCredentials.UserName.Password = TestUtil.PASSWORD_INSEMINATOR;

                Sire sire = client.GetSireByHerdBookNumber(herdBookNumber);

                Assert.IsNotNull(sire);
                Assert.AreEqual(herdBookNumber, sire.HerdBookNumber);
                Assert.AreEqual(isStationBull, sire.IsStationBull);
                Assert.IsTrue(sire.InseminationProducts.Count &gt; 0);
                Assert.AreEqual(10, sire.InseminationProducts[0].Code);
                Assert.AreEqual(20, sire.InseminationProducts[1].Code);
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
                throw;
            }
            finally
            {
                if (client.State != CommunicationState.Faulted)
                {
                    client.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.SireEntityService.FindSiresByName(DLBR.DCF.KDB.MessageContracts.FindSiresByNameRequest)">
      <summary>
        <h1>Functional Description</h1>
            Finds all sires matching the specified, possibly partial, name. Furthermore it is possible to specify if it is all bulls, "station bulls", or "not station bulls" wanted.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>SireName</td><td>yes</td><td>Not empty</td><td>The, possible partial, name of the sires to find. If the name of a sire contains the specified SireName as a substring, the sire is included in the result. The SireName is case insensitive.</td></tr><tr><td>StationBull</td><td></td><td></td><td>Flag, indicating if the bull's wanted is station bulls or not. If null is provided, both station bulls and "not station bulls" is returned.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>SireCollection</td><td>All <see cref="T:DLBR.DCF.KDB.DataContracts.Sire" /> objects that matched the specified SireName are returned. If no sires are found, an empty collection is returnes.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindSiresByNameRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindSiresByNameResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            SireEntityServiceContractClient client = new SireEntityServiceContractClient("SireEntityService");

            try
            {
                const string sireName = "RGK Don";

                client.ClientCredentials.UserName.UserName = TestUtil.USER_ID_INSEMINATOR;
                client.ClientCredentials.UserName.Password = TestUtil.PASSWORD_INSEMINATOR;

                SireCollection sireCollection = client.FindSiresByName( sireName, null );

                Assert.IsNotNull( sireCollection );
                Assert.IsTrue( sireCollection.Count &gt; 0 );

                // Check that all returned sires has the sireName as a substring in their name
                var result = from sire in sireCollection
                             where ( sire.Name.IndexOf( sireName, StringComparison.OrdinalIgnoreCase ) &lt; 0 )
                             select sire;

                Assert.AreEqual( 0, result.Count() );
            }
            catch( Exception ex )
            {
                Debug.WriteLine( ex.Message );
                throw;
            }
            finally
            {
                if( client.State != CommunicationState.Faulted )
                {
                    client.Close();
                }
            }
</code></example>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateAnimalWeight">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.AnimalWeight" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.AnimalWeightEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateAnimalWeight.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.AnimalWeight)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.AnimalWeight" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.AnimalWeightEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateAnimalWeight.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.AnimalWeightEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.AnimalWeightEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.AnimalWeight" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateInseminatorTimeRecordPart">
      <summary>
            Responsible for translating between the data contact <see cref="T:DLBR.DCF.KDB.DataContracts.InseminatorTimeRecordPart" />
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.InseminatorTimeRecordPartEntity" /></summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateInseminatorTimeRecordPart.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.InseminatorTimeRecordPart)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.InseminatorTimeRecordPart" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.InseminatorTimeRecordPartEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateInseminatorTimeRecordPart.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.Classifications.InseminatorTimeRecordPartEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.InseminatorTimeRecordPartEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.InseminatorTimeRecordPart" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateManagementUnitType">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.ManagementUnitType" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.ManagementUnitTypeEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateManagementUnitType.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.ManagementUnitType)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.ManagementUnitType" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.ManagementUnitTypeEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateManagementUnitType.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.Classifications.ManagementUnitTypeEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.ManagementUnitTypeEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.ManagementUnitType" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslatePostingType">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.PostingType" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.PostingTypeEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslatePostingType.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.PostingType)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.PostingType" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.PostingTypeEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslatePostingType.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.Classifications.PostingTypeEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.PostingTypeEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.PostingType" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateProductionType">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.ProductionType" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.ProductionTypeEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateProductionType.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.ProductionType)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.ProductionType" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.ProductionTypeEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateProductionType.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.Classifications.ProductionTypeEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.ProductionTypeEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.ProductionType" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateAddressPostal">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.AddressPostal" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.AddressPostalEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateAddressPostal.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.AddressPostalEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.AddressPostalEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.AddressPostal" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateAddressPostal.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.AddressPostal)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.AddressPostal" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.AddressPostalEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateAgriBusiness">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.AgriBusiness" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.AgriBusinessEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateAgriBusiness.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.AgriBusiness)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.AgriBusiness" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.AgriBusinessEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateAgriBusiness.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.AgriBusinessEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.AgriBusinessEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.AgriBusiness" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateAgriBusinessHerd">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.AgriBusinessHerd" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.AgriBusinessHerdBaseEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateAgriBusinessHerd.TranslateDataContractToEntity``1(DLBR.DCF.KDB.DataContracts.AgriBusinessHerd)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.AgriBusinessHerd" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.AgriBusinessHerdBaseEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateAgriBusinessHerd.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.AgriBusinessHerdBaseEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.AgriBusinessHerdBaseEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.AgriBusinessHerd" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateAgriBusinessManagementUnit">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.AgriBusinessManagementUnit" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.GeneratedCode.DataEntities.AgriBusinessManagementUnitEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateAgriBusinessManagementUnit.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.GeneratedCode.DataEntities.AgriBusinessManagementUnitEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.GeneratedCode.DataEntities.AgriBusinessManagementUnitEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.AgriBusinessManagementUnit" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateAnimalEventLogItem">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.AnimalEventLogItem" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.AnimalEventLogItemEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateAnimalEventLogItem.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.AnimalEventLogItemEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.AnimalEventLogItemEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.AnimalEventLogItem" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateAnimalEventLogItem.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.AnimalEventLogItem)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.AnimalEventLogItem" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.AnimalEventLogItemEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateAnimalEventLogDetailItem">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.AnimalEventLogDetailItem" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.AnimalEventLogDetailItemEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateAnimalEventLogDetailItem.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.AnimalEventLogDetailItemEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.AnimalEventLogDetailItemEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.AnimalEventLogDetailItem" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateAnimalEventLogDetailItem.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.AnimalEventLogDetailItem)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.AnimalEventLogDetailItem" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.AnimalEventLogDetailItemEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateAnimalFoodTagData">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.AnimalFoodTagData" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.GeneratedCode.DataEntities.AnimalFoodTagDataEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateAnimalFoodTagData.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.AnimalFoodTagData)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.AnimalFoodTagData" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.GeneratedCode.DataEntities.AnimalFoodTagDataEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateAnimalFoodTagData.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.GeneratedCode.DataEntities.AnimalFoodTagDataEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.GeneratedCode.DataEntities.AnimalFoodTagDataEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.AnimalFoodTagData" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateAnimalGroupTransfer.GetDirectionByCode(System.Nullable{System.Int32})">
      <summary>
            Convert a DirectionCode to its equivalent Direction enumeration.
            </summary>
      <param name="code"></param>
      <returns></returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateAnimalGroupTransfer.GetCodeFromDirection(DLBR.DCF.KDB.DataContracts.Direction)">
      <summary>
            Convert a Direction enummeration to its equivalent nullable int.
            </summary>
      <param name="direction"></param>
      <returns></returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateAnimalEventLogType">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.AnimalEventLogType" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.Enums.AnimalEventLogTypeEnum" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateAnimalEventLogType.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.AnimalEventLogType)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.AnimalEventLogType" /> to translate.</param>
      <returns>An enum  <see cref="T:DLBR.DCF.KDB.BusinessEntities.Enums.AnimalEventLogTypeEnum" />. If <paramref name="from" /> is null, this method returns AnimalEventLogTypeEnum.Unknown.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateAnimalEventLogType.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.Enums.AnimalEventLogTypeEnum)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.Enums.AnimalEventLogTypeEnum" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.AnimalEventLogType" />. If <paramref name="from" /> is Unknown or NoDetailsAvailable, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateCprInfo">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.CprInfo" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.CprInfoEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateCprInfo.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.CprInfoEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.CprInfoEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.CprInfo" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateCprInfo.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.CprInfo)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.CprInfo" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.CprInfoEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateCvrInfo">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.CvrInfo" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.CvrInfoEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateCvrInfo.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.CvrInfoEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.CvrInfoEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.CvrInfo" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateCvrInfo.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.CvrInfo)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.CvrInfo" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.CvrInfoEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateFoodTagInformation">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.FoodTagInformation" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.GeneratedCode.DataEntities.FoodTagInformationEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateFoodTagInformation.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.GeneratedCode.DataEntities.FoodTagInformationEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.GeneratedCode.DataEntities.FoodTagInformationEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.FoodTagInformation" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateGenetics">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.Genetic" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.GeneticsEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateGenetics.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.GeneticsEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.GeneticsEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.Genetic" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateHerdFoodTagData">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.HerdFoodTagData" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.GeneratedCode.DataEntities.HerdFoodTagDataEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateHerdFoodTagData.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.HerdFoodTagData)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.HerdFoodTagData" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.GeneratedCode.DataEntities.HerdFoodTagDataEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateHerdFoodTagData.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.GeneratedCode.DataEntities.HerdFoodTagDataEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.GeneratedCode.DataEntities.HerdFoodTagDataEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.HerdFoodTagData" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateInseminatorTimeRecord">
      <summary>
            Translator class for InseminatorTimeRecordEntity and corresponding assemble helper methods.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateInseminatorTimeRecord.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.InseminatorTimeRecordRegisterBatchOperation)">
      <summary>
            Translates the data contract to entity.
            </summary>
      <param name="from">From.</param>
      <returns>Business entity</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateInseminatorTimeRecord.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.InseminatorTimeRecord)">
      <summary>
            Translates the data contract to entity. Note that Lastmodified and LastModifiedBy is not translated.
            </summary>
      <param name="from">From datacontract type</param>
      <returns>Entity type</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateInseminatorTimeRecord.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.InseminatorTimeRecordEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.InseminatorTimeRecordEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.InseminatorTimeRecord" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateInseminatorTimeRecord.ToCorrection(DLBR.DCF.KDB.DataContracts.InseminatorTimeRecord)">
      <summary>
            Extension method converting a InseminatorTimeRecord data contract
            object to a InseminatorTimeRecordCorrection object.
            </summary>
      <param name="obj">The obj.</param>
      <returns>Object represented as a correction</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateInseminatorTimeRecord.AddInseminatorTimeRecordToCollection(DLBR.DCF.KDB.DataContracts.InseminatorTimeRecord,DLBR.DCF.KDB.BusinessEntities.InseminatorTimeRecordEntity,DLBR.DCF.KDB.DataContracts.InseminatorTimeRecordCollection)">
      <summary>
            Adds the data contract object to the response collection. Note that
            if the InseminatorTimeRecord object has a parent Id, the object will be added to
            the parent time record's InseminatorTimeRecordCorrectionCollection.
            </summary>
      <param name="dataContractObject">The data contract object.</param>
      <param name="entity">The entity.</param>
      <param name="coll">The coll.</param>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateInseminatorTimeRecord.TranslateEntityCollectionToDataContractCollection(System.Collections.Generic.List{DLBR.DCF.KDB.BusinessEntities.InseminatorTimeRecordEntity})">
      <summary>
            Translates the entity collection to data contract collection.
            The entity collection can contain multible distinct time records
            and multiple corrections. 
            </summary>
      <param name="entities">The inseminator time record collection, where the 
            corresponding corrections are added to the appropriate time records.</param>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateInseminatorTimeRecord.TranslateEntityCollectionToSingleDataContract(System.Collections.Generic.List{DLBR.DCF.KDB.BusinessEntities.InseminatorTimeRecordEntity})">
      <summary>
            Translates the entity collection to single data contract object. Not if the 
            entity collection contains more than 1 distinct time record, besides the corrections,
            the method will throw an exception.
            </summary>
      <param name="entities">A collection of InseminatorTimeRecordEntity's. 
            Expects the list to contain a single time record and optionally 1 or more
            corrections.</param>
      <returns>Returns a time record entity, with the corrections added to it, if present.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateInseminatorTimeRecord.TranslateEntityCollectionToMultipleDataContracts(System.Collections.Generic.List{DLBR.DCF.KDB.BusinessEntities.InseminatorTimeRecordEntity})">
      <returns>Returns a time record entity, with the corrections added to it, if present.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateInseminatorTimeRecord.CountDistinctTimeRecords(System.Collections.Generic.List{DLBR.DCF.KDB.BusinessEntities.InseminatorTimeRecordEntity})">
      <summary>
            Counts how many distinctively identifiable time records are present in
            the collection.
            </summary>
      <param name="entities">The entities.</param>
      <returns>
            Number of distinctively identifiable time records
            </returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateManagementUnit">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.ManagementUnit" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.ManagementUnitEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateManagementUnit.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.ManagementUnit)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.ManagementUnit" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.ManagementUnitEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateManagementUnit.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.ManagementUnitEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.ManagementUnitEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.ManagementUnit" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateMUDairyFatAndProteinPercentage">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.MUYearAnimalStats" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.MUYearAnimalStatsEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateMUDairyFatAndProteinPercentage.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.MUDairyFatAndProteinPercentageEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.MUYearAnimalStatsEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.MUYearAnimalStats" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateMUDeliveryRate">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.MUDeliveryRate" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.MUDeliveryRateEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateMUDeliveryRate.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.MUDeliveryRateEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.MUDeliveryRateEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.MUDeliveryRate" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateMUGeneralKeyfigures">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.MUGeneralKeyfigures" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.MUGeneralKeyfiguresEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateMUGeneralKeyfigures.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.IMUGeneralKeyfiguresEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.MUGeneralKeyfiguresEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.MUGeneralKeyfigures" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateMUMostSignificantRace">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.MUMostSignificantRace" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.MUMostSignificantRaceEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateMUMostSignificantRace.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.MUMostSignificantRaceEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.MUDeliveryRateEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.MUDeliveryRate" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateMUPerformanceControlAvgKgMilk">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.MUDeliveryRate" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.MUDeliveryRateEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateMUPerformanceControlAvgKgMilk.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.MUPerformanceControlAvgKgMilkEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.MUDeliveryRateEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.MUDeliveryRate" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateMUPerformanceControlKgEKM">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.MUPerformanceControlKgEKM" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.MUPerformanceControlKgEKMEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateMUPerformanceControlKgEKM.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.IMUPerformanceControlKgEKMEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.MUPerformanceControlKgEKMEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.MUPerformanceControlKgEKM" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateMUPerformanceLevel">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.MUDeliveryRate" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.MUDeliveryRateEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateMUPerformanceLevel.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.MUPerformanceLevelEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.MUPerformanceLevelEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.MUPerformanceLevel" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateMUQuota">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.MUQuota" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.MUQuotaEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateMUQuota.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.IMUQuotaEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.MUQuotaEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.MUQuota" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateMUReproduction">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.MUReproduction" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.MUReproductionEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateMUReproduction.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.MUReproductionEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.MUReproductionEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.MUReproduction" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateMUReproduction.TranslateEntityToDataContractV3(DLBR.DCF.KDB.BusinessEntities.MUReproductionEntityV3)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.MUReproductionEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.MUReproduction" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateMUYearAnimalStats">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.MUYearAnimalStats" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.MUYearAnimalStatsEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateMUYearAnimalStats.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.IMUYearAnimalStatsEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.MUYearAnimalStatsEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.MUYearAnimalStats" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateMUMilkDeliveryByDay">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.MUMilkDeliveryByDay" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.MUMilkDeliveryByDayEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateMUMilkDeliveryByDay.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.IMUMilkDeliveryByDayEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.MUMilkDeliveryByDayEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.MUMilkDeliveryByDay" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateMUMilkDeliveryByMonth">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.MUMilkDeliveryByMonth" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.MUMilkDeliveryByMonthEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateMUMilkDeliveryByMonth.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.IMUMilkDeliveryByMonthEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.MUMilkDeliveryByMonthEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.MUMilkDeliveryByMonth" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslatePrognosisAnimalData">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.PrognosisAnimalData" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.GeneratedCode.DataEntities.PrognosisAnimalDataEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslatePrognosisAnimalData.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.GeneratedCode.DataEntities.PrognosisAnimalDataEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.GeneratedCode.DataEntities.PrognosisAnimalDataEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.PrognosisAnimalData" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateDMSKeyfigureData">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.DMSKeyfigureData" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.DMSKeyfigureDataEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateDMSKeyfigureData.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.DMSKeyfigureDataEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.DMSKeyfigureDataEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.DMSKeyfigureData" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateDMSKeyfigureData.TranslateEntityToDataContractV3(DLBR.DCF.KDB.BusinessEntities.DMSKeyfigureDataEntityV3)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.DMSKeyfigureDataEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.DMSKeyfigureData" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateNordicClassificationBasicData">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.NordicClassificationBasicData" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.DataEntities.NordicClassificationBasicDataEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateNordicClassificationBasicData.TranslateEntityToDataContract(DLBR.DCF.KDB.DataEntities.NordicClassificationBasicDataEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataEntities.NordicClassificationBasicDataEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.NordicClassificationBasicData" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateAnimalGroup">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.AnimalGroup" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.AnimalGroupEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateAnimalGroup.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.AnimalGroup)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.AnimalGroup" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.AnimalGroupEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateAnimalGroup.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.Classifications.AnimalGroupEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.AnimalGroupEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.AnimalGroup" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateDrug">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.Drug" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.DrugEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateDrug.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.Drug)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.Drug" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.DrugEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateDrug.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.Classifications.DrugEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.DrugEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.Drug" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateDrugUnit">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.DrugUnit" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.DrugUnitEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateDrugUnit.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.DrugUnit)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.DrugUnit" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.DrugUnitEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateDrugUnit.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.Classifications.DrugUnitEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.DrugUnitEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.DrugUnit" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateDrugUsage">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.DrugUsage" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.DrugUsageEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateDrugUsage.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.DrugUsage)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.DrugUsage" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.DrugUsageEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateDrugUsage.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.Classifications.DrugUsageEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.DrugUsageEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.DrugUsage" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateEarmarkArticleType">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.EarmarkArticleType" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.EarmarkArticleTypeEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateEarmarkArticleType.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.EarmarkArticleType,System.Boolean)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.EarmarkArticleType" /> to translate.</param>
      <param name="useCache"></param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.EarmarkArticleTypeEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateEarmarkArticleType.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.Classifications.EarmarkArticleTypeEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.EarmarkArticleTypeEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.EarmarkArticleType" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateEarmarkColorType">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.EarmarkColorType" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.EarmarkColorTypeEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateEarmarkColorType.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.EarmarkColorType)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.EarmarkColorType" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.EarmarkColorTypeEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateEarmarkColorType.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.Classifications.EarmarkColorTypeEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.EarmarkColorTypeEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.EarmarkColorType" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateEarmarkManufacturerType">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.EarmarkManufacturerType" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.EarmarkManufacturerTypeEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateEarmarkManufacturerType.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.EarmarkManufacturerType,System.Boolean)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.EarmarkManufacturerType" /> to translate.</param>
      <param name="useCache"></param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.EarmarkManufacturerTypeEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateEarmarkManufacturerType.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.Classifications.EarmarkManufacturerTypeEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.EarmarkManufacturerTypeEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.EarmarkManufacturerType" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateEarmarkOptionalTextType">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.EarmarkOptionalTextType" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.EarmarkOptionalTextTypeEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateEarmarkOptionalTextType.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.EarmarkOptionalTextType)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.EarmarkOptionalTextType" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.EarmarkOptionalTextTypeEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateEarmarkOptionalTextType.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.Classifications.EarmarkOptionalTextTypeEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.EarmarkOptionalTextTypeEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.EarmarkOptionalTextType" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateInternalAnimalIdentifierType">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.InternalAnimalIdentifierType" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.InternalAnimalIdentifierTypeEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateInternalAnimalIdentifierType.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.InternalAnimalIdentifierType)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.InternalAnimalIdentifierType" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.InternalAnimalIdentifierTypeEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateInternalAnimalIdentifierType.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.Classifications.InternalAnimalIdentifierTypeEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.InternalAnimalIdentifierTypeEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.InternalAnimalIdentifierType" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateClinicalParameter">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.ClinicalParameter" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.ClinicalParameterEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateClinicalParameter.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.ClinicalParameter)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.ClinicalParameter" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.ClinicalParameterEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateClinicalParameter.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.Classifications.ClinicalParameterEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.ClinicalParameterEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.ClinicalParameter" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateCullingType">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.CullingType" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.CullingTypeEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateCullingType.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.CullingType)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.CullingType" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.CullingTypeEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateCullingType.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.Classifications.CullingTypeEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.CullingTypeEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.CullingType" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateDiseaseCharacteristic">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.DiseaseCharacteristic" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.DiseaseCharacteristicEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateDiseaseCharacteristic.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.DiseaseCharacteristic)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.DiseaseCharacteristic" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.DiseaseCharacteristicEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateDiseaseCharacteristic.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.Classifications.DiseaseCharacteristicEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.DiseaseCharacteristicEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.DiseaseCharacteristic" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateDiseaseSeverity">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.DiseaseSeverity" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.DiseaseSeverityEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateDiseaseSeverity.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.DiseaseSeverity)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.DiseaseSeverity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.DiseaseSeverityEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateDiseaseSeverity.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.Classifications.DiseaseSeverityEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.DiseaseSeverityEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.DiseaseSeverity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateDiseaseSite">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.DiseaseSite" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.DiseaseSiteEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateDiseaseSite.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.DiseaseSite)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.DiseaseSite" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.DiseaseSiteEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateDiseaseSite.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.Classifications.DiseaseSiteEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.DiseaseSiteEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.DiseaseSite" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateDiseaseTreatmentMethod">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.DiseaseTreatmentMethod" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.DiseaseTreatmentMethodEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateDiseaseTreatmentMethod.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.DiseaseTreatmentMethod)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.DiseaseTreatmentMethod" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.DiseaseTreatmentMethodEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateDiseaseTreatmentMethod.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.Classifications.DiseaseTreatmentMethodEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.DiseaseTreatmentMethodEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.DiseaseTreatmentMethod" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateDiseaseType">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.DiseaseType" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.DiseaseTypeEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateDiseaseType.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.DiseaseType)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.DiseaseType" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.DiseaseTypeEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateDiseaseType.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.Classifications.DiseaseTypeEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.DiseaseTypeEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.DiseaseType" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateHerdRemarkType">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.HerdRemarkType" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.HerdRemarkTypeEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateHerdRemarkType.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.HerdRemarkType)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.HerdRemarkType" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.HerdRemarkTypeEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateHerdRemarkType.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.Classifications.HerdRemarkTypeEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.HerdRemarkTypeEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.HerdRemarkType" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateKeyFigureType">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.KeyFigureType" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.KeyFigureTypeEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateKeyFigureType.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.KeyFigureType)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.KeyFigureType" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.KeyFigureTypeEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateKeyFigureType.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.Classifications.KeyFigureTypeEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.KeyFigureTypeEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.KeyFigureType" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateMeatRetentionUnit">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.MeatRetentionUnit" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.MeatRetentionUnitEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateMeatRetentionUnit.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.MeatRetentionUnit)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.MeatRetentionUnit" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.MeatRetentionUnitEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateMeatRetentionUnit.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.Classifications.MeatRetentionUnitEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.MeatRetentionUnitEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.MeatRetentionUnit" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateMilkRecordingNote">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.MilkRecordings.MilkRecordingNote" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.MilkRecordingNoteEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateMilkRecordingNote.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.MilkRecordings.MilkRecordingNote)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.MilkRecordings.MilkRecordingNote" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.MilkRecordingNoteEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateMilkRecordingNote.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.Classifications.MilkRecordingNoteEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.MilkRecordingNoteEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.MilkRecordings.MilkRecordingNote" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateMilkRetentionUnit">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.MilkRetentionUnit" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.MilkRetentionUnitEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateMilkRetentionUnit.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.MilkRetentionUnit)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.MilkRetentionUnit" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.MilkRetentionUnitEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateMilkRetentionUnit.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.Classifications.MilkRetentionUnitEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.MilkRetentionUnitEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.MilkRetentionUnit" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslatePrescriptionGroup">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.PrescriptionGroup" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.PrescriptionGroupEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslatePrescriptionGroup.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.PrescriptionGroup)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.PrescriptionGroup" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.PrescriptionGroupEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslatePrescriptionGroup.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.Classifications.PrescriptionGroupEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.PrescriptionGroupEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.PrescriptionGroup" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateTargetType">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.TargetType" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.TargetTypeEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateTargetType.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.TargetType)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.TargetType" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.TargetTypeEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateTargetType.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.Classifications.TargetTypeEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.TargetTypeEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.TargetType" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateAnimalClassificationBasicData">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.AnimalClassificationBasicData" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.DataEntities.AnimalClassificationBasicDataEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateAnimalClassificationBasicData.TranslateEntityToDataContract(DLBR.DCF.KDB.DataEntities.AnimalClassificationBasicDataEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataEntities.AnimalClassificationBasicDataEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.AnimalClassificationBasicData" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateEarmarkArticle">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.EarmarkArticle" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.EarmarkArticleEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateEarmarkArticle.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.EarmarkArticle,System.Boolean)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.EarmarkArticle" /> to translate.</param>
      <param name="useCache"></param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.EarmarkArticleEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateEarmarkArticle.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.EarmarkArticleEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.EarmarkArticleEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.EarmarkArticle" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateEarmarkArticleRegistration">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.EarmarkArticleRegistration" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.EarmarkArticleRegistrationEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateEarmarkArticleRegistration.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.EarmarkArticleRegistration,System.Boolean)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.EarmarkArticleRegistration" /> to translate.</param>
      <param name="useCache"></param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.EarmarkArticleRegistrationEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateEarmarkCashOnDelivery">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.EarmarkCashOnDelivery" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.EarmarkCashOnDeliveryEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateEarmarkCashOnDelivery.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.EarmarkCashOnDelivery)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.EarmarkCashOnDelivery" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.EarmarkCashOnDeliveryEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateEarmarkCashOnDelivery.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.EarmarkCashOnDeliveryEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.EarmarkCashOnDeliveryEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.EarmarkCashOnDelivery" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateEarmarkMaxQuantity">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.EarmarkMaxQuantity" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.EarmarkMaxQuantityEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateEarmarkMaxQuantity.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.EarmarkMaxQuantity)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.EarmarkMaxQuantity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.EarmarkMaxQuantityEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateEarmarkMaxQuantity.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.EarmarkMaxQuantityEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.EarmarkMaxQuantityEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.EarmarkMaxQuantity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateEarmarkReplacementRegistration">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.EarmarkReplacementRegistration" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.EarmarkReplacementRegistrationEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateEarmarkReplacementRegistration.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.EarmarkReplacementRegistration,System.Boolean)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.EarmarkReplacementRegistration" /> to translate.</param>
      <param name="useCache"></param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.EarmarkReplacementRegistrationEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateEarmarkSeriesRegistration">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.EarmarkSeriesRegistration" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.EarmarkSeriesRegistrationEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateEarmarkSeriesRegistration.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.EarmarkSeriesRegistration,System.Boolean)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.EarmarkSeriesRegistration" /> to translate.</param>
      <param name="useCache"></param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.EarmarkSeriesRegistrationEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateAnimalData">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.AnimalData" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.DataEntities.AnimalDataEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateAnimalData.TranslateEntityToDataContract(DLBR.DCF.KDB.DataEntities.AnimalDataEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataEntities.AnimalDataEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.AnimalData" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateAnimalHealthRegistration">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.AnimalHealthRegistration" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.AnimalHealthRegistrationEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateAnimalHealthRegistration.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.AnimalHealthRegistration)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.AnimalHealthRegistration" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.AnimalHealthRegistrationEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateAnimalGroupHealth">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.AnimalGroupHealth" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.AnimalGroupHealthEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateAnimalGroupHealth.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.AnimalGroupHealth)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.AnimalGroupHealth" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.AnimalGroupHealthEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateAnimalGroupHealth.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.AnimalGroupHealthEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.AnimalGroupHealthEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.AnimalGroupHealth" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateAnimalHealth">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.AnimalHealth" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.AnimalHealthEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateAnimalHealth.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.AnimalHealth)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.AnimalHealth" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.AnimalHealthEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateAnimalHealth.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.AnimalHealthEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.AnimalHealthEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.AnimalHealth" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateClinicalRecording">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.ClinicalRecording" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.ClinicalRecordingEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateClinicalRecording.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.ClinicalRecording)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.ClinicalRecording" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.ClinicalRecordingEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateClinicalRecording.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.ClinicalRecordingEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.ClinicalRecordingEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.ClinicalRecording" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateCulling">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.Culling" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.CullingEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateCulling.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.Culling)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.Culling" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.CullingEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateCulling.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.CullingEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.CullingEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.Culling" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateEarmarkCombination">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.EarmarkCombination" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.EarmarkCombinationEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateEarmarkCombination.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.EarmarkCombination,System.Boolean)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.EarmarkCombination" /> to translate.</param>
      <param name="useCache"></param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.EarmarkCombinationEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateEarmarkCombination.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.EarmarkCombinationEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.EarmarkCombinationEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.EarmarkCombination" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateEarmarkOptionalText">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.EarmarkOptionalText" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.EarmarkOptionalTextEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateEarmarkOptionalText.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.EarmarkOptionalText)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.EarmarkOptionalText" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.EarmarkOptionalTextEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateEarmarkOptionalText.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.EarmarkOptionalTextEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.EarmarkOptionalTextEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.EarmarkOptionalText" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateEarmarkOrder">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.EarmarkOrder" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.EarmarkOrderEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateEarmarkOrder.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.EarmarkOrder,System.Boolean)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.EarmarkOrder" /> to translate.</param>
      <param name="useCache"></param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.EarmarkOrderEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateEarmarkOrder.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.EarmarkOrderEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.EarmarkOrderEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.EarmarkOrder" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateEarmarkReplacement">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.EarmarkReplacement" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.EarmarkReplacementEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateEarmarkReplacement.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.EarmarkReplacement,System.Boolean)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.EarmarkReplacement" /> to translate.</param>
      <param name="useCache"></param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.EarmarkReplacementEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateEarmarkReplacement.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.EarmarkReplacementEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.EarmarkReplacementEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.EarmarkReplacement" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateEarmarkSeries">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.EarmarkSeries" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.EarmarkSeriesEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateEarmarkSeries.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.EarmarkSeries,System.Boolean)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.EarmarkSeries" /> to translate.</param>
      <param name="useCache"></param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.EarmarkSeriesEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateEarmarkSeries.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.EarmarkSeriesEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.EarmarkSeriesEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.EarmarkSeries" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateEarmarkSeriesCombination">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.EarmarkSeriesCombination" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.EarmarkSeriesCombinationEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateEarmarkSeriesCombination.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.EarmarkSeriesCombination,System.Boolean)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.EarmarkSeriesCombination" /> to translate.</param>
      <param name="useCache"></param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.EarmarkSeriesCombinationEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateEarmarkSeriesCombination.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.EarmarkSeriesCombinationEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.EarmarkSeriesCombinationEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.EarmarkSeriesCombination" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateHerdRemark">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.HerdRemark" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.HerdRemarkEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateHerdRemark.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.HerdRemark)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.HerdRemark" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.HerdRemarkEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateHerdRemark.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.HerdRemarkEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.HerdRemarkEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.HerdRemark" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateInBreeding">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.InBreeding" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.InBreedingEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateInBreeding.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.InBreeding)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.Address" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.AddressEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateInBreeding.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.InBreedingEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.InBreedingEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.InBreeding" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateInseminatorRound">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.InseminatorRound" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.InseminatorRoundEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateInseminatorRound.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.InseminatorRound)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.InseminatorRound" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.InseminatorRoundEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateInseminatorRound.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.InseminatorRoundEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.InseminatorRoundEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.InseminatorRound" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateInseminatorTourplan">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.InseminatorTourplan" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.InseminatorTourplanEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateInseminatorTourplan.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.InseminatorTourplanEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.InseminatorTourplanEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.InseminatorTourplan" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateInternalAnimalIdentifier">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.InternalAnimalIdentifier" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.InternalAnimalIdentifierEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateInternalAnimalIdentifier.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.InternalAnimalIdentifier)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.InternalAnimalIdentifier" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.InternalAnimalIdentifierEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateInternalAnimalIdentifier.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.InternalAnimalIdentifierEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.InternalAnimalIdentifierEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.InternalAnimalIdentifier" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateKeyFigure">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.KeyFigure" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.KeyFigureEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateKeyFigure.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.KeyFigureEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.KeyFigureEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.KeyFigure" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateMatingScheme">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.MatingScheme" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.MatingSchemeEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateMatingScheme.TranslateEntityToDataContract(System.Collections.ObjectModel.Collection{DLBR.DCF.KDB.BusinessEntities.MatingSchemeEntity})">
      <summary>
            Translate the collection of business entities into the corresponding data contract.
            Assumes that the AnimalNumber of each of the entities in the collection has the same value.
            </summary>
      <param name="entities">The collection of <see cref="T:DLBR.DCF.KDB.BusinessEntities.MatingSchemeEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.MatingScheme" />. If <paramref name="entities" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.MedicationConverter">
      <summary></summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.MedicationConverter.Convert(DLBR.DCF.KDB.BusinessEntities.MedicationEntity)">
      <summary></summary>
      <param name="source"></param>
      <returns></returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.MedicationConverter.Convert(AutoMapper.ResolutionContext)">
      <summary></summary>
      <param name="context"></param>
      <returns></returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateMedication">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.Medication" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.MedicationEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateMedication.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.Medication)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.Medication" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.MedicationEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateMedication.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.MedicationEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.MedicationEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.Medication" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateMilkDelivery">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.MilkDelivery" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.MilkDeliveryEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateMilkDelivery.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.MilkDeliveryEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.MilkDeliveryEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.MilkDelivery" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateMilkQuota">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.MilkQuota" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.MilkQuotaEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateMilkQuota.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.MilkQuotaEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.MilkQuotaEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.MilkQuota" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateMilkRecording">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.MilkRecordings.MilkRecording" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.MilkRecordingEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateMilkRecording.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.MilkRecordings.MilkRecording)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.MilkRecordings.MilkRecording" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.MilkRecordingEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateMilkRecording.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.MilkRecordingEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.MilkRecordingEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.MilkRecordings.MilkRecording" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateNaturalService">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.NaturalMatingService.NaturalService" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.NaturalServiceEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateNaturalService.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.NaturalMatingService.NaturalService)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.NaturalMatingService.NaturalService" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.NaturalServiceEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateNaturalService.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.NaturalServiceEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.NaturalServiceEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.NaturalMatingService.NaturalService" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateNordicClassificationRegistration">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.NordicClassificationRegistration" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.RegistrationEntities.NordicClassificationRegistrationEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateNordicClassificationRegistration.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.NordicClassificationRegistration)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.NordicClassificationRegistration" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.RegistrationEntities.NordicClassificationRegistrationEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslatePosting">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.Posting" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.PostingEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslatePosting.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.Posting)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.Posting" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.PostingEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslatePosting.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.PostingEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.PostingEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.Posting" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslatePrognosisData">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.PrognosisData" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.DataEntities.PrognosisDataEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslatePrognosisData.TranslateEntityToDataContract(DLBR.DCF.KDB.DataEntities.PrognosisDataEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataEntities.PrognosisDataEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.PrognosisData" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateReportFile">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.ReportFile" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.DataEntities.ReportFileEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateReportFile.TranslateEntityToDataContract(DLBR.DCF.KDB.DataEntities.ReportFileEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataEntities.ReportFileEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.ReportFile" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateReportFileDefinition">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.ReportFileDefinition" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.DataEntities.ReportFileDefinitionEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateReportFileDefinition.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.ReportFileDefinition)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.ReportFileDefinition" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataEntities.ReportFileDefinitionEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateReportFileDefinition.TranslateEntityToDataContract(DLBR.DCF.KDB.DataEntities.ReportFileDefinitionEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataEntities.ReportFileDefinitionEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.ReportFileDefinition" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateReportFileStatus">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.ReportFileStatus" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.GeneratedCode.DataEntities.ReportFileStatusEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.GeneratedCode.Translators.TranslateReportFileStatus.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.GeneratedCode.DataEntities.ReportFileStatusEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.GeneratedCode.DataEntities.ReportFileStatusEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.ReportFileStatus" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateReportStatus">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.ReportStatus" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.DataEntities.ReportStatusEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateReportStatus.TranslateEntityToDataContract(DLBR.DCF.KDB.DataEntities.ReportStatusEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataEntities.ReportStatusEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.ReportStatus" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateSemenInventory">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.SemenStock" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.SemenStockEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateSemenInventory.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.SemenStock)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.SemenStock" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.SemenStockEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateSemenInventory.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.SemenStockEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.SemenStockEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.SemenStock" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateSire">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.Sire" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.SireEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateSire.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.SireEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.SireEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.Sire" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateTarget">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.Target" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.TargetEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateTarget.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.Target)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.Target" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.TargetEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateTarget.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.TargetEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.TargetEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.Target" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.MilkRecordingEntityService">
      <summary>
        <h1>General</h1>
        <p>
            The following URIs specifies the location of the service in the production- and production test environment. 
            By default services in both the production and the production test environment uses the production data stores. The alternative URIs, which uses the test data stores (Medio), may be used for testing purposes.
            Please note that service versions might differ between the production- and production test environments. Before you begin using the service, please consult the person responsible as described in section 3.7 – Responsibility assignment.
            </p>
        <p>
          <b>Production URL:</b>
          <a href="http://prod.dcf.ws.dlbr.dk/DCFServices/MilkRecordingEntityService.svc">http://prod.dcf.ws.dlbr.dk/DCFServices/MilkRecordingEntityService.svc</a>
        </p>
        <p>
          <b>Accept test URL:</b>
          <a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/MilkRecordingEntityService.svc">http://accepttest.dcf.ws.dlbr.dk/DCFServices/MilkRecordingEntityService.svc</a>
        </p>
        <h1>Web Service Description</h1>
            The machine-readable description in the form of a WSDL document can be obtained by querying the following URI’s.
            <p><b>Production WSDL:</b><a href="http://prod.dcf.ws.dlbr.dk/DCFServices/MilkRecordingEntityService.svc?wsdl">http://prod.dcf.ws.dlbr.dk/DCFServices/MilkRecordingEntityService.svc?wsdl</a></p><p><b>Accept test WSDL:</b><a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/MilkRecordingEntityService.svc?wsdl">http://accepttest.dcf.ws.dlbr.dk/DCFServices/MilkRecordingEntityService.svc?wsdl</a></p><h1>Endpoints</h1>
            For information regarding endpoints, see topic 'Endpoints available in DCF Services'
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.MilkRecordingEntityService.FindMilkRecordingsByAnimalNumber(DLBR.DCF.KDB.MessageContracts.MilkRecordings.FindMilkRecordingsByAnimalNumberRequest)">
      <summary>
        <h1>Functional Description</h1>
            Finds existing milk recordings by animal number.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>AnimalNumber</td><td>Yes</td><td>&gt; 0</td><td>The animal number for which to find milk recordings.</td></tr><tr><td>RequestedCount</td><td>No</td><td></td><td>If specified only the specified number of milk recordings are returned. The milk recordings are sorted by date, newest first. If not specified all milk recordings on the specified animal is returned.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>MilkRecordingCollection</td><td>Collection of <see cref="T:DLBR.DCF.KDB.DataContracts.MilkRecordings.MilkRecording" />. The collection is empty if no entities where found.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.MilkRecordings.FindMilkRecordingsByAnimalNumberRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.MilkRecordings.FindMilkRecordingsByAnimalNumberResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            MilkRecordingEntityServiceContractClient proxy = new MilkRecordingEntityServiceContractClient("MilkRecordingEntityService_Federation_Adfs");

            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID_FARMER;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD_FARMER;

                MilkRecordingCollection result = proxy.FindMilkRecordingsByAnimalNumber(m_cowAnimalNumber, null);

                Assert.IsNotNull(result);
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.MilkRecordingEntityService.FindMilkRecordingsByHerdNumber(DLBR.DCF.KDB.MessageContracts.MilkRecordings.FindMilkRecordingsByHerdNumberRequest)">
      <summary>
        <h1>Functional Description</h1>
            Finds existing milk recordings by herd number.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>HerdNumber</td><td>Yes</td><td>&gt; 0</td><td>The herd number for which to find milk recordings.</td></tr><tr><td>AnimalType</td><td>Yes</td><td></td><td>The type of animal in the herd, e.g. cattle.</td></tr><tr><td>FromDate</td><td>(Yes)</td><td></td><td>If specified only milk recordings after the specified date is returned. If not specified all milk recordings matching the other criteria’s is returned. If this parameter is set also the “ToDate” must be set.</td></tr><tr><td>ToDate</td><td>(Yes)</td><td></td><td>If specified only milk recordings before the specified date is returned. This parameter is required if “FromDate” is specified.</td></tr><tr><td>RequestedCount</td><td>No</td><td></td><td>If specified only the specified number of milk recordings are returned. The milk recordings are sorted by date, newest first. If not specified all milk recordings on the specified animal is returned.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>MilkRecordingCollection</td><td>Collection of <see cref="T:DLBR.DCF.KDB.DataContracts.MilkRecordings.MilkRecording" />. The collection is empty if no entities where found.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.MilkRecordings.FindMilkRecordingsByHerdNumberRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.MilkRecordings.FindMilkRecordingsByHerdNumberResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            MilkRecordingEntityServiceContractClient proxy = new MilkRecordingEntityServiceContractClient("MilkRecordingEntityService_Federation_Adfs");

            DateTime? fromDate = new DateTime( 2008, 1, 1 );
            DateTime? toDate = new DateTime( 2008, 5, 1 );
            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID_FARMER;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD_FARMER;

                MilkRecordingCollection result = proxy.FindMilkRecordingsByHerdNumber( m_animalType, fromDate, TestUtil.HERD_NUMBER, null, toDate );

                Assert.IsNotNull( result );

                //Check to see that the result contains animals with more than one milk recording.
                var queryRequestedCount =
                    from milkRecording in result
                    group milkRecording by milkRecording.AnimalNumber
                        into groupResult
                        where groupResult.Count() &gt; 1
                        select groupResult;

                Assert.IsTrue( queryRequestedCount.Count() &gt; 0 );

                //Check to see that the result does not contain milkrecordings with a date outside the specified period.
                var queryRequestedPeriod =
                    from milkRecording in result
                    where milkRecording.Date &gt;= toDate &amp;&amp; milkRecording.Date &lt;= fromDate
                    select milkRecording;

                Assert.AreEqual( queryRequestedPeriod.Count(), 0 );

            }
            catch( Exception ex )
            {
                Debug.WriteLine( ex.Message );
                throw;
            }
            finally
            {
                if( proxy.State != CommunicationState.Faulted )
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.MilkRecordingEntityService.FindLactationValuesByAnimalNumber(DLBR.DCF.KDB.MessageContracts.MilkRecordings.FindLactationValuesByAnimalNumberRequest)">
      <summary>
        <h1>Functional Description</h1>
            Finds lactation values by animal number.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>AnimalNumber</td><td>Yes</td><td>&gt; 0</td><td>The animal number for which to find milk recordings.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>LactationRecord</td><td>The requested <see cref="T:DLBR.DCF.KDB.DataContracts.MilkRecordings.LactationRecord" /> entity</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.MilkRecordings.FindLactationValuesByAnimalNumberRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.MilkRecordings.FindLactationValuesByAnimalNumberResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>Method FindLactationRecordByAnimalNumber_AdfsSecuredCall_ShouldReturnEntity not found in class ..\tests\DLBR.DCF.KDB.IntegrationTests\MilkRecordingEntityServiceTest.cs</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.MilkRecordingEntityService.FindLactationValuesByHerdNumber(DLBR.DCF.KDB.MessageContracts.MilkRecordings.FindLactationValuesByHerdNumberRequest)">
      <summary>
        <h1>Functional Description</h1>
            Finds lactation recordings by herd number.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>HerdNumber</td><td>Yes</td><td>&gt; 0</td><td>The herd number for which to find milk recordings.</td></tr><tr><td>AnimalType</td><td>Yes</td><td></td><td>The type of animal in the herd, e.g. cattle.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>LactationRecordCollection</td><td>Collection of <see cref="T:DLBR.DCF.KDB.DataContracts.MilkRecordings.LactationRecord" />. The collection is empty if no entities where found.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.MilkRecordings.FindLactationValuesByHerdNumberRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.MilkRecordings.FindLactationValuesByHerdNumberResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            MilkRecordingEntityServiceContractClient proxy = new MilkRecordingEntityServiceContractClient("MilkRecordingEntityService_Federation_Adfs");

            long herdNumber = 27612;
            AnimalType animalType = new AnimalType() {Code = 12};
            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID_FARMER;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD_FARMER;

                LactationRecordCollection result = proxy.FindLactationValuesByHerdNumber(animalType, herdNumber);

                result.Should().NotBeNull().And.NotBeEmpty();
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.NaturalServiceEntityService">
      <summary>
        <h1>General</h1>
        <p>
            The following URIs specifies the location of the service in the production- and production test environment. 
            By default services in both the production and the production test environment uses the production data stores. The alternative URIs, which uses the test data stores (Medio), may be used for testing purposes.
            Please note that service versions might differ between the production- and production test environments. Before you begin using the service, please consult the person responsible as described in section 3.7 – Responsibility assignment.
            </p>
        <p>
          <b>Production URL:</b>
          <a href="http://prod.dcf.ws.dlbr.dk/DCFServices/NaturalServiceEntityService.svc">http://prod.dcf.ws.dlbr.dk/DCFServices/NaturalServiceEntityService.svc</a>
        </p>
        <p>
          <b>Accept test URL:</b>
          <a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/NaturalServiceEntityService.svc">http://accepttest.dcf.ws.dlbr.dk/DCFServices/NaturalServiceEntityService.svc</a>
        </p>
        <h1>Web Service Description</h1>
            The machine-readable description in the form of a WSDL document can be obtained by querying the following URI’s.
            <p><b>Production WSDL:</b><a href="http://prod.dcf.ws.dlbr.dk/DCFServices/NaturalServiceEntityService.svc?wsdl">http://prod.dcf.ws.dlbr.dk/DCFServices/NaturalServiceEntityService.svc?wsdl</a></p><p><b>Accept test WSDL:</b><a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/NaturalServiceEntityService.svc?wsdl">http://accepttest.dcf.ws.dlbr.dk/DCFServices/NaturalServiceEntityService.svc?wsdl</a></p><h1>Endpoints</h1>
            For information regarding endpoints, see topic 'Endpoints available in DCF Services'
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.NaturalServiceEntityService.RegisterNaturalService(DLBR.DCF.KDB.MessageContracts.NaturalMatingEntityService.RegisterNaturalServiceRequest)">
      <summary>
        <h1>Functional Description</h1>
            Register a new Natural Service
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>HerdNumber</td><td>yes</td><td>&gt;0</td><td>The herd number of the animal being serviced</td></tr><tr><td>AnimalType</td><td>yes</td><td>Code &gt; 0</td><td>The type of animal, e.g. Cattle.</td></tr><tr><td>AnimalNumber</td><td>yes</td><td>&gt;0</td><td>The animal number of the animal being serviced</td></tr><tr><td>BullNumber</td><td></td><td>&gt;0</td><td>The animal number of the bull delivering the service. 
            Either BullNumber or BullHerdBookNumber is required to register a Natural Service</td></tr><tr><td>BullHerdBookNumber</td><td></td><td>&gt;0</td><td>The herdbook number of the bull delivering the service.
            Either BullNumber or BullHerdBookNumber is required to register a Natural Service</td></tr><tr><td>StartDate</td><td>yes</td><td></td><td>Start of Natural Service</td></tr><tr><td>EndDate</td><td></td><td></td><td>End of Natural Service</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>NaturalService</td><td>The newly registered NaturalService</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.NaturalMatingEntityService.RegisterNaturalServiceRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.NaturalMatingEntityService.RegisterNaturalServiceResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            NaturalServiceEntityServiceContractClient proxy = new NaturalServiceEntityServiceContractClient("NaturalServiceEntityService");
            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID_FARMER;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD_FARMER;

                AnimalType animalType = new AnimalType() { Code = 12 };

                // Create
                NaturalService naturalService = proxy.RegisterNaturalService( TestUtil.ANIMAL_NUMBER_FOR_TESTHERD, animalType, null, BullAnimalNumber, DateTime.Today, TestUtil.HERD_NUMBER, DateTime.Today );
                Assert.IsNotNull( naturalService );
                Assert.AreEqual( naturalService.AnimalNumber, TestUtil.ANIMAL_NUMBER_FOR_TESTHERD );

                // Read
                naturalService = proxy.GetNaturalServiceById( naturalService.Id );
                Assert.IsNotNull( naturalService );
                Assert.IsTrue( naturalService.BullNumber &gt; 0 );

                //Update
                DateTime date = DateTime.Now.AddDays( -2 );
                naturalService.StartDate = date;
                naturalService.EndDate = null;

                proxy.UpdateNaturalService( ref naturalService );

                Assert.IsNotNull( naturalService );
                Assert.AreEqual( date.Date, naturalService.StartDate.Date );

                //Delete
                proxy.DeleteNaturalService( naturalService );

            }
            catch( FaultException&lt;InvalidArgument&gt; ex )
            {
                Debug.WriteLine( ex.Message, "RegisterNaturalService.TestCRUD" );
            }

            catch( FaultException ex )
            {
                Debug.WriteLine( ex.Message, "RegisterNaturalService.TestCRUD" );
                throw;
            }

            catch( Exception ex )
            {
                Debug.WriteLine( ex.Message );
                throw;
            }
            finally
            {
                if( proxy.State != CommunicationState.Faulted )
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.NaturalServiceEntityService.DeleteNaturalService(DLBR.DCF.KDB.MessageContracts.NaturalMatingEntityService.DeleteNaturalServiceRequest)">
      <summary>
        <h1>Functional Description</h1>
            Deletes a existing Natural Service
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>NaturalService</td><td>yes</td><td></td><td>The NaturalService to delete</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.NaturalMatingEntityService.DeleteNaturalServiceRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.NaturalMatingEntityService.DeleteNaturalServiceResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            NaturalServiceEntityServiceContractClient proxy = new NaturalServiceEntityServiceContractClient("NaturalServiceEntityService");
            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID_FARMER;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD_FARMER;

                AnimalType animalType = new AnimalType() { Code = 12 };

                // Create
                NaturalService naturalService = proxy.RegisterNaturalService( TestUtil.ANIMAL_NUMBER_FOR_TESTHERD, animalType, null, BullAnimalNumber, DateTime.Today, TestUtil.HERD_NUMBER, DateTime.Today );
                Assert.IsNotNull( naturalService );
                Assert.AreEqual( naturalService.AnimalNumber, TestUtil.ANIMAL_NUMBER_FOR_TESTHERD );

                // Read
                naturalService = proxy.GetNaturalServiceById( naturalService.Id );
                Assert.IsNotNull( naturalService );
                Assert.IsTrue( naturalService.BullNumber &gt; 0 );

                //Update
                DateTime date = DateTime.Now.AddDays( -2 );
                naturalService.StartDate = date;
                naturalService.EndDate = null;

                proxy.UpdateNaturalService( ref naturalService );

                Assert.IsNotNull( naturalService );
                Assert.AreEqual( date.Date, naturalService.StartDate.Date );

                //Delete
                proxy.DeleteNaturalService( naturalService );

            }
            catch( FaultException&lt;InvalidArgument&gt; ex )
            {
                Debug.WriteLine( ex.Message, "RegisterNaturalService.TestCRUD" );
            }

            catch( FaultException ex )
            {
                Debug.WriteLine( ex.Message, "RegisterNaturalService.TestCRUD" );
                throw;
            }

            catch( Exception ex )
            {
                Debug.WriteLine( ex.Message );
                throw;
            }
            finally
            {
                if( proxy.State != CommunicationState.Faulted )
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.NaturalServiceEntityService.UpdateNaturalService(DLBR.DCF.KDB.MessageContracts.NaturalMatingEntityService.UpdateNaturalServiceRequest)">
      <summary>
        <h1>Functional Description</h1>
            Updates a existing Natural Service
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>NaturalService</td><td>yes</td><td></td><td>The NaturalService to update</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>NaturalService</td><td>The updated NaturalService</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.NaturalMatingEntityService.UpdateNaturalServiceRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.NaturalMatingEntityService.UpdateNaturalServiceResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            NaturalServiceEntityServiceContractClient proxy = new NaturalServiceEntityServiceContractClient("NaturalServiceEntityService");
            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID_FARMER;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD_FARMER;

                AnimalType animalType = new AnimalType() { Code = 12 };

                // Create
                NaturalService naturalService = proxy.RegisterNaturalService( TestUtil.ANIMAL_NUMBER_FOR_TESTHERD, animalType, null, BullAnimalNumber, DateTime.Today, TestUtil.HERD_NUMBER, DateTime.Today );
                Assert.IsNotNull( naturalService );
                Assert.AreEqual( naturalService.AnimalNumber, TestUtil.ANIMAL_NUMBER_FOR_TESTHERD );

                // Read
                naturalService = proxy.GetNaturalServiceById( naturalService.Id );
                Assert.IsNotNull( naturalService );
                Assert.IsTrue( naturalService.BullNumber &gt; 0 );

                //Update
                DateTime date = DateTime.Now.AddDays( -2 );
                naturalService.StartDate = date;
                naturalService.EndDate = null;

                proxy.UpdateNaturalService( ref naturalService );

                Assert.IsNotNull( naturalService );
                Assert.AreEqual( date.Date, naturalService.StartDate.Date );

                //Delete
                proxy.DeleteNaturalService( naturalService );

            }
            catch( FaultException&lt;InvalidArgument&gt; ex )
            {
                Debug.WriteLine( ex.Message, "RegisterNaturalService.TestCRUD" );
            }

            catch( FaultException ex )
            {
                Debug.WriteLine( ex.Message, "RegisterNaturalService.TestCRUD" );
                throw;
            }

            catch( Exception ex )
            {
                Debug.WriteLine( ex.Message );
                throw;
            }
            finally
            {
                if( proxy.State != CommunicationState.Faulted )
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.NaturalServiceEntityService.GetNaturalServiceById(DLBR.DCF.KDB.MessageContracts.NaturalMatingEntityService.GetNaturalServiceByIdRequest)">
      <summary>
        <h1>Functional Description</h1>
            Find a NaturalService by Id
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>NaturalServiceId</td><td>yes</td><td>&gt;0</td><td>The Id of the wanted NaturalService</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>NaturalService</td><td>The returned NaturalService</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.NaturalMatingEntityService.GetNaturalServiceByIdRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.NaturalMatingEntityService.GetNaturalServiceByIdResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            NaturalServiceEntityServiceContractClient proxy = new NaturalServiceEntityServiceContractClient("NaturalServiceEntityService");
            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                //Get result
                NaturalService result = proxy.GetNaturalServiceById( NaturalServiceId );

                Assert.IsNotNull( result );
                Assert.AreEqual( AnimalNumber, result.AnimalNumber );
                Assert.AreEqual( NaturalServiceId, result.Id );

                Debug.WriteLine( "Returned Natural service Id: " + result.Id, "Result" );
            }
            catch( Exception ex )
            {
                Debug.WriteLine( ex.Message, "Exception" );
                throw;
            }
            finally
            {
                if( proxy.State != CommunicationState.Faulted )
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.NaturalServiceEntityService.FindNaturalServicesByAnimalNumber(DLBR.DCF.KDB.MessageContracts.NaturalMatingEntityService.FindNaturalServicesByAnimalNumberRequest)">
      <summary>
        <h1>Functional Description</h1>
            Find a number of NaturalServices by animal number
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>AnimalNumber</td><td>yes</td><td>&gt;0</td><td>The animal number</td></tr><tr><td>RequestedCount</td><td></td><td></td><td>If specified only the specified number of NaturalServices are returned. The NaturalServices are sorted by date, newest first.
            If not specified all NaturalServices on the specified animal is returned.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>NaturalServiceCollection</td><td>A collection of NaturalServices</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.NaturalMatingEntityService.FindNaturalServicesByAnimalNumberRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.NaturalMatingEntityService.FindNaturalServicesByAnimalNumberResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            NaturalServiceEntityServiceContractClient proxy = new NaturalServiceEntityServiceContractClient("NaturalServiceEntityService");

            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                //Get results
                NaturalServiceEntityService.NaturalServiceCollection result = proxy.FindNaturalServicesByAnimalNumber( AnimalNumber, null );

                Assert.IsNotNull( result );
                Assert.IsTrue( result.Count &gt; 0 );
                Assert.AreEqual( AnimalNumber, result[ 0 ].AnimalNumber );

                Debug.WriteLine( "Number of returned Natural services: " + result.Count, "Result" );
            }
            catch( Exception ex )
            {
                Debug.WriteLine( ex.Message, "Exception" );
                throw;
            }
            finally
            {
                if( proxy.State != CommunicationState.Faulted )
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.NaturalServiceEntityService.FindNaturalServicesByHerdNumber(DLBR.DCF.KDB.MessageContracts.NaturalMatingEntityService.FindNaturalServicesByHerdNumberRequest)">
      <summary>
        <h1>Functional Description</h1>
            Find a number of NaturalServices by herd number
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>HerdNumber</td><td>yes</td><td>&gt;0</td><td>The herd number where the NaturalService animal belong to</td></tr><tr><td>AnimalType</td><td>yes</td><td>Code&gt;0</td><td>The type of animal, e.g. Cattle.</td></tr><tr><td>FromDate</td><td></td><td></td><td>If specified only NaturalServices after the specified date is returned. 
            If not specified all NaturalServices matching the other criteria’s is returned. If this parameter is set also the “ToDate” must be set.</td></tr><tr><td>ToDate</td><td>(yes)</td><td></td><td>If specified only NaturalServices before the specified date is returned. 
            This parameter is required if “FromDate” is specified.</td></tr><tr><td>RequestedCount</td><td></td><td></td><td>If specified the operation only returns the specified number of NaturalServices in the herd, sorted by date, newest first. 
            If not specified all NaturalServices in the in the specified herd is returned.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>NaturalServiceCollection</td><td>A collection of NaturalServices</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.NaturalMatingEntityService.FindNaturalServicesByHerdNumberRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.NaturalMatingEntityService.FindNaturalServicesByHerdNumberResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            NaturalServiceEntityServiceContractClient proxy = new NaturalServiceEntityServiceContractClient("NaturalServiceEntityService");

            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                AnimalType animalType = new AnimalType { Code = 12 };

                //Get results
                NaturalServiceEntityService.NaturalServiceCollection result= proxy.FindNaturalServicesByHerdNumber( animalType, null, HerdNumber, null, null );

                Assert.IsNotNull( result );
                Assert.IsTrue( result.Count &gt; 0 );
                Assert.AreEqual( HerdNumber, result[ 0 ].HerdNumber );

                Debug.WriteLine( "Number of returned Natural services: " + result.Count, "Result" );
            }

            catch( Exception ex )
            {
                Debug.WriteLine( ex.Message, "Exception" );
                throw;
            }
            finally
            {
                if( proxy.State != CommunicationState.Faulted )
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.NaturalServiceEntityService.BatchRegisterNaturalMatings(DLBR.DCF.KDB.MessageContracts.NaturalMatingEntityService.BatchRegisterNaturalMatingsRequest)">
      <summary>
        <h1>Functional Description</h1>
            Batch Register a list of <see cref="T:DLBR.DCF.KDB.DataContracts.NaturalMatingService.NaturalService" /> entiies.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>NaturalMatingsToRegister</td><td>yes</td><td>&gt;0</td><td>A list of <see cref="T:DLBR.DCF.KDB.DataContracts.NaturalMatingService.NaturalService" /> entities to register. Set Id and LastUpdate to null.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>NaturalMatingsRegistered</td><td>List of <see cref="T:DLBR.DCF.KDB.DataContracts.NaturalMatingService.NaturalService" /> entities registered</td><td>NaturalMatingsFailedToRegister</td><td>List of <see cref="T:DLBR.DCF.KDB.DataContracts.NaturalMatingService.NaturalService" /> entities that failed to register</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.NaturalMatingEntityService.BatchRegisterNaturalMatingsRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.NaturalMatingEntityService.BatchRegisterNaturalMatingsResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>Method BatchRegisterNaturalMatings not found in class ..\tests\DLBR.DCF.KDB.IntegrationTests\NaturalServiceEntityServiceTest.cs</code></example>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.ReportingServices.ReportingServicesCustomCredentials">
      <summary>
            Summary description for ReportingServicesCustomCredentials
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.ReportingServices.ReportingServicesCustomCredentials.GetFormsCredentials(System.Net.Cookie@,System.String@,System.String@,System.String@)">
      <summary>
            The get forms credentials.
            </summary>
      <param name="authCookie">
            The auth cookie.
            </param>
      <param name="userName">
            The user name.
            </param>
      <param name="password">
            The password.
            </param>
      <param name="authority">
            The authority.
            </param>
      <returns>
            The get forms credentials.
            </returns>
    </member>
    <member name="P:DLBR.DCF.KDB.ServiceImplementation.ReportingServices.ReportingServicesCustomCredentials.ImpersonationUser">
      <summary>
              Gets ImpersonationUser.
            </summary>
    </member>
    <member name="P:DLBR.DCF.KDB.ServiceImplementation.ReportingServices.ReportingServicesCustomCredentials.NetworkCredentials">
      <summary>
              Gets NetworkCredentials.
            </summary>
    </member>
    <member name="P:DLBR.DCF.KDB.ServiceImplementation.ReportingServices.ReportingServicesCustomCredentials.ReportingServicesNetworkCredentials">
      <summary>
              Gets ReportingServicesNetworkCredentials.
            </summary>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.ReportingServices.ReportingServicesHelper">
      <summary></summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.ReportingServices.ReportingServicesHelper.ConvertToStringArray(Microsoft.Reporting.WebForms.ReportParameterInfoCollection)">
      <summary>
            The convert to string array.
            </summary>
      <param name="parameters">
            The parameters.
            </param>
      <returns></returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.ReportingServices.ReportingServicesHelper.GetAvailableReportParameters(Microsoft.Reporting.WebForms.ServerReport)">
      <summary>
            The get available report parameters.
            </summary>
      <param name="serverReport">
            The server report.
            </param>
      <returns>
            The get available report parameters.
            </returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.ReportingServices.ReportingServicesHelper.ReadQueryStringParms(System.Web.UI.Page)">
      <summary>
            The read query string parms.
            </summary>
      <returns></returns>
      <exception cref="T:System.Exception"></exception>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.ReportingServices.ReportingServicesHelper.ReadQueryStringValue(System.Web.UI.Page,System.String,System.Boolean)">
      <summary>
            The read query string value.
            </summary>
      <param name="page"></param>
      <param name="name">The name.</param>
      <param name="defaultToEmptyString"></param>
      <returns>
            The read query string value.
            </returns>
      <exception cref="T:System.ArgumentNullException"></exception>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.ReportingServices.ReportServerConnectionProvider">
      <summary>
            This class exposes methods used by the ReportViewer http handler (ReportViewerWebControl.axd) to retrieve configuration information
            When the ASP.NET session is not available, ReportServerURL and Timeout must be retrieved on each postback
            The ReportServerConnectionProvider object is instantiated automatically - see Web.config appSettings, key = "ReportViewerServerConnection"
            </summary>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.RYKInvoiceEntityService">
      <summary>
        <h1>General</h1>
        <p>
            The following URIs specifies the location of the service in the production- and production test environment. 
            By default services in both the production and the production test environment uses the production data stores. The alternative URIs, which uses the test data stores (Medio), may be used for testing purposes.
            Please note that service versions might differ between the production- and production test environments. Before you begin using the service, please consult the person responsible as described in section 3.7 – Responsibility assignment.
            </p>
        <p>
          <b>Production URL:</b>
          <a href="http://prod.dcf.ws.dlbr.dk/DCFServices/RYKInvoiceEntityService.svc">http://prod.dcf.ws.dlbr.dk/DCFServices/RYKInvoiceEntityService.svc</a>
        </p>
        <p>
          <b>Accept test URL:</b>
          <a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/RYKInvoiceEntityService.svc">http://accepttest.dcf.ws.dlbr.dk/DCFServices/RYKInvoiceEntityService.svc</a>
        </p>
        <h1>Web Service Description</h1>
            The machine-readable description in the form of a WSDL document can be obtained by querying the following URI’s.
            <p><b>Production WSDL:</b><a href="http://prod.dcf.ws.dlbr.dk/DCFServices/RYKInvoiceEntityService.svc?wsdl">http://prod.dcf.ws.dlbr.dk/DCFServices/RYKInvoiceEntityService.svc?wsdl</a></p><p><b>Accept test WSDL:</b><a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/RYKInvoiceEntityService.svc?wsdl">http://accepttest.dcf.ws.dlbr.dk/DCFServices/RYKInvoiceEntityService.svc?wsdl</a></p><h1>Endpoints</h1>
            For information regarding endpoints, see topic 'Endpoints available in DCF Services'
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.RYKInvoiceEntityService.GetHerds(DLBR.DCF.KDB.MessageContracts.GetRYKHerdsRequest)">
      <summary>
        <h1>Functional Description</h1>
             Returns a list of all Herds for current user (CPRNO or CVRNO used to identify).
             <h1>Notes</h1><table><tr><td>Metode i KVDB:</td></tr><tr><td></td></tr><tr><td>DCF_SERVICES.V_BESAETNINGSLISTE_RYK eller DCF_SERVICES.V_BESAETNINGSLISTE_VFL</td></tr><tr><td></td></tr><tr><td>Indeholder felterne: </td></tr><tr><td>Besnr (number (0,0)</td></tr><tr><td>Dyreart (Float (2))</td></tr><tr><td>Dyrearttekst (Nvarchar2(40))</td></tr><tr><td>Cvrnr (Number(0,0))</td></tr><tr><td>Cprnr (Number(0,0))</td></tr><tr><td>Besid(Number(0,0))</td></tr></table><h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>CPRNO</td><td></td><td></td><td>CPR no for user (DLI login)</td></tr><tr><td>CVRNO</td><td></td><td></td><td>CVR no for user</td></tr><tr><td>SystemIdent</td><td></td><td></td><td>RYK (null) eller VFL</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>Result</td><td>A collection of the <see cref="T:DLBR.DCF.KDB.DataContracts.HerdInfo" /> objects found.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetRYKHerdsRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetRYKHerdsResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
             General example...
             <code>            var proxy = new RYKInvoiceEntityServiceContractClient("RYKInvoiceEntity_Federation_Adfs");
            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID_RYKINVOICE;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD_RYKINVOICE;

                HerdInfoCollection collection = proxy.GetHerds(0, 30135679, "RYK");

                Assert.IsNotNull(collection);
                Assert.IsTrue(collection.Count &gt; 0, "Expected number of herds &gt; 0");
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.RYKInvoiceEntityService.GetInvoices(DLBR.DCF.KDB.MessageContracts.GetRYKInvoicesRequest)">
      <summary>
        <h1>Functional Description</h1>
             Returns a list of all Invoices, including appendices for the current user. If HerdID is null all invoices for currents user is returned 
             (CPRNO or CVRNO is used to identify the invoices)
             
             <h1>Notes</h1><table><tr><td>Metode i KVDB:</td></tr><tr><td></td></tr><tr><td>DCF_SERVICES.fpipe_offaktguibilag_liste</td></tr><tr><td>Input (cvrno, cprno, besnr, systemIdent(RYK eller Viking))</td></tr><tr><td></td></tr><tr><td>Indeholder felterne: </td></tr><tr><td>Fakturaflag</td></tr><tr><td>Bilagflag</td></tr><tr><td>Rapport</td></tr><tr><td>Fakdato</td></tr><tr><td>Forening</td></tr><tr><td>Besnr</td></tr><tr><td>Dyreart</td></tr><tr><td>Faktnr</td></tr></table><h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>HerdID</td><td></td><td></td><td>HerdID is used to filter the list of invoices returned. If Null all invoices is returned</td></tr><tr><td>CPRNO</td><td></td><td></td><td>CPR no for user (DLI login)</td></tr><tr><td>CVRNO</td><td></td><td></td><td>CVR no for user</td></tr><tr><td>SystemIdent</td><td></td><td></td><td>RYK (null) eller VFL</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>Result</td><td>A collection of the <see cref="T:DLBR.DCF.KDB.DataContracts.InvoiceInfo" /> objects found.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetRYKInvoicesRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetRYKInvoicesResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
             General example...
             <code>            var proxy = new RYKInvoiceEntityServiceContractClient("RYKInvoiceEntity_Federation_Adfs");
            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID_RYKINVOICE;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD_RYKINVOICE;

                InvoiceInfoCollection collection = proxy.GetInvoices(0, 25827880, 0, "RYK");

                Assert.IsNotNull(collection);
                //TODO gbj Create separate tests for RYK and VLF, using different CVRNO
                Assert.IsTrue(collection.Count &gt; 0, "Expected number of herds &gt; 0");
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.RYKInvoiceEntityService.GetSubscriberInvoiceList(DLBR.DCF.KDB.MessageContracts.GetRYKSubscriberInvoiceListRequest)">
      <summary>
        <h1>Functional Description</h1>
             Returns a list of herds with subscriber information.
             
             <h1>Notes</h1><table><tr><td>Metode i KVDB:</td></tr><tr><td></td></tr><tr><td>dcf_services.v_besfakturabeskedvalg_ryk eller dcf_services.v_besfakturabeskedvalg_vfl</td></tr><tr><td></td></tr><tr><td>Indeholder felterne: </td></tr><tr><td>Besnr</td></tr><tr><td>Dyreart</td></tr><tr><td>Bes_id</td></tr><tr><td>Navn</td></tr><tr><td>Email</td></tr><tr><td>Mobil</td></tr><tr><td>Cvr_nr</td></tr><tr><td>Cpr_nr</td></tr><tr><td>Fakpost</td></tr><tr><td>Beskserv</td></tr></table><h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>CPRNO</td><td></td><td></td><td>CPR no for user (DLI login)</td></tr><tr><td>CVRNO</td><td></td><td></td><td>CVR no for user</td></tr><tr><td>SystemIdent</td><td></td><td></td><td>RYK (null) eller VFL</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>Result</td><td>A collection of the <see cref="T:DLBR.DCF.KDB.DataContracts.SubscriberInvoiceInfo" /> objects found.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetRYKSubscriberInvoiceListRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetRYKSubscriberInvoiceListResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
             General example...
             <code>            var proxy = new RYKInvoiceEntityServiceContractClient("RYKInvoiceEntity_Federation_Adfs");
            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID_RYKINVOICE;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD_RYKINVOICE;

                SubscriberInvoiceInfoCollection collection = proxy.GetSubscriberInvoiceList(0, 29498709, "RYK");

                Assert.IsNotNull(collection);
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.RYKInvoiceEntityService.UpdateSubscriberInvoice(DLBR.DCF.KDB.MessageContracts.UpdateRYKSubscriberInvoiceRequest)">
      <summary>
        <h1>Functional Description</h1>
             Update subscriber information for the herd.
             
             <h1>Notes</h1><table><tr><td>Metode i KVDB:</td></tr><tr><td></td></tr><tr><td>DCF_SERVICES.dcf_services.k_fakturabeskedvalg.HND_FAKTURABESKEDVALG</td></tr><tr><td></td></tr><tr><td>Kaldes med følgende parametre:</td></tr><tr><td>Besid</td></tr><tr><td>Dyreart</td></tr><tr><td>Navn</td></tr><tr><td>Email</td></tr><tr><td>Mobil</td></tr><tr><td>FakPost (1, hvis faktura er fravalgt)</td></tr><tr><td>BeskServ (1, hvis beskedservice er tilvalgt)</td></tr><tr><td>SystemIdent(RYK eller Viking)</td></tr></table><h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>Subscriber</td><td>yes</td><td></td><td>An object containing all the information for updating a subscription to a given herd id.</td></tr><tr><td>SystemIdent</td><td></td><td></td><td>RYK (null) eller VFL</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>Result</td><td>True if created else false.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.UpdateRYKSubscriberInvoiceRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.UpdateRYKSubscriberInvoiceResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
             General example... N/A
             </example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.RYKInvoiceEntityService.GetSubscriberContactList(DLBR.DCF.KDB.MessageContracts.GetRYKSubscriberContactListRequest)">
      <summary>
        <h1>Functional Description</h1>
             Returns a list of all subscriber contact list associated with DLI user
             
             <h1>Notes</h1><table><tr><td>Metode i KVDB:</td></tr><tr><td></td></tr><tr><td>DCF_SERVICES.v_besbeskedserviceopl</td></tr><tr><td></td></tr><tr><td>Indeholder felterne: </td></tr><tr><td>Besid</td></tr><tr><td>Navn</td></tr><tr><td>Email</td></tr><tr><td>Mobil</td></tr><tr><td>Cvrnr</td></tr><tr><td>Cprnr</td></tr><tr><td>besnr</td></tr><tr><td>dyreart</td></tr></table><h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>CPRNO</td><td></td><td></td><td>CPR no for user (DLI login)</td></tr><tr><td>CVRNO</td><td></td><td></td><td>CVR no for user</td></tr><tr><td>SystemIdent</td><td></td><td></td><td>RYK (null) eller VFL</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>Result</td><td>A collection of the <see cref="T:DLBR.DCF.KDB.DataContracts.SubscriberContactInfo" /> objects found.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetRYKSubscriberContactListRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetRYKSubscriberContactListResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
             General example...
             <code>            var proxy = new RYKInvoiceEntityServiceContractClient("RYKInvoiceEntity_Federation_Adfs");
            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID_RYKINVOICE;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD_RYKINVOICE;

                SubscriberContactInfoCollection collection = proxy.GetSubscriberContactList(0, TestUtil.CVR_NUMBER, "RYK");

                Assert.IsNotNull(collection);
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.RYKInvoiceEntityService.GetAppendixPDF(DLBR.DCF.KDB.MessageContracts.GetRYKAppendixPDFRequest)">
      <summary>
        <h1>Functional Description</h1>
             Returns the Appendix for the invoice.
             
             <h1>Notes</h1><table><tr><td>Metode i KVDB:</td></tr><tr><td></td></tr><tr><td>DCF_SERVICES.fpipe.offaktguibilag_bilag</td></tr><tr><td></td></tr><tr><td>Indeholder felterne: </td></tr><tr><td>Id</td></tr><tr><td>Pdfdata (BLOB)</td></tr></table><h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>ID</td><td>yes</td><td></td><td>ID to identified the actual appendix PDF In DB</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>PDFDocument</td><td>A link to the PDF document.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetRYKAppendixPDFRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetRYKAppendixPDFResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
             General example...
             <code>            var proxy = new RYKInvoiceEntityServiceContractClient("RYKInvoiceEntity_Federation_Adfs");
            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID_RYKINVOICE;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD_RYKINVOICE;

                string documentlink = proxy.GetAppendixPDF(551201);

                Assert.IsNotNull(documentlink);
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.RYKInvoiceEntityService.GetInvoicePDF(DLBR.DCF.KDB.MessageContracts.GetRYKInvoicesPDFRequest)">
      <summary>
        <h1>Functional Description</h1>
             Returns the invoice in PDF format.
             
             <h1>Notes</h1><table><tr><td>Metode i KVDB:</td></tr><tr><td></td></tr><tr><td>DCF_SERVICES.fpipe_offaktguibilag_faktura</td></tr><tr><td></td></tr><tr><td>Indeholder felterne: </td></tr><tr><td>Id</td></tr><tr><td>Pdfdata (BLOB)</td></tr></table><h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>ID</td><td>yes</td><td></td><td>ID to identified the actual invoice PDF In DB </td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>PDFDocument</td><td>A link to the PDF document.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetRYKInvoicesPDFRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetRYKInvoicesPDFResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
             General example...
             <code>            var proxy = new RYKInvoiceEntityServiceContractClient("RYKInvoiceEntity_Federation_Adfs");
            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID_RYKINVOICE;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD_RYKINVOICE;

                string documentlink = proxy.GetInvoicePDF(551201);

                Assert.IsNotNull(documentlink);
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.SemenInventoryEntityService">
      <summary>
        <h1>General</h1>
        <p>
            The following URIs specifies the location of the service in the production- and production test environment. 
            By default services in both the production and the production test environment uses the production data stores. The alternative URIs, which uses the test data stores (Medio), may be used for testing purposes.
            Please note that service versions might differ between the production- and production test environments. Before you begin using the service, please consult the person responsible as described in section 3.7 – Responsibility assignment.
            </p>
        <p>
          <b>Production URL:</b>
          <a href="http://prod.dcf.ws.dlbr.dk/DCFServices/SemenInventoryEntityService.svc">http://prod.dcf.ws.dlbr.dk/DCFServices/SemenInventoryEntityService.svc</a>
        </p>
        <p>
          <b>Accept test URL:</b>
          <a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/SemenInventoryEntityService.svc">http://accepttest.dcf.ws.dlbr.dk/DCFServices/SemenInventoryEntityService.svc</a>
        </p>
        <h1>Web Service Description</h1>
            The machine-readable description in the form of a WSDL document can be obtained by querying the following URI’s.
            <p><b>Production WSDL:</b><a href="http://prod.dcf.ws.dlbr.dk/DCFServices/SemenInventoryEntityService.svc?wsdl">http://prod.dcf.ws.dlbr.dk/DCFServices/SemenInventoryEntityService.svc?wsdl</a></p><p><b>Accept test WSDL:</b><a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/SemenInventoryEntityService.svc?wsdl">http://accepttest.dcf.ws.dlbr.dk/DCFServices/SemenInventoryEntityService.svc?wsdl</a></p><h1>Endpoints</h1>
            For information regarding endpoints, see topic 'Endpoints available in DCF Services'
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.SemenInventoryEntityService.RegisterSemenStockTransfer(DLBR.DCF.KDB.MessageContracts.RegisterSemenStockTransferRequest)">
      <summary>
        <h1>Functional Description</h1>
            Register a new semen stock sale or delivery
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>HerdBookNumber</td><td>yes</td><td>&gt;0</td><td>The herd book number where the semen stock belongs</td></tr><tr><td>InseminationProduct</td><td>yes</td><td>Not null. Code &gt;0</td><td>The insemination product. E.g. Gender classified bull</td></tr><tr><td>BucketNumber</td><td>yes</td><td>&gt;0</td><td>The bucket number (Inseminator number) where the semen stock belongs.</td></tr><tr><td>DateOfPortionDelivery</td><td>yes</td><td></td><td>The date of portion delivery</td></tr><tr><td>HerdNumber</td><td>yes</td><td></td><td>Can be set if the portion is reserved for a specific herd</td></tr><tr><td>AnimalType</td><td>no</td><td></td><td>The animal type of the HerdNumber. Does only need to be set, if ReservedForHerdNumber is set.</td></tr><tr><td>DeliveredPortions</td><td>yes</td><td></td><td>The amount of portions delivered.</td></tr><tr><td>Price</td><td>no</td><td>Requires HerdNumber</td><td>The Price</td></tr><tr><td>Freight</td><td>no</td><td></td><td>Freight</td></tr><tr><td>IsTransfer</td><td>yes</td><td></td><td>Transfer or sale</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>SemenStock</td><td>The newly registered <see cref="T:DLBR.DCF.KDB.DataContracts.SemenStock" /> object</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.RegisterSemenStockRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.RegisterSemenStockResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>Method RegisterSemenStockTransfer not found in class ..\tests\DLBR.DCF.KDB.IntegrationTests\SemenInventoryEntityServiceTest.cs</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.SemenInventoryEntityService.RegisterSemenStock(DLBR.DCF.KDB.MessageContracts.RegisterSemenStockRequest)">
      <summary>
        <h1>Functional Description</h1>
            Register a new semen stock
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>HerdBookNumber</td><td>yes</td><td>&gt;0</td><td>The herd book number where the semen stock belongs</td></tr><tr><td>InseminationProduct</td><td>yes</td><td>Not null. Code &gt;0</td><td>The insemination product. E.g. Gender classified bull</td></tr><tr><td>BucketNumber</td><td>yes</td><td>&gt;0</td><td>The bucket number (Inseminator number) where the semen stock belongs.</td></tr><tr><td>DateOfPortionDelivery</td><td>no</td><td></td><td>The date of portion delivery</td></tr><tr><td>ReservedForHerdNumber</td><td>no</td><td></td><td>Can be set if the portion is reserved for a specific herd</td></tr><tr><td>AnimalType</td><td>no</td><td></td><td>The animal type of the ReservedForHerdNumber. Does only need to be set, if ReservedForHerdNumber is set.</td></tr><tr><td>SpentPortions</td><td>no</td><td></td><td>The amount of portions spent. Can be negative. If null, the amount is left as it is.</td></tr><tr><td>WastedPortions</td><td>no</td><td></td><td>The amount of portions wasted. Can be negative. If null, the amount is left as it is.</td></tr><tr><td>CorrectedPortions</td><td>no</td><td></td><td>The amount of corrected portions. Can be negative. If null, the amount is left as it is.</td></tr><tr><td>TransferredPortions</td><td>no</td><td></td><td>The amount of transferred portions. Can be negative. If null, the amount is left as it is.</td></tr><tr><td>Price</td><td>no</td><td>Requires ReservedForHerdNumber</td><td>The Price</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>SemenStock</td><td>The newly registered <see cref="T:DLBR.DCF.KDB.DataContracts.SemenStock" /> object</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.RegisterSemenStockRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.RegisterSemenStockResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            SemenInventoryEntityServiceContractClient client = new SemenInventoryEntityServiceContractClient("SemenInventoryEntityService");

            try
            {
                client.ClientCredentials.UserName.UserName = TestUtil.USER_ID_NAVSERVICE;
                client.ClientCredentials.UserName.Password = TestUtil.PASSWORD_NAVSERVICE;

                long bucketNumber = 14996;

                InseminationProduct inseminationProduct = new InseminationProduct();
                inseminationProduct.Code = 10;

                AnimalType animalType = new AnimalType() {Code = 12};

                //Register 
                SemenStock semenStock = client.RegisterSemenStock(animalType, bucketNumber, null, new DateTime(2013, 1, 17), 31456, inseminationProduct, null, null, null, 50, null);

            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message, "RegisterSemenStockTest");
                throw;
            }
            finally
            {
                if (client.State != CommunicationState.Faulted)
                    client.Close();
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.SemenInventoryEntityService.UpdateSemenStock(DLBR.DCF.KDB.MessageContracts.UpdateSemenStockRequest)">
      <summary>
        <h1>Functional Description</h1>
            Updates a existing semen stock
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>SemenStock</td><td>yes</td><td></td><td>The <see cref="T:DLBR.DCF.KDB.DataContracts.SemenStock" /> object to update</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>SemenStock</td><td>The updated <see cref="T:DLBR.DCF.KDB.DataContracts.SemenStock" /> object</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.UpdateSemenStockRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.UpdateSemenStockResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            SemenInventoryEntityServiceContractClient client = new SemenInventoryEntityServiceContractClient("SemenInventoryEntityService");

            try
            {
                client.ClientCredentials.UserName.UserName = TestUtil.USER_ID_INSEMINATOR;
                client.ClientCredentials.UserName.Password = TestUtil.PASSWORD_INSEMINATOR;

                DateTime fromDate = new DateTime( 2008, 05, 20 );
                DateTime toDate =  new DateTime( 2013, 01, 21 );

                // find
                SemenStockCollection result = client.FindSemenStocksByHerdBookNumber( fromDate, 36689, null, false, null, 1, toDate );

                Assert.IsNotNull( result );
                Assert.IsTrue( result.Count == 1 );

                SemenStock semenStock = result[ 0 ];

                // reset
                if( semenStock.TransferredPortions.HasValue )
                    semenStock.TransferredPortions = -semenStock.TransferredPortions;
                if( semenStock.SpentPortions.HasValue )
                    semenStock.SpentPortions = -semenStock.SpentPortions;
                if( semenStock.WastedPortions.HasValue )
                    semenStock.WastedPortions = -semenStock.WastedPortions;
                if( semenStock.CorrectedPortions.HasValue )
                    semenStock.CorrectedPortions = -semenStock.CorrectedPortions;

                client.UpdateSemenStock( ref semenStock );

                Assert.IsNotNull( semenStock );
                Assert.AreEqual( null, semenStock.TransferredPortions );
                Assert.AreEqual( null, semenStock.SpentPortions );
                Assert.AreEqual( null, semenStock.WastedPortions );
                Assert.AreEqual( null, semenStock.CorrectedPortions );

                // update
                semenStock.TransferredPortions = 10;
                semenStock.SpentPortions = 5;
                semenStock.WastedPortions = 2;
                semenStock.CorrectedPortions = 1;

                client.UpdateSemenStock( ref semenStock );

                Assert.IsNotNull( semenStock );
                Assert.AreEqual( 10, semenStock.TransferredPortions );
                Assert.AreEqual( 5, semenStock.SpentPortions );
                Assert.AreEqual( 2, semenStock.WastedPortions );
                Assert.AreEqual( 1, semenStock.CorrectedPortions );
            }
            catch( Exception ex )
            {
                Debug.WriteLine( ex.Message, "Exception" );
                throw;
            }
            finally
            {
                if( client.State != CommunicationState.Faulted )
                {
                    client.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.SemenInventoryEntityService.FindSemenStocksByHerdNumber(DLBR.DCF.KDB.MessageContracts.FindSemenStocksByHerdNumberRequest)">
      <summary>
        <h1>Functional Description</h1>
            Find a number of semen stocks by herd number
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>HerdNumber</td><td>yes</td><td>&gt;0</td><td>The herd number to get semen stocks by</td></tr><tr><td>AnimalType</td><td>yes</td><td>Not null. Code &gt;0</td><td>The animal type of the herd to get semen stocks by</td></tr><tr><td>InseminationProduct</td><td>no</td><td>Code &gt;0</td><td>Can be set if search is needed by insemination product. E.g. Gender classified bull</td></tr><tr><td>FromDate</td><td>(yes)</td><td></td><td>If specified only semen stocks after the specified date is returned. If not specified all semen stocks matching the other criteria’s is returned. If this parameter is set, the “ToDate” must be set.</td></tr><tr><td>ToDate</td><td>(yes)</td><td></td><td>If specified only semen stocks before the specified date is returned. This parameter is required if “FromDate” is specified.</td></tr><tr><td>RequestedCount</td><td></td><td></td><td>If specified the operation only returns the specified number of semen stocks in the herd, sorted by date, newest first. If not specified all semen stocks in the specified herd is returned.</td></tr><tr><td>IsStocked</td><td></td><td></td><td>If true the operation only returns semen stocks that matches the other criteria’s and where ActualPortionQuantity &gt; 0. If false the operation returns semen stocks that matches the other criteria’s regardless of the value of ActualPortionQuantity.</td></tr><tr><td>IsTransfer</td><td>no</td><td></td><td>Transfer or sale (default sale)</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>SemenStockCollection</td><td>A collection of <see cref="T:DLBR.DCF.KDB.DataContracts.SemenStock" /> objects</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindSemenStocksByHerdNumberRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindSemenStocksByHerdNumberResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            SemenInventoryEntityServiceContractClient client = new SemenInventoryEntityServiceContractClient("SemenInventoryEntityService");

            try
            {
                client.ClientCredentials.UserName.UserName = TestUtil.USER_ID_INSEMINATOR;
                client.ClientCredentials.UserName.Password = TestUtil.PASSWORD_INSEMINATOR;

                AnimalType animalType = new AnimalType { Code = 12 };
                SemenStockCollection result = client.FindSemenStocksByHerdNumber( animalType, null, TestUtil.HERD_NUMBER, null, false, null, null, null );

                Assert.IsNotNull( result );
                result.Should().Contain(s =&gt; s.Price != null);
            }
            catch( Exception ex )
            {
                Debug.WriteLine( ex.Message );
                throw;
            }
            finally
            {
                if( client.State != CommunicationState.Faulted )
                {
                    client.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.SemenInventoryEntityService.FindSemenStocksByInseminatorNumber(DLBR.DCF.KDB.MessageContracts.FindSemenStocksByInseminatorNumberRequest)">
      <summary>
        <h1>Functional Description</h1>
            Find a number of semen stocks by inseminator number
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>InseminatorNumber</td><td>yes</td><td>&gt;0</td><td>The inseminator number to get semen stocks by</td></tr><tr><td>InseminationProduct</td><td>no</td><td>Code &gt;0</td><td>Can be set if search is needed by insemination product. E.g. Gender classified bull</td></tr><tr><td>FromDate</td><td>(yes)</td><td></td><td>If specified only semen stocks after the specified date is returned. If not specified all semen stocks matching the other criteria’s is returned. If this parameter is set, the “ToDate” must be set.</td></tr><tr><td>ToDate</td><td>(yes)</td><td></td><td>If specified only semen stocks before the specified date is returned. This parameter is required if “FromDate” is specified.</td></tr><tr><td>RequestedCount</td><td></td><td></td><td>If specified the operation only returns the specified number of semen stocks in the herd, sorted by date, newest first. If not specified all semen stocks in the specified herd is returned.</td></tr><tr><td>IsStocked</td><td></td><td></td><td>If true the operation only returns semen stocks that matches the other criteria’s and where ActualPortionQuantity &gt; 0. If false the operation returns semen stocks that matches the other criteria’s regardless of the value of ActualPortionQuantity.</td></tr><tr><td>IsTransfer</td><td>no</td><td></td><td>Transfer or sale (default sale)</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>SemenStockCollection</td><td>A collection of <see cref="T:DLBR.DCF.KDB.DataContracts.SemenStock" /> objects</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindSemenStocksByInseminatorNumberRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindSemenStocksByInseminatorNumberResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            SemenInventoryEntityServiceContractClient client = new SemenInventoryEntityServiceContractClient("SemenInventoryEntityService");

            try
            {
                client.ClientCredentials.UserName.UserName = TestUtil.USER_ID_INSEMINATOR;
                client.ClientCredentials.UserName.Password = TestUtil.PASSWORD_INSEMINATOR;

                SemenStockCollection result = client.FindSemenStocksByInseminatorNumber( null, null, 6607, false, null, null, null );

                result.Should().Contain(s =&gt; s.Price != null);
                Assert.IsNotNull(result);
                var result2 =
                    result.GroupBy(i =&gt; i.Id)
                          .Where(i1 =&gt; i1.Count() &gt; 1)
                          .ToList();
                result2.Should().BeEmpty();
            }
            catch( Exception ex )
            {
                Debug.WriteLine( ex.Message );
                throw;
            }
            finally
            {
                if( client.State != CommunicationState.Faulted )
                {
                    client.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.SemenInventoryEntityService.FindSemenStocksByHerdBookNumber(DLBR.DCF.KDB.MessageContracts.FindSemenStocksByHerdBookNumberRequest)">
      <summary>
        <h1>Functional Description</h1>
            Find a number of semen stocks by herd book number
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>HerdBookNumber</td><td>yes</td><td>&gt;0</td><td>The herd book number to get semen stocks by</td></tr><tr><td>InseminationProduct</td><td>no</td><td>Code &gt;0</td><td>Can be set if search is needed by insemination product. E.g. Gender classified bull</td></tr><tr><td>FromDate</td><td>(yes)</td><td></td><td>If specified only semen stocks after the specified date is returned. If not specified all semen stocks matching the other criteria’s is returned. If this parameter is set, the “ToDate” must be set.</td></tr><tr><td>ToDate</td><td>(yes)</td><td></td><td>If specified only semen stocks before the specified date is returned. This parameter is required if “FromDate” is specified.</td></tr><tr><td>RequestedCount</td><td></td><td></td><td>If specified the operation only returns the specified number of semen stocks in the herd, sorted by date, newest first. If not specified all semen stocks in the specified herd is returned.</td></tr><tr><td>IsStocked</td><td></td><td></td><td>If true the operation only returns semen stocks that matches the other criteria’s and where ActualPortionQuantity &gt; 0. If false the operation returns semen stocks that matches the other criteria’s regardless of the value of ActualPortionQuantity.</td></tr><tr><td>IsTransfer</td><td>no</td><td></td><td>Transfer or sale (default sale)</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>SemenStockCollection</td><td>A collection of <see cref="T:DLBR.DCF.KDB.DataContracts.SemenStock" /> objects</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindSemenStocksByHerdBookNumberRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindSemenStocksByHerdBookNumberResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            SemenInventoryEntityServiceContractClient client = new SemenInventoryEntityServiceContractClient("SemenInventoryEntityService");

            try
            {
                client.ClientCredentials.UserName.UserName = TestUtil.USER_ID_INSEMINATOR;
                client.ClientCredentials.UserName.Password = TestUtil.PASSWORD_INSEMINATOR;

                SemenStockCollection result = client.FindSemenStocksByHerdBookNumber(null, 6246, null, false, null, null, null);

                Assert.IsNotNull(result);
                result.Should().Contain(s =&gt; s.Price != null);
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
                throw;
            }
            finally
            {
                if (client.State != CommunicationState.Faulted)
                {
                    client.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.SemenInventoryEntityService.GetSemenStockById(DLBR.DCF.KDB.MessageContracts.GetSemenStockByIdRequest)">
      <summary>
        <h1>Functional Description</h1>
            Find a SemenStock by Id
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>SemenStockId</td><td>yes</td><td>&gt;0</td><td>The Id of the wanted Semenstock</td></tr><tr><td>IsTransfer</td><td>no</td><td></td><td>Transfer or sale (default sale)</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>SemenStock</td><td>The returned <see cref="T:DLBR.DCF.KDB.DataContracts.SemenStock" /> object</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetSemenStockByIdRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetSemenStockByIdResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            SemenInventoryEntityServiceContractClient client = new SemenInventoryEntityServiceContractClient("SemenInventoryEntityService");

            try
            {
                client.ClientCredentials.UserName.UserName = TestUtil.USER_ID_INSEMINATOR;
                client.ClientCredentials.UserName.Password = TestUtil.PASSWORD_INSEMINATOR;

                SemenStock result = client.GetSemenStockById( null, m_SemenStockId );

                Assert.IsNotNull( result );
                Assert.AreEqual( m_SemenStockId, result.Id );
                Assert.AreEqual( m_SemenStockBucketNumber, result.BucketNumber );
                Assert.AreEqual( m_HerdBookNumber, result.HerdBookNumber );
                // Make sure that bullname is part of returning SemenStock datacontract
                Assert.IsInstanceOf&lt;string&gt;( result.BullName );
                result.Price.Should().NotBe(null);

                Debug.WriteLine( "Returned SemenStock Id: " + result.Id, "Result" );

            }
            catch( Exception ex )
            {
                Debug.WriteLine( ex.Message );
                throw;
            }
            finally
            {
                if( client.State != CommunicationState.Faulted )
                {
                    client.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.SemenInventoryEntityService.FindSemenStocksByDistrictList(DLBR.DCF.KDB.MessageContracts.FindSemenStocksByDistrictListRequest)">
      <summary>
        <h1>Functional Description</h1>
            Find all SemenStocks from a list of districts
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>DistrictList</td><td>yes</td><td>&gt;0</td><td>List of districts</td></tr><tr><td>OnlyStocksWithPositivePortions</td><td>yes</td><td></td><td>Indicates whether to retrieve positive stocks only</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>SemenStockCollection</td><td>A collection of <see cref="T:DLBR.DCF.KDB.DataContracts.SemenStock" /> objects</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindSemenStocksByDistrictListRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindSemenStocksByDistrictListResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            SemenInventoryEntityServiceContractClient client = new SemenInventoryEntityServiceContractClient("SemenInventoryEntityService");

            try
            {
                client.ClientCredentials.UserName.UserName = TestUtil.USER_ID_INSEMINATOR;
                client.ClientCredentials.UserName.Password = TestUtil.PASSWORD_INSEMINATOR;

                DateTime fromDate = new DateTime( 2008, 05, 20 );
                DateTime toDate =  new DateTime( 2008, 05, 20 );

                // find
                SemenStockCollection result = client.FindSemenStocksByDistrictList(new Collection&lt;long&gt; {10, 11, 12, 13},
                                                                                   true);

                Assert.IsNotNull( result );
                result.Should().Contain(s =&gt; s.Price != null);
                result.Should().OnlyContain(s =&gt; s.District != null);
            }
            catch( Exception ex )
            {
                Debug.WriteLine( ex.Message, "Exception" );
                throw;
            }
            finally
            {
                if( client.State != CommunicationState.Faulted )
                {
                    client.Close();
                }
            }
</code></example>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.VetSampleHealthEntityService">
      <summary>
        <h1>General</h1>
        <p>
            The following URIs specifies the location of the service in the production- and production test environment. 
            By default services in both the production and the production test environment uses the production data stores. The alternative URIs, which uses the test data stores (Medio), may be used for testing purposes.
            Please note that service versions might differ between the production- and production test environments. Before you begin using the service, please consult the person responsible as described in section 3.7 – Responsibility assignment.
            </p>
        <p>
          <b>Production URL:</b>
          <a href="http://prod.dcf.ws.dlbr.dk/DCFServices/VetSampleHealthEntityService.svc">http://prod.dcf.ws.dlbr.dk/DCFServices/VetSampleHealthEntityService.svc</a>
        </p>
        <p>
          <b>Accept test URL:</b>
          <a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/VetSampleHealthEntityService.svc">http://accepttest.dcf.ws.dlbr.dk/DCFServices/VetSampleHealthEntityService.svc</a>
        </p>
        <h1>Web Service Description</h1>
            The machine-readable description in the form of a WSDL document can be obtained by querying the following URI’s.
            <p><b>Production WSDL:</b><a href="http://prod.dcf.ws.dlbr.dk/DCFServices/VetSampleHealthEntityService.svc?wsdl">http://prod.dcf.ws.dlbr.dk/DCFServices/VetSampleHealthEntityService.svc?wsdl</a></p><p><b>Accept test WSDL:</b><a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/VetSampleHealthEntityService.svc?wsdl">http://accepttest.dcf.ws.dlbr.dk/DCFServices/VetSampleHealthEntityService.svc?wsdl</a></p><h1>Endpoints</h1>
            For information regarding endpoints, see topic 'Endpoints available in DCF Services'
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.VetSampleHealthEntityService.FindHerdVetSampleHealthEntitiesByHerdNumber(DLBR.DCF.KDB.MessageContracts.VetSampleHealth.FindHerdVetSampleHealthEntitiesByHerdNumberRequest)">
      <summary>
        <h1>Functional Description</h1>
            Finds a number of PCR <see cref="T:DLBR.DCF.KDB.DataContracts.VetSampleHealth.VetSampleHealth" /> results by herd number.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>HerdNumber</td><td>yes</td><td>&gt; 0</td><td>The herd number from which to find <see cref="T:DLBR.DCF.KDB.DataContracts.VetSampleHealth.VetSampleHealth" /> entities.</td></tr><tr><td>AnimalType</td><td>yes</td><td></td><td>The type of animal, e.g. Cattle.</td></tr><tr><td>VetPCRType</td><td>no</td><td></td><td>If specified the operation only returns <see cref="T:DLBR.DCF.KDB.DataContracts.VetSampleHealth.VetSampleHealth" /> entities with the <see cref="T:DLBR.DCF.KDB.DataContracts.VetSampleHealth.VetPCRType" /> specified. If not specified all <see cref="T:DLBR.DCF.KDB.DataContracts.VetSampleHealth.VetSampleHealth" /> entities on the specified animal is returned.</td></tr><tr><td>FromDate</td><td>(yes)</td><td></td><td>If specified only <see cref="T:DLBR.DCF.KDB.DataContracts.VetSampleHealth.VetSampleHealth" /> entities performed after the specified date is returned. If not specified all <see cref="T:DLBR.DCF.KDB.DataContracts.VetSampleHealth.VetSampleHealth" /> entities matching the other criteria’s is returned. If this parameter is set also the “ToDate” must be set.</td></tr><tr><td>ToDate</td><td>(yes)</td><td></td><td>If specified only <see cref="T:DLBR.DCF.KDB.DataContracts.VetSampleHealth.VetSampleHealth" /> entities performed before the specified date is returned. This parameter is required if “FromDate” is specified. If not specified all <see cref="T:DLBR.DCF.KDB.DataContracts.VetSampleHealth.VetSampleHealth" /> entities matching the other criteria’s is returned for each animal.</td></tr><tr><td>RequestedCount</td><td></td><td></td><td>If specified the operation only returns the specified number of <see cref="T:DLBR.DCF.KDB.DataContracts.VetSampleHealth.VetSampleHealth" /> entities, sorted by date. If not specified all <see cref="T:DLBR.DCF.KDB.DataContracts.VetSampleHealth.VetSampleHealth" /> entities matching the other criteria’s is returned for each animal.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>VetSampleHealthCollection</td><td>A collection of <see cref="T:DLBR.DCF.KDB.DataContracts.VetSampleHealth.VetSampleHealth" /></td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.VetSampleHealth.FindHerdVetSampleHealthEntitiesByHerdNumberRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.VetSampleHealth.FindHerdVetSampleHealthEntitiesByHerdNumberResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            //arrange
            int requestedCount = 5;

            using (var service = new WcfServiceWrapper&lt;VetSampleHealthEntityServiceContract&gt;(tokenDcfIntegrationTest,
                           String.Format("https://{0}/DCFServices/VetSampleHealthEntityService.svc/adfs", Settings.Default.DCF_Hostname)))
            {
                //Act
                var result = service.Channel.FindHerdVetSampleHealthEntitiesByHerdNumber(
                    new FindHerdVetSampleHealthEntitiesByHerdNumberRequest
                    {
                        HerdNumber = herdNumberWithPCR,
                        AnimalType = animalType,
                        VetPCRType = null,
                        FromDate = null,
                        ToDate = null,
                        RequestedCount = requestedCount
                    });

                //Assert
                result.Should().NotBeNull();
                result.VetSampleHealthList.Should().NotBeNull().And.NotBeEmpty();
                result.VetSampleHealthList.Should().OnlyContain(v =&gt; v.AnimalNumber == null);
                result.VetSampleHealthList.Should().OnlyContain(v =&gt; v.HerdNumber == herdNumberWithPCR);
                result.VetSampleHealthList.Should().OnlyContain(v =&gt; v.VetSampleType.Code == 10);//PCR
                result.VetSampleHealthList.Should().OnlyContain(v =&gt; v.VetSampleType.Description.Length &gt; 0);
                result.VetSampleHealthList.Should().OnlyContain(v =&gt; v.VetPCRType.Code == 13 || v.VetPCRType.Code == 14);
                result.VetSampleHealthList.Should().OnlyContain(v =&gt; v.VetPCRType.Description.Length &gt; 0);
                result.VetSampleHealthList.Should().HaveCount(requestedCount);

            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.VetSampleHealthEntityService.FindAnimalVetSampleHealthEntitiesByHerdNumber(DLBR.DCF.KDB.MessageContracts.VetSampleHealth.FindAnimalVetSampleHealthEntitiesByHerdNumberRequest)">
      <summary>
        <h1>Functional Description</h1>
            Finds a number of <see cref="T:DLBR.DCF.KDB.DataContracts.VetSampleHealth.VetSampleHealth" />results by herd number.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>HerdNumber</td><td>yes</td><td>&gt; 0</td><td>The herd number from which to find <see cref="T:DLBR.DCF.KDB.DataContracts.VetSampleHealth.VetSampleHealth" /> entities.</td></tr><tr><td>AnimalType</td><td>yes</td><td></td><td>The type of animal, e.g. Cattle.</td></tr><tr><td>VetSampleType</td><td>no</td><td></td><td>If specified the operation only returns <see cref="T:DLBR.DCF.KDB.DataContracts.VetSampleHealth.VetSampleHealth" /> entities with the <see cref="T:DLBR.DCF.KDB.DataContracts.VetSampleType" /> specified. If not specified all <see cref="T:DLBR.DCF.KDB.DataContracts.VetSampleHealth.VetSampleHealth" /> entities on the specified animal is returned.</td></tr><tr><td>FromDate</td><td>(yes)</td><td></td><td>If specified only <see cref="T:DLBR.DCF.KDB.DataContracts.VetSampleHealth.VetSampleHealth" /> entities performed after the specified date is returned. If not specified all <see cref="T:DLBR.DCF.KDB.DataContracts.VetSampleHealth.VetSampleHealth" /> entities matching the other criteria’s is returned. If this parameter is set also the “ToDate” must be set.</td></tr><tr><td>ToDate</td><td>(yes)</td><td></td><td>If specified only <see cref="T:DLBR.DCF.KDB.DataContracts.VetSampleHealth.VetSampleHealth" /> entities performed before the specified date is returned. This parameter is required if “FromDate” is specified. If not specified all <see cref="T:DLBR.DCF.KDB.DataContracts.VetSampleHealth.VetSampleHealth" /> entities matching the other criteria’s is returned for each animal.</td></tr><tr><td>RequestedCount</td><td></td><td></td><td>If specified the operation only returns the specified number of <see cref="T:DLBR.DCF.KDB.DataContracts.VetSampleHealth.VetSampleHealth" /> entities, sorted by date. If not specified all <see cref="T:DLBR.DCF.KDB.DataContracts.VetSampleHealth.VetSampleHealth" /> entities matching the other criteria’s is returned for each animal.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>VetSampleHealthCollection</td><td>A collection of <see cref="T:DLBR.DCF.KDB.DataContracts.VetSampleHealth.VetSampleHealth" /></td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.VetSampleHealth.FindAnimalVetSampleHealthEntitiesByHerdNumberRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.VetSampleHealth.FindAnimalVetSampleHealthEntitiesByHerdNumberResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            //arrange
            VetSampleType vetSampleType = new VetSampleType { Code = 7 }; //ParaTB
            int requestedCount = 5;

            using (var service = new WcfServiceWrapper&lt;VetSampleHealthEntityServiceContract&gt;(tokenFarmer,
                           String.Format("https://{0}/DCFServices/VetSampleHealthEntityService.svc/adfs", Settings.Default.DCF_Hostname)))
            {
                //Act
                var result = service.Channel.FindAnimalVetSampleHealthEntitiesByHerdNumber(
                    new FindAnimalVetSampleHealthEntitiesByHerdNumberRequest
                    {
                        HerdNumber = herdNumber,
                        AnimalType = animalType,
                        VetSampleType = vetSampleType,
                        FromDate = null,
                        ToDate = null,
                        RequestedCount = requestedCount
                    });

                //Assert
                result.Should().NotBeNull();
                result.VetSampleHealthList.Should().OnlyContain(v =&gt; v.AnimalNumber != null);
                result.VetSampleHealthList.Should().NotBeNull().And.NotBeEmpty();
                result.VetSampleHealthList.Should().OnlyContain(v =&gt; v.HerdNumber == herdNumber);
                result.VetSampleHealthList.Should().OnlyContain(v =&gt; v.VetSampleType.Code == vetSampleType.Code);
                result.VetSampleHealthList.Should().OnlyContain(v =&gt; v.VetPCRType == null);
                result.VetSampleHealthList.Should().HaveCount(requestedCount);

            }
            
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.VetSampleHealthEntityService.FindAnimalVetSampleHealthEntitiesByAnimalNumber(DLBR.DCF.KDB.MessageContracts.VetSampleHealth.FindAnimalVetSampleHealthEntitiesByAnimalNumberRequest)">
      <summary>
        <h1>Functional Description</h1>
            Finds a number of <see cref="T:DLBR.DCF.KDB.DataContracts.VetSampleHealth.VetSampleHealth" /> by animal number.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>AnimalNumber</td><td>yes</td><td>&gt; 0</td><td>The animal number from which to find <see cref="T:DLBR.DCF.KDB.DataContracts.VetSampleHealth.VetSampleHealth" /> entities.</td></tr><tr><td>VetSampleType</td><td>no</td><td></td><td>If specified the operation only returns <see cref="T:DLBR.DCF.KDB.DataContracts.VetSampleHealth.VetSampleHealth" /> entities with the VetSampleType specified. If not specified all <see cref="T:DLBR.DCF.KDB.DataContracts.VetSampleHealth.VetSampleHealth" /> entities on the specified animal is returned.</td></tr><tr><td>FromDate</td><td>(yes)</td><td></td><td>If specified only <see cref="T:DLBR.DCF.KDB.DataContracts.VetSampleHealth.VetSampleHealth" /> entities performed after the specified date is returned. If not specified all <see cref="T:DLBR.DCF.KDB.DataContracts.VetSampleHealth.VetSampleHealth" /> entities matching the other criteria’s is returned. If this parameter is set also the “ToDate” must be set.</td></tr><tr><td>ToDate</td><td>(yes)</td><td></td><td>If specified only <see cref="T:DLBR.DCF.KDB.DataContracts.VetSampleHealth.VetSampleHealth" /> entities performed before the specified date is returned. This parameter is required if “FromDate” is specified. If not specified all <see cref="T:DLBR.DCF.KDB.DataContracts.VetSampleHealth.VetSampleHealth" /> entities matching the other criteria’s is returned for each animal.</td></tr><tr><td>RequestedCount</td><td></td><td></td><td>If specified the operation only returns the specified number of <see cref="T:DLBR.DCF.KDB.DataContracts.VetSampleHealth.VetSampleHealth" /> entities, sorted by date. If not specified all <see cref="T:DLBR.DCF.KDB.DataContracts.VetSampleHealth.VetSampleHealth" /> entities matching the other criteria’s is returned for each animal.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>VetSampleHealthCollection</td><td>A collection of <see cref="T:DLBR.DCF.KDB.DataContracts.VetSampleHealth.VetSampleHealth" /></td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.VetSampleHealth.FindAnimalVetSampleHealthEntitiesByAnimalNumberRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.VetSampleHealth.FindAnimalVetSampleHealthEntitiesByAnimalNumberResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            //arrange
            DateTime fromDate = new DateTime(2013, 4, 1);
            DateTime toDate = new DateTime(2013, 5, 1);
            VetSampleType vetSampleType = new VetSampleType {Code = 7}; //ParaTB
            int requestedCount = 5;

            using (var service = new WcfServiceWrapper&lt;VetSampleHealthEntityServiceContract&gt;(tokenFarmer,
                           String.Format("https://{0}/DCFServices/VetSampleHealthEntityService.svc/adfs", Settings.Default.DCF_Hostname)))
            {
                //Act
                var result = service.Channel.FindAnimalVetSampleHealthEntitiesByAnimalNumber(
                    new FindAnimalVetSampleHealthEntitiesByAnimalNumberRequest
                    {
                        AnimalNumber = animalNumber,
                        VetSampleType = vetSampleType,
                        FromDate = null,
                        ToDate = null,
                        RequestedCount = requestedCount
                    });

                //Assert
                result.Should().NotBeNull();
                result.VetSampleHealthList.Should().NotBeNull().And.NotBeEmpty();
                result.VetSampleHealthList.Should().OnlyContain(v =&gt; v.AnimalNumber == animalNumber);
                //result.VetSampleHealthList.Should().OnlyContain(v =&gt; v.RegisterDate &gt;= fromDate &amp;&amp; v.RegisterDate &lt;= toDate);
                result.VetSampleHealthList.Should().OnlyContain(v =&gt; v.VetSampleType.Code == vetSampleType.Code);
                result.VetSampleHealthList.Should().OnlyContain(v =&gt; v.VetPCRType == null);
                result.VetSampleHealthList.Should().HaveCount(requestedCount);

            }
</code></example>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.WorklistEntityService">
      <summary>
        <h1>General</h1>
        <p>
            The following URIs specifies the location of the service in the production- and production test environment. 
            By default services in both the production and the production test environment uses the production data stores. The alternative URIs, which uses the test data stores (Medio), may be used for testing purposes.
            Please note that service versions might differ between the production- and production test environments. Before you begin using the service, please consult the person responsible as described in section 3.7 – Responsibility assignment.
            </p>
        <p>
          <b>Production URL:</b>
          <a href="http://prod.dcf.ws.dlbr.dk/DCFServices/WorklistEntityService.svc">http://prod.dcf.ws.dlbr.dk/DCFServices/WorklistEntityService.svc</a>
        </p>
        <p>
          <b>Accept test URL:</b>
          <a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/WorklistEntityService.svc">http://accepttest.dcf.ws.dlbr.dk/DCFServices/WorklistEntityService.svc</a>
        </p>
        <h1>Web Service Description</h1>
            The machine-readable description in the form of a WSDL document can be obtained by querying the following URI’s.
            <p><b>Production WSDL:</b><a href="http://prod.dcf.ws.dlbr.dk/DCFServices/WorklistEntityService.svc?wsdl">http://prod.dcf.ws.dlbr.dk/DCFServices/WorklistEntityService.svc?wsdl</a></p><p><b>Accept test WSDL:</b><a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/WorklistEntityService.svc?wsdl">http://accepttest.dcf.ws.dlbr.dk/DCFServices/WorklistEntityService.svc?wsdl</a></p><h1>Endpoints</h1>
            For information regarding endpoints, see topic 'Endpoints available in DCF Services'
            </summary>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.WorklistEntityServiceBase">
      <summary>
            Service Class - WorklistEntityService
            </summary>
      <tocexclude />
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.DryPeriodEntityService">
      <summary>
        <h1>General</h1>
        <p>
            The following URIs specifies the location of the service in the production- and production test environment. 
            By default services in both the production and the production test environment uses the production data stores. The alternative URIs, which uses the test data stores (Medio), may be used for testing purposes.
            Please note that service versions might differ between the production- and production test environments. Before you begin using the service, please consult the person responsible as described in section 3.7 – Responsibility assignment.
            </p>
        <p>
          <b>Production URL:</b>
          <a href="http://prod.dcf.ws.dlbr.dk/DCFServices/DryPeriodEntityService.svc">http://prod.dcf.ws.dlbr.dk/DCFServices/DryPeriodEntityService.svc</a>
        </p>
        <p>
          <b>Accept test URL:</b>
          <a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/DryPeriodEntityService.svc">http://accepttest.dcf.ws.dlbr.dk/DCFServices/DryPeriodEntityService.svc</a>
        </p>
        <h1>Web Service Description</h1>
            The machine-readable description in the form of a WSDL document can be obtained by querying the following URI’s.
            <p><b>Production WSDL:</b><a href="http://prod.dcf.ws.dlbr.dk/DCFServices/DryPeriodEntityService.svc?wsdl">http://prod.dcf.ws.dlbr.dk/DCFServices/DryPeriodEntityService.svc?wsdl</a></p><p><b>Accept test WSDL:</b><a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/DryPeriodEntityService.svc?wsdl">http://accepttest.dcf.ws.dlbr.dk/DCFServices/DryPeriodEntityService.svc?wsdl</a></p><h1>Endpoints</h1>
            For information regarding endpoints, see topic 'Endpoints available in DCF Services'
            </summary>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.DryPeriodEntityServiceBase">
      <summary>
            Service Class - DryPeriodEntityService
            </summary>
      <tocexclude />
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.DryPeriodEntityService.RegisterDryPeriod(DLBR.DCF.KDB.MessageContracts.RegisterDryPeriodRequest)">
      <summary>
        <h1>Functional Description</h1>
            Register a new dry period
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>HerdNumber</td><td>yes</td><td>&gt; 0</td><td>The herd number where the dry period animal belong to </td></tr><tr><td>AnimalNumber</td><td>yes</td><td>&gt; 0</td><td>The animal number of the animal that is in a dry period</td></tr><tr><td>AnimalType</td><td>yes</td><td>&gt; 0</td><td>The type of animal, e.g. Cattle.</td></tr><tr><td>Date</td><td>yes</td><td></td><td>The date where the dry period starts</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>DryPeriod</td><td>The newly registered dry period. See <see cref="T:DLBR.DCF.KDB.DataContracts.DryPeriod" /></td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.RegisterDryPeriodRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.RegisterDryPeriodResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>
            DryPeriodEntityServiceContractClient client = new DryPeriodEntityServiceContractClient("DryPeriodEntityService");

            try
            {
                client.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                client.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                // classifications
                AnimalType animalType = new AnimalType { Code = 12 };

                // The following values of the parameters forces the database to throw an exception.
                client.RegisterDryPeriod(TestUtil.ANIMAL_NUMBER_FOR_TESTHERD, animalType, DateTime.MaxValue, TestUtil.HERD_NUMBER);
            }

            catch (FaultException&lt;OperationFailed&gt; ex)
            {
                Debug.WriteLine(ex.Message, "RegisterDryPeriodTest");

                Assert.IsNotNull(ex.Detail);
                Assert.IsNotNull(ex.Detail.FaultDescription);

                Assert.AreEqual("208", ex.Detail.FaultCode);
                Assert.AreEqual("Dyret findes ikke i besætningen på indberetningsdatoen.", ex.Detail.FaultDescription);
            }

            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message, "RegisterDryPeriodTest");
                throw;
            }
            finally
            {
                if (client.State != CommunicationState.Faulted)
                    client.Close();
            }

</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.DryPeriodEntityService.UpdateDryPeriod(DLBR.DCF.KDB.MessageContracts.UpdateDryPeriodRequest)">
      <summary>
        <h1>Functional Description</h1>
            Updates a existing dry period
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>DryPeriod</td><td>yes</td><td></td><td>The dry period to update</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>DryPeriod</td><td>The updated dry period. See <see cref="T:DLBR.DCF.KDB.DataContracts.DryPeriod" /></td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.UpdateDryPeriodRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.UpdateDryPeriodResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            DryPeriodEntityServiceContractClient client = new DryPeriodEntityServiceContractClient("DryPeriodEntityService");

            try
            {
                client.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                client.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                // classifications
                AnimalType animalType = new AnimalType { Code = 12 };

                // The following values of the attributes forces the database to throw an exception.
                DryPeriod dryPeriod = new DryPeriod();
                dryPeriod.Id = 0;
                dryPeriod.HerdNumber = TestUtil.HERD_NUMBER;
                dryPeriod.AnimalNumber = TestUtil.ANIMAL_NUMBER_FOR_TESTHERD;
                dryPeriod.AnimalType = animalType;
                dryPeriod.Date = DateTime.MaxValue;
                dryPeriod.LastUpdate = DateTime.MaxValue;

                client.UpdateDryPeriod(ref dryPeriod);

            }

            catch (FaultException&lt;OperationFailed&gt; ex)
            {
                Debug.WriteLine(ex.Message, "UpdateDryPeriodTest");

                Assert.IsNotNull(ex.Detail);
                Assert.IsNotNull(ex.Detail.FaultDescription);

                Assert.AreEqual("4182", ex.Detail.FaultCode);
                Assert.AreEqual("Data som skal opdateres/slettes i GOLDNINGER kan ikke findes.", ex.Detail.FaultDescription);
            }

            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message, "UpdateDryPeriodTest");
                throw;
            }
            finally
            {
                if (client.State != CommunicationState.Faulted)
                    client.Close();
            }

</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.DryPeriodEntityService.DeleteDryPeriod(DLBR.DCF.KDB.MessageContracts.DeleteDryPeriodRequest)">
      <summary>
        <h1>Functional Description</h1>
            Deletes a existing dry period
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>DryPeriod</td><td>yes</td><td></td><td>The dry period to delete</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>(none&gt;)</td><td>If deletion is unsuccessful an exception is thrown, otherwise there is no output.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.DeleteDryPeriodRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.DeleteDryPeriodResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            DryPeriodEntityServiceContractClient client = new DryPeriodEntityServiceContractClient("DryPeriodEntityService");

            try
            {
                client.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                client.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                // Classifications
                AnimalType animalType = new AnimalType { Code = 12 };

                // The following values of the attributes forces the database to throw an exception.
                DryPeriod dryPeriod = new DryPeriod();
                dryPeriod.Id = 0;
                dryPeriod.HerdNumber = TestUtil.HERD_NUMBER;
                dryPeriod.AnimalNumber = TestUtil.ANIMAL_NUMBER_FOR_TESTHERD;
                dryPeriod.AnimalType = animalType;
                dryPeriod.Date = DateTime.MaxValue;
                dryPeriod.LastUpdate = DateTime.MaxValue;

                client.DeleteDryPeriod(dryPeriod);
            }

            catch (FaultException&lt;OperationFailed&gt; ex)
            {
                Debug.WriteLine(ex.Message, "DeleteDryPeriodTest");

                Assert.IsNotNull(ex.Detail);
                Assert.IsNotNull(ex.Detail.FaultDescription);

                Assert.AreEqual("4182", ex.Detail.FaultCode);
                Assert.AreEqual("Data som skal opdateres/slettes i GOLDNINGER kan ikke findes.", ex.Detail.FaultDescription);
            }

            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message, "DeleteDryPeriodTest");
                throw;
            }
            finally
            {
                if (client.State != CommunicationState.Faulted)
                    client.Close();
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.DryPeriodEntityService.FindDryPeriodsByHerdNumber(DLBR.DCF.KDB.MessageContracts.FindDryPeriodsByHerdNumberRequest)">
      <summary>
        <h1>Functional Description</h1>
            Find a number of dry periods by herd number
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>HerdNumber</td><td>yes</td><td>&gt; 0</td><td>The herd number to get dry periods by</td></tr><tr><td>AnimalType</td><td>yes</td><td></td><td>The type of animal in the herd, e.g. cattle.</td></tr><tr><td>FromDate</td><td>(yes)</td><td></td><td>If specified only dry periods after the specified date is returned.<br />If not specified all dry periods matching the other criteria’s is returned and only for active animals in the herd.<br />If this parameter is set also the "ToDate" must be set. </td></tr><tr><td>ToDate</td><td>(yes)</td><td></td><td>If specified only dry periods before the specified date is returned.<br />This parameter is required if "FromDate" is specified.</td></tr><tr><td>RequestedCount</td><td></td><td></td><td>If specified the operation only returns the specified number of dry periods in the herd, sorted by date, newest first.<br />If not specified all dry periods in the in the specified herd is returned.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>DryPeriodCollection</td><td>A collection of dry periods. See <see cref="T:DLBR.DCF.KDB.DataContracts.DryPeriod" /></td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindDryPeriodsByHerdNumberRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindDryPeriodsByHerdNumberResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            DryPeriodEntityServiceContractClient client = new DryPeriodEntityServiceContractClient("DryPeriodEntityService");

            try
            {
                client.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                client.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                // Classifications
                AnimalType animalType = new AnimalType { Code = 12 };

                //Get results
                DryPeriodCollection result = client.FindDryPeriodsByHerdNumber(animalType, null, TestUtil.HERD_NUMBER, null, null);

                Assert.IsNotNull(result);
                Assert.IsTrue(result.Count &gt; 0);
                Assert.AreEqual(TestUtil.HERD_NUMBER, result[0].HerdNumber);

                Debug.WriteLine("Number of returned Dry Periods: " + result.Count, "Result");
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message, "Exception");
                throw;
            }
            finally
            {
                if (client.State != CommunicationState.Faulted)
                {
                    client.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.DryPeriodEntityService.FindDryPeriodsByAnimalNumber(DLBR.DCF.KDB.MessageContracts.FindDryPeriodsByAnimalNumberRequest)">
      <summary>
        <h1>Functional Description</h1>
            Find a number of dry periods by animal number
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>AnimalNumber</td><td>yes</td><td>&gt; 0</td><td>The animal number to get dry periods by</td></tr><tr><td>RequestedCount</td><td></td><td></td><td>If specified only the specified number of dry periods are returned. The dry periods are sorted by date, newest first.<br />If not specified all dry periods on the specified animal is returned.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>DryPeriodCollection</td><td>A collection of dry periods. See <see cref="T:DLBR.DCF.KDB.DataContracts.DryPeriod" /></td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindDryPeriodsByAnimalNumberRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindDryPeriodsByAnimalNumberResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            DryPeriodEntityServiceContractClient client = new DryPeriodEntityServiceContractClient("DryPeriodEntityService");

            try
            {
                client.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                client.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                //Get results
                DryPeriodCollection result = client.FindDryPeriodsByAnimalNumber(TestUtil.ANIMAL_NUMBER_FROM_TESTHERD, null);

                Assert.IsNotNull(result);
                Assert.IsTrue(result.Count &gt; 0);
                Assert.AreEqual(TestUtil.ANIMAL_NUMBER_FROM_TESTHERD, result[0].AnimalNumber);

                Debug.WriteLine("Number of returned Dry Periods: " + result.Count, "Result");
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message, "Exception");
                throw;
            }
            finally
            {
                if (client.State != CommunicationState.Faulted)
                {
                    client.Close();
                }
            }
</code></example>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.HerdEntityServiceBase">
      <summary>
            Service Class - HerdEntityService
            </summary>
      <tocexclude />
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.HerdEntityService">
      <summary>
        <h1>General</h1>
        <p>
            The following URIs specifies the location of the service in the production- and production test environment. 
            By default services in both the production and the production test environment uses the production data stores. The alternative URIs, which uses the test data stores (Medio), may be used for testing purposes.
            Please note that service versions might differ between the production- and production test environments. Before you begin using the service, please consult the person responsible as described in section 3.7 – Responsibility assignment.
            </p>
        <p>
          <b>Production URL:</b>
          <a href="http://prod.dcf.ws.dlbr.dk/DCFServices/HerdEntityService.svc">http://prod.dcf.ws.dlbr.dk/DCFServices/HerdEntityService.svc</a>
        </p>
        <p>
          <b>Accept test URL:</b>
          <a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/HerdEntityService.svc">http://accepttest.dcf.ws.dlbr.dk/DCFServices/HerdEntityService.svc</a>
        </p>
        <h1>Web Service Description</h1>
            The machine-readable description in the form of a WSDL document can be obtained by querying the following URI’s.
            <p><b>Production WSDL:</b><a href="http://prod.dcf.ws.dlbr.dk/DCFServices/HerdEntityService.svc?wsdl">http://prod.dcf.ws.dlbr.dk/DCFServices/HerdEntityService.svc?wsdl</a></p><p><b>Accept test WSDL:</b><a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/HerdEntityService.svc?wsdl">http://accepttest.dcf.ws.dlbr.dk/DCFServices/HerdEntityService.svc?wsdl</a></p><h1>Endpoints</h1>
            For information regarding endpoints, see topic 'Endpoints available in DCF Services'
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.HerdEntityService.GetHerdByHerdNumber(DLBR.DCF.KDB.MessageContracts.GetHerdByHerdNumberRequest)">
      <summary>
        <h1>Functional Description</h1>
            Gets a single herd by herd number.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>HerdNumber</td><td>yes</td><td>&gt; 0</td><td>The herd number from which to find the herd from.</td></tr><tr><td>AnimalType</td><td>yes</td><td></td><td>The animal type in the herd, e.g. cattle.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>Herd</td><td>The <see cref="T:DLBR.DCF.KDB.DataContracts.Herd" /> entity. If the entity is not found, this value is null.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetHerdByHerdNumberRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetHerdByHerdNumberResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            HerdEntityServiceContractClient proxy = new HerdEntityServiceContractClient("HerdEntityService");
            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                AnimalType animalType = new AnimalType();
                animalType.Code = 12;

                Herd result = proxy.GetHerdByHerdNumber(animalType, TestUtil.HERD_NUMBER);

                Assert.IsNotNull(result);
                Assert.AreEqual(TestUtil.HERD_NUMBER, result.HerdNumber);
                Assert.IsNotNull(result.SignificantAnimalRace);
                result.ProductionType.Should().NotBeNull();
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.HerdEntityService.FindHerdsByHerdNumber(DLBR.DCF.KDB.MessageContracts.FindHerdsByHerdNumberRequest)">
      <summary>
        <h1>Functional Description</h1>
            Finds a number of herds by herd number.
            <h1>Notes</h1>
            A property can have more than one herd with same herd number, but each with a different animal type.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>HerdNumber</td><td>yes</td><td>&gt; 0</td><td>The herd number from which to find herds from.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>HerdCollection</td><td>A collection of herds. Serr <see cref="T:DLBR.DCF.KDB.DataContracts.Herd" /></td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindHerdsByHerdNumberRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindHerdsByHerdNumberResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            HerdEntityServiceContractClient proxy = new HerdEntityServiceContractClient("HerdEntityService");
            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                HerdCollection result = proxy.FindHerdsByHerdNumber(TestUtil.HERD_NUMBER);

                Assert.IsNotNull(result);
                Assert.IsTrue(result.Count &gt; 0);
                result.Should().OnlyContain(h =&gt; h.ProductionType != null);
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.HerdEntityService.FindHerdsByDistrictNumber(DLBR.DCF.KDB.MessageContracts.FindHerdsByDistrictNumberRequest)">
      <summary>
        <h1>Functional Description</h1>
            Find a number of herds by district number.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>DistrictNumber</td><td>yes</td><td>&gt; 0</td><td>District number from which to find herds from.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>HerdCollection</td><td>A collection of herds. See <see cref="T:DLBR.DCF.KDB.DataContracts.Herd" /></td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindHerdsByDistrictNumberRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindHerdsByDistrictNumberResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            HerdEntityServiceContractClient proxy = new HerdEntityServiceContractClient("HerdEntityService");
            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID_DISTRICTINSEMINATOR;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD_DISTRICTINSEMINATOR;

                HerdCollection result = proxy.FindHerdsByDistrictNumber(TestUtil.DISTRICT_NUMBER);

                Assert.IsNotNull(result);
                Assert.IsTrue(result.Count &gt; 0, "result is empty");
                result.Should().OnlyContain(h =&gt; h.ProductionType != null);

                // Regressiontest for bug #6427. 
                // Herd 19174 has district 49 a primary and 111 as alternative.
                var queryResult = from Herd h in result where h.CHRNumber == 19174 select h;
                Assert.IsTrue(queryResult.Count() &gt; 0, "Herd was not found in collection");
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.HerdEntityService.FindHerdsByCHRNumber(DLBR.DCF.KDB.MessageContracts.FindHerdsByCHRNumberRequest)">
      <summary>
        <h1>Functional Description</h1>
            Finds a number of herds by CHR number
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>CHRNumber</td><td>yes</td><td>&gt; 0</td><td>The danish central husbandry registration number of the property, to which the herds are associated.</td></tr><tr><td>ActiveHerdFlag</td><td></td><td></td><td>Active status of herds to return. Null  = active and not active herds, False = not active herds, True = active herds.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>HerdCollection</td><td>A collection of herds. See <see cref="T:DLBR.DCF.KDB.DataContracts.Herd" /></td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindHerdsByCHRNumberRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindHerdsByCHRNumberResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            HerdEntityServiceContractClient proxy = new HerdEntityServiceContractClient("HerdEntityService");
            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                HerdCollection result = proxy.FindHerdsByCHRNumber(true, TestUtil.CHR_NUMBER);

                Assert.IsNotNull(result);
                Assert.IsTrue(result.Count &gt; 0);
                result.Should().OnlyContain(h =&gt; h.ProductionType != null);
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.HerdEntityService.FindUserHerds(DLBR.DCF.KDB.MessageContracts.FindUserHerdsRequest)">
      <summary>
        <h1>Functional Description</h1>
            Finds a number of herds the calling user is authorized to.
            <h1>Notes</h1>
            Be careful not to call this operation with a broadly authorized user e.g. a user with an administrative role that gives access to all herds in the database. 
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>AnimalType</td><td></td><td>(Code &gt; 0)</td><td>The type of animal in the herd, e.g. cattle. If animal type is specified, then the animal type code is validated.<br />If set only herds with specified animal type that the user is authorized to are returned.<br />
                                                                      If set to null, then all herds regarding of animal type that the user is authorized to are returned.</td></tr><tr><td>IncludeNonActiveHerds</td><td></td><td>&gt; 0</td><td>If true both active and non-active herds is returned. Default is false, meaning only active herds is returned.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>HerdCollection</td><td>A collection of herds. See <see cref="T:DLBR.DCF.KDB.DataContracts.Herd" /></td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindUserHerdsRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindUserHerdsResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            HerdEntityServiceContractClient proxy = new HerdEntityServiceContractClient("HerdEntityService");
            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID_FARMER;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD_FARMER;

                AnimalType animalType = new AnimalType { Code = 12 };
                HerdCollection result = proxy.FindUserHerds(animalType, false);

                Assert.IsNotNull(result);
                Assert.IsTrue(result.Count &gt; 0);
                result.Should().OnlyContain(h =&gt; h.ProductionType != null);
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.HerdEntityService.GetUserHerdCount(DLBR.DCF.KDB.MessageContracts.GetUserHerdCountRequest)">
      <summary>
        <h1>Functional Description</h1>
            Gets the number of herds of the specified animal type the user is authorized to.<br />The intended purpose of this operation is to provide a client with the opportunity to determine whether to retrieve all herds using the operation "GetUserHerds" or retrieve a single herd depending on the number of herds the user is authorized to see. 
            <h1>Notes</h1>
            All active herds for specified animal type are counted at the time of the call to this operation.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>AnimalType</td><td>yes</td><td></td><td>The animal type, e.g. cattle.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>NumberOfHerds</td><td>Number of active herds of specified animal type the user is authorized to.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetUserHerdCountRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetUserHerdCountResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            HerdEntityServiceContractClient proxy = new HerdEntityServiceContractClient("HerdEntityService");
            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID_FARMER;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD_FARMER;

                AnimalType animalType = new AnimalType { Code = 12 };
                Int32 result = proxy.GetUserHerdCount(animalType);

                Assert.AreEqual(1, result);
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.HerdEntityService.GetAnimalCountByHerdNumber(DLBR.DCF.KDB.MessageContracts.GetAnimalCountByHerdNumberRequest)">
      <summary>
        <h1>Functional Description</h1>
            Gets the number of animals in the herd specified by the herd number.
            <h1>Notes</h1>
            All active animals in the herd are counted at the time of the call to this operation.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>HerdNumber</td><td>yes</td><td>&gt; 0</td><td>The herd number of the herd to count animals in.</td></tr><tr><td>AnimalType</td><td></td><td></td><td>The animal type, e.g. cattle.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>AnimalCount</td><td>Number of active animals in herd.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetAnimalCountByHerdNumberRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetAnimalCountByHerdNumberResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            HerdEntityServiceContractClient proxy = new HerdEntityServiceContractClient("HerdEntityService");
            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                AnimalType animalType = new AnimalType { Code = 12 };

                short result = proxy.GetAnimalCountByHerdNumber(animalType, TestUtil.HERD_NUMBER);

                Assert.IsNotNull(result);
                Assert.IsTrue(result &gt; 0);
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.HerdEntityService.UpdateHerdRemark(DLBR.DCF.KDB.MessageContracts.UpdateHerdRemarkRequest)">
      <summary>
        <h1>Functional Description</h1>
            Create, update or deletes a herd remark
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>HerdNumber</td><td>yes</td><td>&gt; 0</td><td>The herd number where the herd remark is to be created, updated or deleted</td></tr><tr><td>AnimalType</td><td>yes</td><td></td><td>The animal type, e.g. cattle.</td></tr><tr><td>HerdRemarkType</td><td>yes</td><td></td><td>The type of remark, e.g. Herd remark</td></tr><tr><td>Remark</td><td></td><td></td><td>This is the remark text. If a remark does not exist a new remark is created. If a remark already exists, the remark is updated. If the input value of the remark is null and there is an existing remark, this is deleted.</td></tr><tr><td>LastUpdate</td><td></td><td></td><td>
            This is set when an update is made to make sure that a potential newer herd remark is not overwritten. When a create or delete is made, the system date (DateTime.Now) can be set to make sure that the transaction is completed.
            <br />
            If null is used as input, the current system date is used. 
            <br />
            When a update or delete is wanted, one should take the following in consideration:
            <br /><b>Update:</b><b>•</b>	Use the exact date of last update 
            <b>Delete:</b><b>•</b>	Use the exact or newer date of last update time.
            <br />
            E.g. Get HerdRemarkCollection from HerdEntityService.GetHerdByHerdNumber. Use LastUpdate from  returned HerdRemarkCollection as input in the UpdateHerdRemark LastUpdate parameter.
            <br /><b>Possible returned error: Reread data.</b><br />
            If the error above is returned, read HerdRemarkCollection from one of the HerdEntityService operations (e.g. GetHerdByHerdNumber) and use returned LastUpdate as input in UpdateHerdRemark LastUpdate parameter.
            </td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>HerdRemark</td><td>If the remark is created or updated, a HerdRemark is returned with the new values. If successfully deleted (remark input value is set null) the return value is null. <see cref="T:DLBR.DCF.KDB.DataContracts.HerdRemark" /></td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.UpdateHerdRemarkRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.UpdateHerdRemarkResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            HerdEntityServiceContractClient proxy = new HerdEntityServiceContractClient("HerdEntityService");
            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID_DISTRICTINSEMINATOR;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD_DISTRICTINSEMINATOR;

                AnimalType animalType = new AnimalType { Code = 12 };
                HerdRemarkType herdRemarkType = new HerdRemarkType { Code = 1 }; //Besætningsbemærkning

                // Create
                HerdRemark result = proxy.UpdateHerdRemark(animalType, TestUtil.HERDNUMBER_INSEMINATOR, herdRemarkType, null, "Created HerdRemark");

                Assert.IsNotNull(result);
                Assert.IsTrue(result.Id &gt; 0);

                // Read
                Herd herdResult = proxy.GetHerdByHerdNumber(animalType, TestUtil.HERDNUMBER_INSEMINATOR);
                Assert.IsNotNull(herdResult.HerdRemarkCollection);
                Assert.IsTrue(herdResult.HerdRemarkCollection.Count &gt; 0);

                // Update
                HerdRemark herdRemark = herdResult.HerdRemarkCollection[0];
                result = proxy.UpdateHerdRemark(animalType, TestUtil.HERDNUMBER_INSEMINATOR, herdRemark.HerdRemarkType, herdRemark.LastUpdate, "Updated HerdRemark");

                Assert.IsNotNull(result);
                Assert.IsTrue(result.Id &gt; 0);

                // Delete
                result = proxy.UpdateHerdRemark(animalType, TestUtil.HERDNUMBER_INSEMINATOR, result.HerdRemarkType, result.LastUpdate, null);

                Assert.IsNull(result);
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.HerdHealthStatusEntityServiceBase">
      <summary>
            Service Class - HerdHealthStatusEntityService
            </summary>
      <tocexclude />
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.HerdHealthStatusEntityService">
      <summary>
        <h1>General</h1>
        <p>
            The following URIs specifies the location of the service in the production- and production test environment. 
            By default services in both the production and the production test environment uses the production data stores. The alternative URIs, which uses the test data stores (Medio), may be used for testing purposes.
            Please note that service versions might differ between the production- and production test environments. Before you begin using the service, please consult the person responsible as described in section 3.7 – Responsibility assignment.
            </p>
        <p>
          <b>Production URL:</b>
          <a href="http://prod.dcf.ws.dlbr.dk/DCFServices/HerdHealthStatusEntityService.svc">http://prod.dcf.ws.dlbr.dk/DCFServices/HerdHealthStatusEntityService.svc</a>
        </p>
        <p>
          <b>Accept test URL:</b>
          <a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/HerdHealthStatusEntityService.svc">http://accepttest.dcf.ws.dlbr.dk/DCFServices/HerdHealthStatusEntityService.svc</a>
        </p>
        <h1>Web Service Description</h1>
            The machine-readable description in the form of a WSDL document can be obtained by querying the following URI’s.
            <p><b>Production WSDL:</b><a href="http://prod.dcf.ws.dlbr.dk/DCFServices/HerdHealthStatusEntityService.svc?wsdl">http://prod.dcf.ws.dlbr.dk/DCFServices/HerdHealthStatusEntityService.svc?wsdl</a></p><p><b>Accept test WSDL:</b><a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/HerdHealthStatusEntityService.svc?wsdl">http://accepttest.dcf.ws.dlbr.dk/DCFServices/HerdHealthStatusEntityService.svc?wsdl</a></p><h1>Endpoints</h1>
            For information regarding endpoints, see topic 'Endpoints available in DCF Services'
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.HerdHealthStatusEntityService.GetHerdHealthStatus(DLBR.DCF.KDB.MessageContracts.GetHerdHealthStatusRequest)">
      <summary>
        <h1>Functional Description</h1>
            Get a Health Status for the Herd.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>VetSampleTypes</td><td>yes</td><td></td><td>The <see cref="T:DLBR.DCF.KDB.DataContracts.VetSampleType" /> type to get</td></tr><tr><td>fromDate</td><td></td><td></td><td>A  date to check from</td></tr><tr><td>ToDate</td><td></td><td></td><td>A date to check to</td></tr><tr><td>chrNumber</td><td></td><td>&gt;0</td><td>The Herd in question</td></tr><tr><td>animalType</td><td></td><td>&gt;0</td><td>The AnimalType to check</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>HerdHealthStatus</td><td>The <see cref="T:DLBR.DCF.KDB.DataContracts.HerdHealthStatus" /> entity for the given chr number</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetHerdHealthStatusRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetHerdHealthStatusResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            try
            {
                HerdHealthStatusEntityServiceContractClient proxy = new HerdHealthStatusEntityServiceContractClient("HerdHealthStatusEntityService");
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                HerdHealthStatusEntityServiceContract serviceContract = proxy;

                AnimalType animaltype = new AnimalType() { Code = 12 };
                DateTime? fromDate = null;
                DateTime? toDate = null;

                VetSampleType sample = new VetSampleType() { Code = 1, AnimalType = animaltype };
                VetSampleTypeCollection sampleColl = new VetSampleTypeCollection();
                sampleColl.Add(sample);

                GetHerdHealthStatusRequest request = new GetHerdHealthStatusRequest();
                request.AnimalType = animaltype;
                request.ChrNumber = 41267;
                request.FromDate = fromDate;
                request.ToDate = toDate;
                request.VetSampleTypes = sampleColl;

                GetHerdHealthStatusResponse result = serviceContract.GetHerdHealthStatus(request);

                Assert.IsNotNull(result);
                Assert.AreNotEqual(0, result.HerdHealthStatus.ChrNumber);

                proxy.Close();
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
                throw;
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.HerdHealthStatusEntityService.FindHerdHealthStatusByCHRNumber(DLBR.DCF.KDB.MessageContracts.FindHerdHealthStatusByCHRNumberRequest)">
      <summary>
        <h1>Functional Description</h1>
            Find HerdHealthStatus for specified CHR Number(s)
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>VetSampleTypes</td><td>yes</td><td>Number of specified Vet Sample Types can be between 1 and 10</td><td>The <see cref="T:DLBR.DCF.KDB.DataContracts.VetSampleType" /> types to find</td></tr><tr><td>FromDate</td><td></td><td></td><td>Set the start date to get data by</td></tr><tr><td>ToDate</td><td></td><td></td><td>Set the end date to get data by</td></tr><tr><td>CHRNumbers</td><td>yes</td><td>Number of specified CHR numbers can be between 1 and 1000</td><td>A collection of CHR numbers to find HerdHealthStatus for. 
            Only HerdHealthStatus containing all the specified CHR numbers are returned.</td></tr><tr><td>animalType</td><td></td><td>&gt;0</td><td>The type of animal to get Vet Sample Types for.
            The animaltype applies to all specified Vet Sample Types</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>HerdHealthStatus</td><td>A collection of the <see cref="T:DLBR.DCF.KDB.DataContracts.HerdHealthStatus" /> objects found.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindHerdHealthStatusByCHRNumberRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindHerdHealthStatusByCHRNumberResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            HerdHealthStatusEntityServiceContractClient client = new HerdHealthStatusEntityServiceContractClient("HerdHealthStatusEntityService");

            try
            {
                client.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                client.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                Collection&lt;long&gt; chrNumbers = new Collection&lt;long&gt;(new long[] { 32887, 30000, 27612 });

                // Classifications
                AnimalType animalType = new AnimalType { Code = 12 };

                VetSampleType sample = new VetSampleType() { Code = 1, AnimalType = animalType };
                VetSampleTypeCollection sampleColl = new VetSampleTypeCollection();
                sampleColl.Add(sample);

                //Get results
                HerdHealthStatusCollection result = client.FindHerdHealthStatusByCHRNumber(animalType, chrNumbers, null, null, sampleColl);

                Assert.IsNotNull(result);
                Assert.IsTrue(result.Count &gt; 0);

                Debug.WriteLine("Number of returned HerdHealthStatus: " + result.Count, "Result");
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message, "Exception");
                throw;
            }
            finally
            {
                if (client.State != CommunicationState.Faulted)
                {
                    client.Close();
                }
            }
</code></example>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.InseminationEntityServiceBase">
      <summary>
            Service Class - InseminationEntityService
            </summary>
      <tocexclude />
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.InseminationEntityService">
      <summary>
        <h1>General</h1>
        <p>
            The following URIs specifies the location of the service in the production- and production test environment. 
            By default services in both the production and the production test environment uses the production data stores. The alternative URIs, which uses the test data stores (Medio), may be used for testing purposes.
            Please note that service versions might differ between the production- and production test environments. Before you begin using the service, please consult the person responsible as described in section 3.7 – Responsibility assignment.
            </p>
        <p>
          <b>Production URL:</b>
          <a href="http://prod.dcf.ws.dlbr.dk/DCFServices/InseminationEntityService.svc">http://prod.dcf.ws.dlbr.dk/DCFServices/InseminationEntityService.svc</a>
        </p>
        <p>
          <b>Accept test URL:</b>
          <a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/InseminationEntityService.svc">http://accepttest.dcf.ws.dlbr.dk/DCFServices/InseminationEntityService.svc</a>
        </p>
        <h1>Web Service Description</h1>
            The machine-readable description in the form of a WSDL document can be obtained by querying the following URI’s.
            <p><b>Production WSDL:</b><a href="http://prod.dcf.ws.dlbr.dk/DCFServices/InseminationEntityService.svc?wsdl">http://prod.dcf.ws.dlbr.dk/DCFServices/InseminationEntityService.svc?wsdl</a></p><p><b>Accept test WSDL:</b><a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/InseminationEntityService.svc?wsdl">http://accepttest.dcf.ws.dlbr.dk/DCFServices/InseminationEntityService.svc?wsdl</a></p><h1>Endpoints</h1>
            For information regarding endpoints, see topic 'Endpoints available in DCF Services'
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.InseminationEntityService.GetInseminationById(DLBR.DCF.KDB.MessageContracts.GetInseminationByIdRequest)">
      <summary>
        <h1>Functional Description</h1>
            Gets a single insemination by the technical insemination id.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>InseminationId</td><td>yes</td><td>&gt;0</td><td>The id of the insemination to read.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>Insemination</td><td>The insemination entity. If the entity is not found, this value is null.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetInseminationByIdRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetInseminationByIdResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            int inseminationId = 30670090;
            var proxy = new InseminationEntityServiceContractClient("InseminationEntityService");
            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                Insemination result = proxy.GetInseminationById(inseminationId);

                Assert.IsNotNull(result);
                // Make sure that bullname is part of returning Insemination datacontract
                result.BullName.Should().NotBeNullOrEmpty();
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.InseminationEntityService.FindInseminationsByAnimalNumber(DLBR.DCF.KDB.MessageContracts.FindInseminationsByAnimalNumberRequest)">
      <summary>
        <h1>Functional Description</h1>
            Finds a number of inseminations by an animal number.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>AnimalNumber</td><td>yes</td><td>&gt;0</td><td>The animal number from which to find inseminations.</td></tr><tr><td>RequestedCount</td><td></td><td>&gt;0</td><td>If specified the operation only returns the specified number of insemination, sorted by date. 
            If not specified all insemination on the specified animal is returned.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>InseminationCollection</td><td>A collection of inseminations.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindInseminationsByAnimalNumberRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindInseminationsByAnimalNumberResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            var proxy = new InseminationEntityServiceContractClient("InseminationEntityService");
            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                InseminationCollection result = proxy.FindInseminationsByAnimalNumber(m_cowAnimalNumber, null);

                Assert.IsNotNull(result);
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.InseminationEntityService.FindInseminationsByHerdNumber(DLBR.DCF.KDB.MessageContracts.FindInseminationsByHerdNumberRequest)">
      <summary>
        <h1>Functional Description</h1>
            Finds a number of inseminations by a herd number.
            
            Returns a union between the inseminations made in the given herd and all the inseminations made on animals currently in the herd. 
            (Historic data is included).
            If FromDate and ToDate are specified the function returns insemination from animals active in the given period.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>HerdNumber</td><td>yes</td><td>&gt;0</td><td>The herd number on which to find inseminations</td></tr><tr><td>AnimalType</td><td></td><td></td><td>The type of animal in the herd, e.g. cattle.</td></tr><tr><td>FromDate</td><td></td><td></td><td>If specified only inseminations performed on animals active after the specified date are returned. 
            If not specified all inseminations matching the other criteria’s is returned.</td></tr><tr><td>ToDate</td><td>(yes)</td><td></td><td>If specified only inseminations performed on animals active before the specified date are returned.
            This parameter is required if “FromDate” is specified.</td></tr><tr><td>RequestedCount</td><td></td><td></td><td>If specified the operation only returns the specified number of insemination, sorted by date. 
            If not specified all inseminations matching the other criteria’s is returned.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>InseminationCollection</td><td>A collection of inseminations.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindInseminationsByHerdNumberRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindInseminationsByHerdNumberResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            var proxy = new InseminationEntityServiceContractClient("InseminationEntityService");
            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD;

                var animalType = new AnimalType
                                     {
                                         Code = 12
                                     };

                InseminationCollection result = proxy.FindInseminationsByHerdNumber(animalType, null, TestUtil.HERD_NUMBER, 1, null);

                Assert.IsNotNull(result);
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.InseminationEntityService.RegisterInsemination(DLBR.DCF.KDB.MessageContracts.RegisterInseminationRequest)">
      <summary>
        <h1>Functional Description</h1>
            Registers a new insemination.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>AnimalNumber</td><td>yes</td><td>&gt;0</td><td>The animal number of the animal that has been inseminated.</td></tr><tr><td>AnimalType</td><td>yes</td><td>&gt;0</td><td>The type of animal in the herd, e.g. cattle.</td></tr><tr><td>HerdNumber</td><td>yes</td><td>&gt;0</td><td>The herd number to which the animal belongs</td></tr><tr><td>InseminationDate</td><td>yes</td><td></td><td>The date of the insemination</td></tr><tr><td>BullHerdbookNumber</td><td>yes</td><td></td><td>The herdbook number of the bull whose seamen was used.</td></tr><tr><td>InseminationProduct</td><td>yes</td><td></td><td>The product used for insemination, e.g. conventional or gender-sorted seamen.</td></tr><tr><td>InseminationNumber</td><td>yes</td><td></td><td>The sequence number, in the current cycle , of the insemination</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>Insemination</td><td>The newly registered insemination.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.RegisterInseminationRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.RegisterInseminationResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            var proxy = new InseminationEntityServiceContractClient("InseminationEntityService");

            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID_FARMER;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD_FARMER;

                long animalNumber = 2761202422;
                long bullHerdbookNumber = 35722;
                long herdNumber = TestUtil.HERD_NUMBER;
                DateTime inseminationDate = DateTime.Now.AddHours(-2);
                int? inseminationNumber = null;

                var animalType = new AnimalType
                                     {
                                         Code = 12
                                     };
                var inseminationProduct = new InseminationProduct
                                              {
                                                  Code = 10
                                              };

                // Register
                Insemination insemination = proxy.RegisterInsemination(
                    animalNumber,
                    animalType,
                    bullHerdbookNumber,
                    herdNumber,
                    inseminationDate,
                    inseminationNumber,
                    inseminationProduct);

                Assert.IsNotNull(insemination);

                // Update
                DateTime date = DateTime.Now.AddDays(-1);
                insemination.Date = date;

                proxy.UpdateInsemination(ref insemination);

                Assert.IsNotNull(insemination);
                Assert.AreEqual(date.Date, insemination.Date.Date);

                // Delete
                proxy.DeleteInsemination(insemination);
            }
            catch (FaultException&lt;InvalidArgument&gt; ex)
            {
                Debug.WriteLine(ex.Message, "InseminationEntityServiceTest.TestCRUD");
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message, "InseminationEntityServiceTest.TestCRUD");
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.InseminationEntityService.UpdateInsemination(DLBR.DCF.KDB.MessageContracts.UpdateInseminationRequest)">
      <summary>
        <h1>Functional Description</h1>
            Updates an existing insemination
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>Insemination</td><td>yes</td><td></td><td>The insemination to update</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>Insemination</td><td>The updated insemination.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.UpdateInseminationRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.UpdateInseminationResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            var proxy = new InseminationEntityServiceContractClient("InseminationEntityService");

            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID_FARMER;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD_FARMER;

                long animalNumber = 2761202422;
                long bullHerdbookNumber = 35722;
                long herdNumber = TestUtil.HERD_NUMBER;
                DateTime inseminationDate = DateTime.Now.AddHours(-2);
                int? inseminationNumber = null;

                var animalType = new AnimalType
                                     {
                                         Code = 12
                                     };
                var inseminationProduct = new InseminationProduct
                                              {
                                                  Code = 10
                                              };

                // Register
                Insemination insemination = proxy.RegisterInsemination(
                    animalNumber,
                    animalType,
                    bullHerdbookNumber,
                    herdNumber,
                    inseminationDate,
                    inseminationNumber,
                    inseminationProduct);

                Assert.IsNotNull(insemination);

                // Update
                DateTime date = DateTime.Now.AddDays(-1);
                insemination.Date = date;

                proxy.UpdateInsemination(ref insemination);

                Assert.IsNotNull(insemination);
                Assert.AreEqual(date.Date, insemination.Date.Date);

                // Delete
                proxy.DeleteInsemination(insemination);
            }
            catch (FaultException&lt;InvalidArgument&gt; ex)
            {
                Debug.WriteLine(ex.Message, "InseminationEntityServiceTest.TestCRUD");
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message, "InseminationEntityServiceTest.TestCRUD");
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.InseminationEntityService.DeleteInsemination(DLBR.DCF.KDB.MessageContracts.DeleteInseminationRequest)">
      <summary>
        <h1>Functional Description</h1>
            Updates an existing insemination
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>Insemination</td><td>yes</td><td></td><td>The insemination to delete</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.DeleteInseminationRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.DeleteInseminationResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            var proxy = new InseminationEntityServiceContractClient("InseminationEntityService");

            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID_FARMER;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD_FARMER;

                long animalNumber = 2761202422;
                long bullHerdbookNumber = 35722;
                long herdNumber = TestUtil.HERD_NUMBER;
                DateTime inseminationDate = DateTime.Now.AddHours(-2);
                int? inseminationNumber = null;

                var animalType = new AnimalType
                                     {
                                         Code = 12
                                     };
                var inseminationProduct = new InseminationProduct
                                              {
                                                  Code = 10
                                              };

                // Register
                Insemination insemination = proxy.RegisterInsemination(
                    animalNumber,
                    animalType,
                    bullHerdbookNumber,
                    herdNumber,
                    inseminationDate,
                    inseminationNumber,
                    inseminationProduct);

                Assert.IsNotNull(insemination);

                // Update
                DateTime date = DateTime.Now.AddDays(-1);
                insemination.Date = date;

                proxy.UpdateInsemination(ref insemination);

                Assert.IsNotNull(insemination);
                Assert.AreEqual(date.Date, insemination.Date.Date);

                // Delete
                proxy.DeleteInsemination(insemination);
            }
            catch (FaultException&lt;InvalidArgument&gt; ex)
            {
                Debug.WriteLine(ex.Message, "InseminationEntityServiceTest.TestCRUD");
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message, "InseminationEntityServiceTest.TestCRUD");
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.InseminationEntityService.CalculateInBreeding(DLBR.DCF.KDB.MessageContracts.CalculateInBreedingRequest)">
      <summary>
        <h1>Functional Description</h1>
            Calculates InBreeding 
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>AnimalNumber</td><td>yes</td><td>&gt;0</td><td>The animal number of the mother</td></tr><tr><td>HerdNumber</td><td></td><td>&gt;0</td><td>The herdnumber. If the argument is not specified, the herd whereto the animal belongs is used.</td></tr><tr><td>BullHerdBookNumber</td><td>yes</td><td>&gt;0</td><td>The Bull used</td></tr><tr><td>AnimalType</td><td></td><td></td><td>The animaltype, e.g. Cattle. If the argument is not specified the animal type is inferred from the animal.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>InBreeding</td><td>The InBreeding result. </td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.CalculateInBreedingRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.CalculateInBreedingResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            long animalNumber = 4811301637;
            long bullHerdBookNumber = 244858;
            long herdNumber = 48113;

            var proxy = new InseminationEntityServiceContractClient("InseminationEntityService");
            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID_DISTRICTINSEMINATOR;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD_DISTRICTINSEMINATOR;

                var animaltype = new AnimalType();
                animaltype.Code = 12;

                InBreeding result = proxy.CalculateInBreeding(animalNumber, animaltype, bullHerdBookNumber, herdNumber);

                Assert.IsNotNull(result);
                Assert.IsNotNull(result.HereditaryDisease);
                Assert.IsTrue(result.AnimalNumber == animalNumber);
                Assert.IsTrue(result.BullHerdBookNumber == bullHerdBookNumber);
                Assert.IsTrue(result.HerdNumber == herdNumber);
                Assert.IsTrue(result.InBreedingCoefficient &gt; 0);
                Assert.IsTrue(result.MaxInBreedingCoefficient &gt; 0);
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
                throw;
            }
            finally
            {
                if (proxy.State != CommunicationState.Faulted)
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.InseminationRouteEntityServiceBase">
      <summary>
            Service Class - InseminationRouteEntityService
            </summary>
      <tocexclude />
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.InseminationRouteEntityService">
      <summary>
        <h1>General</h1>
        <p>
            The following URIs specifies the location of the service in the production- and production test environment. 
            By default services in both the production and the production test environment uses the production data stores. The alternative URIs, which uses the test data stores (Medio), may be used for testing purposes.
            Please note that service versions might differ between the production- and production test environments. Before you begin using the service, please consult the person responsible as described in section 3.7 – Responsibility assignment.
            </p>
        <p>
          <b>Production URL:</b>
          <a href="http://prod.dcf.ws.dlbr.dk/DCFServices/InseminationRouteEntityService.svc">http://prod.dcf.ws.dlbr.dk/DCFServices/InseminationRouteEntityService.svc</a>
        </p>
        <p>
          <b>Accept test URL:</b>
          <a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/InseminationRouteEntityService.svc">http://accepttest.dcf.ws.dlbr.dk/DCFServices/InseminationRouteEntityService.svc</a>
        </p>
        <h1>Web Service Description</h1>
            The machine-readable description in the form of a WSDL document can be obtained by querying the following URI’s.
            <p><b>Production WSDL:</b><a href="http://prod.dcf.ws.dlbr.dk/DCFServices/InseminationRouteEntityService.svc?wsdl">http://prod.dcf.ws.dlbr.dk/DCFServices/InseminationRouteEntityService.svc?wsdl</a></p><p><b>Accept test WSDL:</b><a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/InseminationRouteEntityService.svc?wsdl">http://accepttest.dcf.ws.dlbr.dk/DCFServices/InseminationRouteEntityService.svc?wsdl</a></p><h1>Endpoints</h1>
            For information regarding endpoints, see topic 'Endpoints available in DCF Services'
            </summary>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.InseminationTreatmentEntityServiceBase">
      <summary>
            Service Class - InseminationTreatmentEntityService
            </summary>
      <tocexclude />
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.InseminationTreatmentEntityService">
      <summary>
        <h1>General</h1>
        <p>
            The following URIs specifies the location of the service in the production- and production test environment. 
            By default services in both the production and the production test environment uses the production data stores. The alternative URIs, which uses the test data stores (Medio), may be used for testing purposes.
            Please note that service versions might differ between the production- and production test environments. Before you begin using the service, please consult the person responsible as described in section 3.7 – Responsibility assignment.
            </p>
        <p>
          <b>Production URL:</b>
          <a href="http://prod.dcf.ws.dlbr.dk/DCFServices/InseminationTreatmentEntityService.svc">http://prod.dcf.ws.dlbr.dk/DCFServices/InseminationTreatmentEntityService.svc</a>
        </p>
        <p>
          <b>Accept test URL:</b>
          <a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/InseminationTreatmentEntityService.svc">http://accepttest.dcf.ws.dlbr.dk/DCFServices/InseminationTreatmentEntityService.svc</a>
        </p>
        <h1>Web Service Description</h1>
            The machine-readable description in the form of a WSDL document can be obtained by querying the following URI’s.
            <p><b>Production WSDL:</b><a href="http://prod.dcf.ws.dlbr.dk/DCFServices/InseminationTreatmentEntityService.svc?wsdl">http://prod.dcf.ws.dlbr.dk/DCFServices/InseminationTreatmentEntityService.svc?wsdl</a></p><p><b>Accept test WSDL:</b><a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/InseminationTreatmentEntityService.svc?wsdl">http://accepttest.dcf.ws.dlbr.dk/DCFServices/InseminationTreatmentEntityService.svc?wsdl</a></p><h1>Endpoints</h1>
            For information regarding endpoints, see topic 'Endpoints available in DCF Services'
            </summary>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.ReportEntityServiceBase">
      <summary>
            Service Class - ReportEntityService
            </summary>
      <tocexclude />
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.ReportEntityService">
      <summary>
        <h1>General</h1>
        <p>
            The following URIs specifies the location of the service in the production- and production test environment. 
            By default services in both the production and the production test environment uses the production data stores. The alternative URIs, which uses the test data stores (Medio), may be used for testing purposes.
            Please note that service versions might differ between the production- and production test environments. Before you begin using the service, please consult the person responsible as described in section 3.7 – Responsibility assignment.
            </p>
        <p>
          <b>Production URL:</b>
          <a href="http://prod.dcf.ws.dlbr.dk/DCFServices/ReportEntityService.svc">http://prod.dcf.ws.dlbr.dk/DCFServices/ReportEntityService.svc</a>
        </p>
        <p>
          <b>Accept test URL:</b>
          <a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/ReportEntityService.svc">http://accepttest.dcf.ws.dlbr.dk/DCFServices/ReportEntityService.svc</a>
        </p>
        <h1>Web Service Description</h1>
            The machine-readable description in the form of a WSDL document can be obtained by querying the following URI’s.
            <p><b>Production WSDL:</b><a href="http://prod.dcf.ws.dlbr.dk/DCFServices/ReportEntityService.svc?wsdl">http://prod.dcf.ws.dlbr.dk/DCFServices/ReportEntityService.svc?wsdl</a></p><p><b>Accept test WSDL:</b><a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/ReportEntityService.svc?wsdl">http://accepttest.dcf.ws.dlbr.dk/DCFServices/ReportEntityService.svc?wsdl</a></p><h1>Endpoints</h1>
            For information regarding endpoints, see topic 'Endpoints available in DCF Services'
            </summary>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.ReproductionEntityServiceBase">
      <summary>
            Service Class - ReproductionEntityService
            </summary>
      <tocexclude />
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.ReproductionEntityService">
      <summary>
        <h1>General</h1>
        <p>
            The following URIs specifies the location of the service in the production- and production test environment. 
            By default services in both the production and the production test environment uses the production data stores. The alternative URIs, which uses the test data stores (Medio), may be used for testing purposes.
            Please note that service versions might differ between the production- and production test environments. Before you begin using the service, please consult the person responsible as described in section 3.7 – Responsibility assignment.
            </p>
        <p>
          <b>Production URL:</b>
          <a href="http://prod.dcf.ws.dlbr.dk/DCFServices/ReproductionEntityService.svc">http://prod.dcf.ws.dlbr.dk/DCFServices/ReproductionEntityService.svc</a>
        </p>
        <p>
          <b>Accept test URL:</b>
          <a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/ReproductionEntityService.svc">http://accepttest.dcf.ws.dlbr.dk/DCFServices/ReproductionEntityService.svc</a>
        </p>
        <h1>Web Service Description</h1>
            The machine-readable description in the form of a WSDL document can be obtained by querying the following URI’s.
            <p><b>Production WSDL:</b><a href="http://prod.dcf.ws.dlbr.dk/DCFServices/ReproductionEntityService.svc?wsdl">http://prod.dcf.ws.dlbr.dk/DCFServices/ReproductionEntityService.svc?wsdl</a></p><p><b>Accept test WSDL:</b><a href="http://accepttest.dcf.ws.dlbr.dk/DCFServices/ReproductionEntityService.svc?wsdl">http://accepttest.dcf.ws.dlbr.dk/DCFServices/ReproductionEntityService.svc?wsdl</a></p><h1>Endpoints</h1>
            For information regarding endpoints, see topic 'Endpoints available in DCF Services'
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.ReproductionEntityService.GetReproductionStatusByAnimalNumber(DLBR.DCF.KDB.MessageContracts.GetReproductionStatusByAnimalNumberRequest)">
      <summary>
        <h1>Functional Description</h1>
            Read actual reproduction status for supplied animalnumber.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>AnimalNumber</td><td>yes</td><td>&gt;0</td><td>The animal number from which to read the reproduction status.</td></tr><tr><td>Date</td><td></td><td></td><td>If specified, the reproduction status of the animal at the specified date is returned. E.g. if date is prior to latest calving date then the reproduction status is based on the closest calving date prior to the specified date.
            If not specified the actual reproduction status of the animal is returned based upon the latest calving date of the animal. </td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>ReproductionStatus</td><td>The reproduction status entity. If the entity is not found, this value is null.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetReproductionStatusByAnimalNumberRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetReproductionStatusByAnimalNumberResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            ReproductionEntityServiceContractClient proxy = new ReproductionEntityServiceContractClient("ReproductionEntityService");
            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID_FARMER;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD_FARMER;

                ReproductionStatus result = proxy.GetReproductionStatusByAnimalNumber( m_cowAnimalNumber, null );

                Assert.IsNotNull( result );
            }
            catch( Exception ex )
            {
                Debug.WriteLine( ex.Message );
                throw;
            }
            finally
            {
                if( proxy.State != CommunicationState.Faulted )
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.ReproductionEntityService.FindReproductionStatusByHerdNumber(DLBR.DCF.KDB.MessageContracts.FindReproductionStatusByHerdNumberRequest)">
      <summary>
        <h1>Functional Description</h1>
            Find actual reproduction status for all active animals in herd.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>HerdNumber</td><td>yes</td><td>&gt;0</td><td>The herd number from which to find reproduction status of all active animals in herd.</td></tr><tr><td>AnimalType</td><td>yes</td><td></td><td>The type of animal in the herd, e.g. cattle.</td></tr><tr><td>Date</td><td>yes</td><td></td><td>If specified, the reproduction status of  each of the animals in the herd at the specified date is returned. E.g. if date is prior to latest calving date then the reproduction status is based on the closest calving date prior to the specified date.
            If not specified the actual reproduction status of each of the animals in the herd is returned based upon the latest calving date of each animal.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>ReproductionStatusCollection</td><td>A collection of ReproductionStatus. Collection is empty if no entities where found.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindReproductionStatusByHerdNumberRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindReproductionStatusByHerdNumberResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            ReproductionEntityServiceContractClient proxy = new ReproductionEntityServiceContractClient("ReproductionEntityService");
            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID_FARMER;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD_FARMER;

                ReproductionStatusCollection result = proxy.FindReproductionStatusByHerdNumber( new AnimalType() { Code = 12 }, null, TestUtil.HERD_NUMBER );

                Assert.IsNotNull( result );
                Assert.IsTrue( result.Count &gt; 0 );

            }
            catch( Exception ex )
            {
                Debug.WriteLine( ex.Message );
                throw;
            }
            finally
            {
                if( proxy.State != CommunicationState.Faulted )
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.ReproductionEntityService.GetPregnancyCheckById(DLBR.DCF.KDB.MessageContracts.GetPregnancyCheckByIdRequest)">
      <summary>
        <h1>Functional Description</h1>
            Find actual reproduction status for all active animals in herd.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>HerdNumber</td><td>yes</td><td>&gt;0</td><td>The herd number from which to find reproduction status of all active animals in herd.</td></tr><tr><td>AnimalType</td><td>yes</td><td></td><td>The type of animal in the herd, e.g. cattle.</td></tr><tr><td>Date</td><td>yes</td><td></td><td>If specified, the reproduction status of  each of the animals in the herd at the specified date is returned. E.g. if date is prior to latest calving date then the reproduction status is based on the closest calving date prior to the specified date.
            If not specified the actual reproduction status of each of the animals in the herd is returned based upon the latest calving date of each animal.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>ReproductionStatusCollection</td><td>A collection of ReproductionStatus. Collection is empty if no entities where found.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetPregnancyCheckByIdRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.GetPregnancyCheckByIdResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            int pregnancyCheckId = 31544076;

            ReproductionEntityServiceContractClient proxy = new ReproductionEntityServiceContractClient("ReproductionEntityService");
            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID_FARMER;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD_FARMER;

                PregnancyCheck result = proxy.GetPregnancyCheckById( pregnancyCheckId );

                Assert.IsNotNull( result );
            }
            catch( Exception ex )
            {
                Debug.WriteLine( ex.Message );
                throw;
            }
            finally
            {
                if( proxy.State != CommunicationState.Faulted )
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.ReproductionEntityService.FindPregnancyChecksByAnimalNumber(DLBR.DCF.KDB.MessageContracts.FindPregnancyChecksByAnimalNumberRequest)">
      <summary>
        <h1>Functional Description</h1>
            Finds a number of pregnancy checks by animal number.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>AnimalNumber</td><td>yes</td><td>&gt;0</td><td>The animal number from which to find PregnancyChecks.</td></tr><tr><td>IsPregnant</td><td></td><td></td><td>If specified the operation only returns PregnancyChecks with the result specified. 
            If not specified all PregnancyChecks on the specified animal is returned.</td></tr><tr><td>RequestedCount</td><td></td><td></td><td>If specified the operation only returns the specified number of PregnancyChecks, sorted by date. 
            If not specified all PregnancyChecks on the specified animal is returned.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>PregnancyCheckCollection</td><td>A collection of PregnancyChecks</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindPregnancyChecksByAnimalNumberRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindPregnancyChecksByAnimalNumberResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            ReproductionEntityServiceContractClient proxy = new ReproductionEntityServiceContractClient("ReproductionEntityService");

            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID_FARMER;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD_FARMER;

                PregnancyCheckCollection result = proxy.FindPregnancyChecksByAnimalNumber( m_cowAnimalNumberWithPregnancyCheck, null, null );

                Assert.IsNotNull( result );
            }
            catch( Exception ex )
            {
                Debug.WriteLine( ex.Message );
                throw;
            }
            finally
            {
                if( proxy.State != CommunicationState.Faulted )
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.ReproductionEntityService.FindPregnancyChecksByHerdNumber(DLBR.DCF.KDB.MessageContracts.FindPregnancyChecksByHerdNumberRequest)">
      <summary>
        <h1>Functional Description</h1>
            Finds a number of pregnancy checks by herd number.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>HerdNumber</td><td>yes</td><td>&gt;0</td><td>The herd number from which to find PregnancyChecks.</td></tr><tr><td>AnimalType</td><td>yes</td><td></td><td>The type of animal, e.g. Cattle.</td></tr><tr><td>IsPregnant</td><td></td><td></td><td>If specified the operation only returns PregnancyChecks with the result specified. 
            If not specified all PregnancyChecks on the specified animal is returned.</td></tr><tr><td>FromDate</td><td>(yes)</td><td></td><td>If specified only pregnancy checks performed after the specified date is returned. 
            If not specified all pregnancy checks matching the other criteria’s is returned.
            If this parameter is set also the “ToDate” must be set. </td></tr><tr><td>ToDate</td><td>(yes)</td><td></td><td>If specified only pregnancy checks performed before the specified date is returned. 
            This parameter is required if “FromDate” is specified. </td></tr><tr><td>RequestedCount</td><td></td><td></td><td>If specified the operation only returns the specified number of PregnancyChecks, sorted by date. 
            If not specified all PregnancyChecks on the specified animal is returned. </td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>PregnancyCheckCollection</td><td>A collection of PregnancyChecks</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindPregnancyChecksByHerdNumberRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.FindPregnancyChecksByHerdNumberResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            ReproductionEntityServiceContractClient proxy = new ReproductionEntityServiceContractClient("ReproductionEntityService");
            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID_FARMER;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD_FARMER;

                AnimalType animalType = new AnimalType() { Code = 12 };

                PregnancyCheckCollection result = proxy.FindPregnancyChecksByHerdNumber( animalType, null, TestUtil.HERD_NUMBER, null, null, null );

                Assert.IsNotNull( result );
            }
            catch( Exception ex )
            {
                Debug.WriteLine( ex.Message );
                throw;
            }
            finally
            {
                if( proxy.State != CommunicationState.Faulted )
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.ReproductionEntityService.RegisterPregnancyCheck(DLBR.DCF.KDB.MessageContracts.RegisterPregnancyCheckRequest)">
      <summary>
        <h1>Functional Description</h1>
            Register a new pregnancy check.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>HerdNumber</td><td>yes</td><td>&gt;0</td><td>The herd number to which the animal belongs.</td></tr><tr><td>AnimalType</td><td>yes</td><td></td><td>The type of animal, e.g. Cattle.</td></tr><tr><td>AnimalNumber</td><td>yes</td><td>&gt;0</td><td>The animal number of the animal that has been pregnancy checked.</td></tr><tr><td>Date</td><td>yes</td><td></td><td>The date of the pregnancy check.</td></tr><tr><td>IsPregnant</td><td>yes</td><td></td><td>The result of the pregnancy check, e.g.  positive or negative.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>PregnancyCheck</td><td>The newly registered PregnancyCheck entity.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.RegisterPregnancyCheckRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.RegisterPregnancyCheckResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            ReproductionEntityServiceContractClient proxy = new ReproductionEntityServiceContractClient("ReproductionEntityService");
            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID_FARMER;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD_FARMER;

                long herdNumber = TestUtil.HERD_NUMBER;
                long animalNumber = m_cowAnimalNumberWithoutPregnancyCheck;
                AnimalType animalType = new AnimalType() { Code = 12 };
                DateTime pregnancyCheckDate = DateTime.Now.AddDays( -1 );
                bool isPregnant = true;

                //Register
                PregnancyCheck pregnancyCheck = proxy.RegisterPregnancyCheck(
                    animalNumber,
                    animalType,
                    pregnancyCheckDate,
                    herdNumber,
                    isPregnant );

                Assert.IsNotNull( pregnancyCheck );

                //Update
                DateTime date = DateTime.Now.AddDays( -2 );
                pregnancyCheck.Date = date;

                proxy.UpdatePregnancyCheck( ref pregnancyCheck );

                Assert.IsNotNull( pregnancyCheck );
                Assert.AreEqual( date.Date, pregnancyCheck.Date.Date );

                //Delete
                proxy.DeletePregnancyCheck( pregnancyCheck );

            }
            catch( FaultException&lt;InvalidArgument&gt; ex )
            {
                Debug.WriteLine( ex.Message, "ReproductionEntityServiceTest.TestCRUD" );
            }
            catch( Exception ex )
            {
                Debug.WriteLine( ex.Message );
                throw;
            }
            finally
            {
                if( proxy.State != CommunicationState.Faulted )
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.ReproductionEntityService.UpdatePregnancyCheck(DLBR.DCF.KDB.MessageContracts.UpdatePregnancyCheckRequest)">
      <summary>
        <h1>Functional Description</h1>
            Updates an existing pregnancy check.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>PregnancyCheck</td><td>yes</td><td></td><td>The PregnancyCheck to update. </td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr><td>PregnancyCheck</td><td>The updated PregnancyCheck entity.</td></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.UpdatePregnancyCheckRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.UpdatePregnancyCheckResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            ReproductionEntityServiceContractClient proxy = new ReproductionEntityServiceContractClient("ReproductionEntityService");
            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID_FARMER;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD_FARMER;

                long herdNumber = TestUtil.HERD_NUMBER;
                long animalNumber = m_cowAnimalNumberWithoutPregnancyCheck;
                AnimalType animalType = new AnimalType() { Code = 12 };
                DateTime pregnancyCheckDate = DateTime.Now.AddDays( -1 );
                bool isPregnant = true;

                //Register
                PregnancyCheck pregnancyCheck = proxy.RegisterPregnancyCheck(
                    animalNumber,
                    animalType,
                    pregnancyCheckDate,
                    herdNumber,
                    isPregnant );

                Assert.IsNotNull( pregnancyCheck );

                //Update
                DateTime date = DateTime.Now.AddDays( -2 );
                pregnancyCheck.Date = date;

                proxy.UpdatePregnancyCheck( ref pregnancyCheck );

                Assert.IsNotNull( pregnancyCheck );
                Assert.AreEqual( date.Date, pregnancyCheck.Date.Date );

                //Delete
                proxy.DeletePregnancyCheck( pregnancyCheck );

            }
            catch( FaultException&lt;InvalidArgument&gt; ex )
            {
                Debug.WriteLine( ex.Message, "ReproductionEntityServiceTest.TestCRUD" );
            }
            catch( Exception ex )
            {
                Debug.WriteLine( ex.Message );
                throw;
            }
            finally
            {
                if( proxy.State != CommunicationState.Faulted )
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.ReproductionEntityService.DeletePregnancyCheck(DLBR.DCF.KDB.MessageContracts.DeletePregnancyCheckRequest)">
      <summary>
        <h1>Functional Description</h1>
            Deletes an existing pregnancy check.
            <h1>Nested Input Parameters</h1><table><tr><th>Name</th><th>Required</th><th>ValidationRules</th><th>Description</th></tr><tr><td>PregnancyCheck</td><td>yes</td><td></td><td>The PregnancyCheck to delete.</td></tr></table><h1>Output parameters</h1><table><tr><th>Name</th><th>Description</th></tr><tr></tr></table></summary>
      <param name="request">The request object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.DeletePregnancyCheckRequest" /></param>
      <returns>The return value object. See <see cref="T:DLBR.DCF.KDB.MessageContracts.DeletePregnancyCheckResponse" /></returns>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InvalidArgument">This fault is thrown if an invalid argument is specified, e.g. an argument is null etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.OperationFailed">This fault is thrown if the operation fails, e.g. a data validation fails etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.InternalSystemError">This fault is thrown if an internal system error occurs, e.g. cannot connect to the data store etc.</exception>
      <exception cref="T:DLBR.DCF.KDB.FaultContracts.SecurityFault">This fault is thrown if the user is not authorized to perform the operation.</exception>
      <example>
            General example...
            <code>            ReproductionEntityServiceContractClient proxy = new ReproductionEntityServiceContractClient("ReproductionEntityService");
            try
            {
                proxy.ClientCredentials.UserName.UserName = TestUtil.USER_ID_FARMER;
                proxy.ClientCredentials.UserName.Password = TestUtil.PASSWORD_FARMER;

                long herdNumber = TestUtil.HERD_NUMBER;
                long animalNumber = m_cowAnimalNumberWithoutPregnancyCheck;
                AnimalType animalType = new AnimalType() { Code = 12 };
                DateTime pregnancyCheckDate = DateTime.Now.AddDays( -1 );
                bool isPregnant = true;

                //Register
                PregnancyCheck pregnancyCheck = proxy.RegisterPregnancyCheck(
                    animalNumber,
                    animalType,
                    pregnancyCheckDate,
                    herdNumber,
                    isPregnant );

                Assert.IsNotNull( pregnancyCheck );

                //Update
                DateTime date = DateTime.Now.AddDays( -2 );
                pregnancyCheck.Date = date;

                proxy.UpdatePregnancyCheck( ref pregnancyCheck );

                Assert.IsNotNull( pregnancyCheck );
                Assert.AreEqual( date.Date, pregnancyCheck.Date.Date );

                //Delete
                proxy.DeletePregnancyCheck( pregnancyCheck );

            }
            catch( FaultException&lt;InvalidArgument&gt; ex )
            {
                Debug.WriteLine( ex.Message, "ReproductionEntityServiceTest.TestCRUD" );
            }
            catch( Exception ex )
            {
                Debug.WriteLine( ex.Message );
                throw;
            }
            finally
            {
                if( proxy.State != CommunicationState.Faulted )
                {
                    proxy.Close();
                }
            }
</code></example>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateInsOwnerCategory">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.InsOwnerCategory" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.InsOwnerCategoryEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateInsOwnerCategory.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.InsOwnerCategory)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.InsOwnerCategory" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.InsOwnerCategoryEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateInsOwnerCategory.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.Classifications.InsOwnerCategoryEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.InsOwnerCategoryEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.InsOwnerCategory" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslatePregnancyCheck">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.PregnancyCheck" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.PregnancyCheckEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslatePregnancyCheck.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.PregnancyCheck)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.PregnancyCheck" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.PregnancyCheckEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslatePregnancyCheck.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.PregnancyCheckEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.PregnancyCheckEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.PregnancyCheck" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateReportData">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.ReportData" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.DataEntities.ReportDataEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateReportData.TranslateEntityToDataContract(DLBR.DCF.KDB.DataEntities.ReportDataEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataEntities.ReportDataEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.ReportData" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslatePractice">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.Practice" />  
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.PracticeEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslatePractice.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.Practice)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.Practice" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.PracticeEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslatePractice.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.PracticeEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.PracticeEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.Practice" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateAnimalTransferType">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.AnimalTransferType" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.AnimalTransferTypeEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateAnimalTransferType.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.AnimalTransferType)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.AnimalTransferType" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.AnimalTransferTypeEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateAnimalTransferType.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.Classifications.AnimalTransferTypeEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.AnimalTransferTypeEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.AnimalTransferType" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateAnimalTransferType.GetDirectionByCode(System.Nullable{System.Int32})">
      <summary>
            Convert a DirectionCode to its equivalent Direction enumeration.
            </summary>
      <param name="code"></param>
      <returns></returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateNationality">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.Nationality" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.NationalityEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateNationality.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.Nationality)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.Nationality" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.NationalityEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateNationality.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.Classifications.NationalityEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.NationalityEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.Nationality" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateAdvisorType">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.AdvisorType" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.AdvisorTypeEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateAdvisorType.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.AdvisorType)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.AdvisorType" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.AdvisorTypeEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateAdvisorType.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.Classifications.AdvisorTypeEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.AdvisorTypeEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.AdvisorType" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateAnimalOrigin">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.AnimalOrigin" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.AnimalOriginEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateAnimalOrigin.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.AnimalOrigin)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.AnimalOrigin" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.AnimalOriginEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateAnimalOrigin.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.Classifications.AnimalOriginEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.AnimalOriginEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.AnimalOrigin" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateAnimalColor">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.AnimalColor" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.AnimalColorEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateAnimalColor.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.AnimalColor)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.AnimalColor" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.AnimalColorEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateAnimalColor.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.Classifications.AnimalColorEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.AnimalColorEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.AnimalColor" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateTransferCause">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.TransferCause" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.TransferCauseEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateTransferCause.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.TransferCause)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.TransferCause" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.TransferCauseEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateTransferCause.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.Classifications.TransferCauseEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.TransferCauseEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.TransferCause" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateVetSampleType.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.VetSampleType)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.VetSampleType" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.VetSampleTypeEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateVetSampleType.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.Classifications.VetSampleTypeEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.VetSampleTypeEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.VetSampleType" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateWeighingMethod">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.WeighingMethod" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.WeighingMethodEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateWeighingMethod.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.WeighingMethod)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.WeighingMethod" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.WeighingMethodEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateWeighingMethod.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.Classifications.WeighingMethodEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.WeighingMethodEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.WeighingMethod" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateWeighingType">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.WeighingType" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.WeighingTypeEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateWeighingType.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.WeighingType)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.WeighingType" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.WeighingTypeEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateWeighingType.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.Classifications.WeighingTypeEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.WeighingTypeEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.WeighingType" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateAddress">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.Address" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.AddressEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateAddress.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.Address)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.Address" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.AddressEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateAddress.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.AddressEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.AddressEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.Address" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateAdvisor">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.Advisor" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.AdvisorEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateAdvisor.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.Advisor)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.Advisor" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.AdvisorEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateAdvisor.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.AdvisorEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.AdvisorEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.Advisor" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateAnimal">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.Animal" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.AnimalEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateAnimal.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.AnimalEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.AnimalEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.Animal" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateAnimalTransfer">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.AnimalTransfer" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.AnimalTransferEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateAnimalTransfer.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.AnimalTransfer)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.AnimalTransfer" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.AnimalTransferEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateAnimalTransfer.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.AnimalTransferEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.AnimalTransferEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.AnimalTransfer" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateCalving">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.Calving" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.CalvingEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateCalving.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.Calving)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.Calving" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.CalvingEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateCalving.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.CalvingEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.CalvingEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.Calving" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateDryPeriod">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.DryPeriod" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.DryPeriodEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateDryPeriod.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.DryPeriod)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.DryPeriod" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.DryPeriodEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateDryPeriod.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.DryPeriodEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.DryPeriodEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.DryPeriod" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateHerd">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.Herd" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.HerdEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateHerd.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.Herd)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.Herd" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.HerdEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateHerd.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.HerdEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.HerdEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.Herd" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateHerdHealthStatus">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.HerdHealthStatus" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.HerdHealthStatusEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateHerdHealthStatus.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.HerdHealthStatus)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.HerdHealthStatus" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.HerdHealthStatusEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateHerdHealthStatus.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.HerdHealthStatusEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.HerdHealthStatusEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.HerdHealthStatus" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateInsemination">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.Insemination" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.InseminationEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateInsemination.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.Insemination)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.Insemination" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.InseminationEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateInsemination.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.InseminationEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.InseminationEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.Insemination" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateInseminationRoute">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.InseminationRoute" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.InseminationRouteEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateInseminationRoute.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.InseminationRoute)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.InseminationRoute" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.InseminationRouteEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateInseminationRoute.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.InseminationRouteEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.InseminationRouteEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.InseminationRoute" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateReproductionStatus">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.ReproductionStatus" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.ReproductionStatusEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateReproductionStatus.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.ReproductionStatus)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.ReproductionStatus" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.ReproductionStatusEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateReproductionStatus.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.ReproductionStatusEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.ReproductionStatusEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.ReproductionStatus" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateVetSampleTypeResult">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.VetSampleTypeResult" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.VetSampleTypeResultEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateVetSampleTypeResult.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.VetSampleTypeResult)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.VetSampleTypeResult" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.VetSampleTypeResultEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateVetSampleTypeResult.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.VetSampleTypeResultEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.VetSampleTypeResultEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.VetSampleTypeResult" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateInseminationProduct">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.InseminationProduct" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.InseminationProductEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateInseminationProduct.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.InseminationProduct)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.InseminationProduct" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.InseminationProductEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateInseminationProduct.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.Classifications.InseminationProductEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.InseminationProductEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.InseminationProduct" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateInseminationTreatmentCode">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.InseminationTreatmentCode" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.InseminationTreatmentCodeEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateInseminationTreatmentCode.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.InseminationTreatmentCode)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.InseminationTreatmentCode" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.InseminationTreatmentCodeEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateInseminationTreatmentCode.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.Classifications.InseminationTreatmentCodeEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.InseminationTreatmentCodeEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.InseminationTreatmentCode" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateAnimalRace">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.AnimalRace" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.AnimalRaceEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateAnimalRace.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.AnimalRace)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.AnimalRace" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.AnimalRaceEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateAnimalRace.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.Classifications.AnimalRaceEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.AnimalRaceEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.AnimalRace" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateAnimalSize">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.AnimalSize" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.AnimalSizeEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateAnimalSize.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.AnimalSize)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.AnimalSize" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.AnimalSizeEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateAnimalSize.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.Classifications.AnimalSizeEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.AnimalSizeEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.AnimalSize" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateAnimalStatus">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.AnimalStatus" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.AnimalStatusEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateAnimalStatus.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.AnimalStatus)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.AnimalStatus" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.AnimalStatusEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateAnimalStatus.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.Classifications.AnimalStatusEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.AnimalStatusEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.AnimalStatus" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateAnimalType">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.AnimalType" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.AnimalTypeEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateAnimalType.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.AnimalType)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.AnimalType" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.AnimalTypeEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateAnimalType.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.Classifications.AnimalTypeEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.AnimalTypeEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.AnimalType" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateCalvingOutcome">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.CalvingOutcome" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.CalvingOutcomeEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateCalvingOutcome.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.CalvingOutcome)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.CalvingOutcome" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.CalvingOutcomeEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateCalvingOutcome.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.Classifications.CalvingOutcomeEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.CalvingOutcomeEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.CalvingOutcome" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateCalvingProgress">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.CalvingProgress" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.CalvingProgressEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateCalvingProgress.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.CalvingProgress)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.CalvingProgress" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.CalvingProgressEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateCalvingProgress.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.Classifications.CalvingProgressEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.CalvingProgressEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.CalvingProgress" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateGender">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.Gender" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.GenderEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateGender.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.Gender)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.Gender" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.GenderEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateGender.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.Classifications.GenderEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.GenderEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.Gender" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateHerdType">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.HerdType" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.HerdTypeEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateHerdType.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.HerdType)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.HerdType" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.HerdTypeEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateHerdType.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.Classifications.HerdTypeEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.HerdTypeEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.HerdType" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateTwinCode">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.TwinCode" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.TwinCodeEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateTwinCode.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.TwinCode)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.TwinCode" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.TwinCodeEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateTwinCode.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.Classifications.TwinCodeEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.Classifications.TwinCodeEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.TwinCode" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="T:DLBR.DCF.KDB.ServiceImplementation.TranslateInseminationTreatment">
      <summary>
            Class responsible for translating between the data contract <see cref="T:DLBR.DCF.KDB.DataContracts.InseminationTreatment" /> 
            and the business entity <see cref="T:DLBR.DCF.KDB.BusinessEntities.InseminationTreatmentEntity" />.
            </summary>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateInseminationTreatment.TranslateDataContractToEntity(DLBR.DCF.KDB.DataContracts.InseminationTreatment)">
      <summary>
            Translate the data contract into the corresponding business entity.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.DataContracts.InseminationTreatment" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.BusinessEntities.InseminationTreatmentEntity" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
    <member name="M:DLBR.DCF.KDB.ServiceImplementation.TranslateInseminationTreatment.TranslateEntityToDataContract(DLBR.DCF.KDB.BusinessEntities.InseminationTreatmentEntity)">
      <summary>
            Translate the business entity into the corresponding data contract.
            </summary>
      <param name="from">The <see cref="T:DLBR.DCF.KDB.BusinessEntities.InseminationTreatmentEntity" /> to translate.</param>
      <returns>An instance of <see cref="T:DLBR.DCF.KDB.DataContracts.InseminationTreatment" />. If <paramref name="from" /> is null, this method returns null.</returns>
    </member>
  </members>
</doc>